{"version":3,"sources":["/source/jsonapi.module.js","/source/model/model-validator/model-validator.js","angular-jsonapi.min.js","/source/model/model-linker/model-linker.js","/source/model/model-form/model-form.js","/source/model/abstract-model/abstract-model.js","/source/factory/factory-cache/factory-cache.factory.js","/source/utils/lazy-property.js","/source/utils/kebab-case.js","/source/utils/all-settled.js","/source/synchronizers/synchronizer-simple.js","/source/synchronizers/synchronizer-prototype.js","/source/synchronizations/synchronization-rest.js","/source/synchronizations/synchronization-prototype.js","/source/synchronizations/synchronization-local.js","/source/schema/schema.js","/source/schema/schema-link.js","/source/model/model.js","/source/factory/factory.js","/source/collection/collection.js","/source/jsonapi.provider.js","/source/jsonapi.config.js"],"names":["angular","module","constant","pluralize","AngularJsonAPIModelValidatorService","$q","validateForm","schema","data","resolve","validateField","key","_this","this","service","$inject","AngularJsonAPIModelLinkerService","$log","toLinkData","object","type","id","link","target","oneWay","undefined","error","relationships","polymorphic","model","__addHasMany","__processAddHasMany","__addHasOne","__processAddHasOne","unlink","__removeHasMany","__processRemove","reflectionSchema","reflectionKey","reflection","__removeHasOne","debug","linkData","isArray","indexOf","push","index","splice","AngularJsonAPIModelFormWrapper","AngularJsonAPIModelForm","parent","attributes","reset","toJson","copy","forEach","value","save","auto","validator","slice","errors","validation","validate","reject","erorrs","deferred","defer","then","promise","prototype","factory","AngularJsonAPIAbstractModelWrapper","uuid4","$rootScope","$injector","AngularJsonAPIAbstractModel","saved","synchronized","stable","removed","loadingCount","updatedAt","Date","now","name","promises","__setData","form","response","$emit","update","finish","notify","config","action","synchronize","refresh","$jsonapi","proccesResults","get","params","status","statusText","remove","unlinkAll","parentFactory","cache","clearRemoved","revertRemove","removeLink","linksObj","removeReflectionLink","bind","isObject","resolveReflection","rejectReflection","notifyReflection","validatedData","initialization","setAttributes","validators","setRelationships","relationshipData","links","linkOne","length","getFactory","AngularJsonAPICacheWrapper","AngularJsonAPICache","size","indexIds","addOrUpdate","Model","fromJson","json","collection","objectData","console","log","clear","warn","map","setIndexIds","array","element","isString","propertyName","callback","result","done","Object","defineProperty","call","enumerable","configurable","str","replace","toLowerCase","$provide","decorator","$delegate","allSettled","resolvedCallback","rejectedCallback","wrap","isFunction","success","reason","wrapped","hasOwnProperty","all","AngularJsonAPISynchronizerSimpleWrapper","AngularJsonAPISynchronizerPrototype","AngularJsonAPISynchronizerSimple","synchronizations","state","synchronization","synchronizer","step","resolved","results","afterHooks","hook","finishHooks","rejected","noop","beginHooks","beforeHooks","synchronizationHooks","create","constructor","AngularJsonAPISynchronizerPrototypeWrapper","AngularJsonAPISynchronizationRestWrapper","AngularJsonAPISynchronizationPrototype","toKebabCase","$http","AngularJsonAPISynchronizationRest","url","method","headers","resolveHttp","rejectHttp","add","rejectServerOffline","rejectNoConnection","Accept","Content-Type","AngularJsonAPISynchronizationPrototypeWrapper","allHooks","options","hookName","loading","begin","beforeSynchro","afterSynchro","before","after","AngularJsonAPISynchronizationLocalWrapper","$window","AngularJsonAPISynchronizationLocal","prefix","init","localStorage","getItem","removeItem","updateStorage","setItem","__updateStorage","AngularJsonAPISchemaWrapper","AngularJsonAPISchemaLink","AngularJsonAPISchema","include","linkSchema","linkName","linkSchemaObj","included","extend","join","AngularJsonAPILinkSchrapperLink","plural","singular","AngularJsonAPIModel","modelFactory","schemaObj","functions","metaFunction","metaFunctionName","apply","arguments","AngularJsonAPIFactoryWrapper","AngularJsonAPICollection","AngularJsonAPIFactory","initialized","fetch","initialize","generate","AngularJsonAPICollectionWrapper","event","description","$on","jsonapiProvider","jsonapiFactory","allFactories","memory","factoriesNames","names","addFactory","clearAll","objects","$get","provider","$logProvider","debugEnabled"],"mappings":"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","file":"angular-jsonapi.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi', ['uuid4'])\n  /* global pluralize: false */\n  .constant('pluralize', pluralize);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelValidatorService', AngularJsonAPIModelValidatorService);\n\n  function AngularJsonAPIModelValidatorService(\n    $q\n  ) {\n    var _this = this;\n    _this.validateForm = validateForm;\n    _this.validateField = validateField;\n\n    return this;\n\n    /**\n     * Validates form\n     * @param  {object} data Form data\n     * @return {object} Errors object indexed by keys\n     */\n    function validateForm(schema, data) {\n      var _this = this;\n\n      return $q.resolve({});\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(schema, key) {\n      var _this = this;\n\n      return $q.resolve([]);\n    }\n\n    // function __validate(validator, attributeValue, attributeName) {\n    //   var errors = [];\n    //   if (angular.isArray(validator)) {\n    //     angular.forEach(validator, function(element) {\n    //       errors = errors.concat(__validate(element, attributeValue, attributeName));\n    //     });\n    //   } else if (angular.isFunction(validator)) {\n    //     var err = validator(attributeValue, attributeName);\n    //     if (angular.isArray(err)) {\n    //       errors.concat(err);\n    //     } else {\n    //       $log.error(\n    //         'Wrong validator type it should return array of errors instead of: ' +\n    //           err.toString()\n    //       );\n    //     }\n    //   } else if (angular.isString(validator)) {\n    //     if (validator === 'text' || validator === 'string') {\n    //       if (!angular.isString(attributeValue)) {\n    //         errors.push(attributeName + ' is not a string ');\n    //       }\n    //     } else if (validator === 'number' || validator === 'integer') {\n    //       if (parseInt(attributeValue).toString() !== attributeValue.toString()) {\n    //         errors.push(attributeName + ' is not a number');\n    //       }\n    //     } else if (validator === 'uuid4') {\n    //       if (!uuid4.validate(attributeValue)) {\n    //         errors.push(attributeName + ' is not a uuid4');\n    //       }\n    //     } else if (validator === 'required') {\n    //       if (attributeValue.toString().length === 0) {\n    //         errors.push(attributeName + ' is empty');\n    //       }\n    //     } else {\n    //       $log.error('Wrong validator type: ' + validator.toString());\n    //     }\n    //   } else if (angular.isObject(validator)) {\n    //     if (validator.maxlength !== undefined && attributeValue.length > validator.maxlength) {\n    //       errors.push(attributeName + ' is too long max ' + validator.maxlength);\n    //     }\n\n    //     if (validator.minlength !== undefined && attributeValue.length < validator.minlength) {\n    //       errors.push(attributeName + ' is too short min ' + validator.minlength);\n    //     }\n\n    //     if (validator.maxvalue !== undefined && parseInt(attributeValue) > validator.maxvalue) {\n    //       errors.push(attributeName + ' is too big max ' + validator.maxvalue);\n    //     }\n\n    //     if (validator.minvalue !== undefined && parseInt(attributeValue) < validator.minvalue) {\n    //       errors.push(attributeName + ' is too small min ' + validator.minvalue);\n    //     }\n    //   } else {\n    //     $log.error('Wrong validator type: ' + validator.toString());\n    //   }\n\n    //   return errors;\n    // }\n  }\n})();\n","!function(){\"use strict\";angular.module(\"angular-jsonapi\",[\"uuid4\"]).constant(\"pluralize\",pluralize)}(),function(){\"use strict\";function t(t){function e(e,n){return t.resolve({})}function n(e,n){return t.resolve([])}var a=this;return a.validateForm=e,a.validateField=n,this}angular.module(\"angular-jsonapi\").service(\"AngularJsonAPIModelValidatorService\",t),t.$inject=[\"$q\"]}(),function(){\"use strict\";function t(t){function e(t){return null===t?null:{type:t.data.type,id:t.data.id}}function n(e,n,a,i){var u;return void 0===e?(t.error(\"Can't add link to non existing object\",e,n,a),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),!1):(u=e.schema.relationships[n],void 0===a?(t.error(\"Can't link non existing object\",e,n,a,u),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",u),!1):void 0===u?(t.error(\"Can't add link not present in schema:\",e,n,a,u),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",u),!1):null!==a&&u.polymorphic===!1&&u.model!==a.data.type?(t.error(\"This relation is not polymorphic, expected: \"+u.model+\" instead of \"+a.data.type),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",u),!1):\"hasMany\"===u.type?i===!0?c(e,n,a):r(e,n,a):\"hasOne\"===u.type?i===!0?s(e,n,a):o(e,n,a):void 0)}function a(e,n,a,r){var o;return void 0===e?(t.error(\"Can't remove link from non existing object\",e,n,a),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),!1):(o=e.schema.relationships[n],void 0===o?(t.error(\"Can't remove link not present in schema:\",e,n,a,o),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",o),!1):r===!0?l(e,n,a):i(e,n,a))}function r(t,e,n){var a,r=t.schema.relationships[e].reflection;return r===!1?c(t,e,n):(a=n.schema.relationships[r],void(\"hasOne\"===a.type?o(n,r,t):\"hasMany\"===a.type&&(c(t,e,n),c(n,r,t))))}function o(t,e,n){var a,r=t.schema.relationships[e].reflection,o=t.relationships[e];s(t,e,n),r!==!1&&(a=n.schema.relationships[r],\"hasOne\"===a.type?(void 0!==o&&null!==o&&u(o,r,t),s(n,r,t)):\"hasMany\"===a.type&&(void 0!==o&&null!==o&&l(o,r,t),c(n,r,t)))}function i(t,e,n){var a,r=t.schema.relationships[e],o=r.reflection;\"hasMany\"===r.type?l(t,e,n):\"hasOne\"===r.type&&u(t,e,n),o!==!1&&(a=n.schema.relationships[o],\"hasOne\"===a.type?u(n,o,t):\"hasMany\"===a.type&&l(n,o,t))}function s(n,a,r){return t.debug(\"addHasOne\",n,a,r),n.relationships[a]=r,n.data.relationships[a].data=e(r),!0}function c(n,a,r){var o=e(r);return t.debug(\"addHasMany\",n,a,r),angular.isArray(n.relationships[a])&&n.relationships[a].indexOf(r)>-1?!1:(n.relationships[a]=n.relationships[a]||[],n.data.relationships[a].data=n.data.relationships[a].data||[],n.relationships[a].push(r),n.data.relationships[a].data.push(o),!0)}function u(e,n,a){return t.debug(\"removeHasOne\",e,n,a),void 0!==a&&e.relationships[n]!==a?!1:(e.relationships[n]=null,e.data.relationships[n].data=void 0,!0)}function l(e,n,a){if(t.debug(\"removeHasMany\",e,n,a),void 0!==e.relationships[n]){if(void 0===a)return e.relationships[n]=[],e.data.relationships[n].data=[],!0;var r=e.relationships[n].indexOf(a);return-1===r?!1:(e.relationships[n].splice(r,1),e.data.relationships[n].data.splice(r,1),!0)}}var d=this;return d.toLinkData=e,d.link=n,d.unlink=a,this}angular.module(\"angular-jsonapi\").service(\"AngularJsonAPIModelLinkerService\",t),t.$inject=[\"$log\"]}(),function(){\"use strict\";function t(t,e,n){function a(t){var e=this;e.data={id:t.data.id,type:t.data.type,attributes:{},relationships:{}},e.relationships={},e.parent=t,e.schema=t.schema,e.reset()}function r(){var t=this,e=angular.copy(t.data),n={};return angular.forEach(e.relationships,function(t,e){void 0!==t.data&&(n[e]=t)}),e.relationships=n,{data:e}}function o(){var t=this;return t.parent.save()}function i(t){var e=this;(t!==!0||e.parent[\"synchronized\"]!==!0)&&(angular.forEach(e.schema.attributes,function(t,n){e.data.attributes[n]=angular.copy(e.parent.data.attributes[n])||\"\"}),angular.forEach(e.schema.relationships,function(t,n){e.data.relationships[n]=angular.copy(e.parent.data.relationships[n])||{},e.relationships[n]=angular.isArray(e.relationships[n])?e.parent.relationships[n].slice():e.parent.relationships[n]}),e.errors={validation:{}})}function s(){function e(t){a.errors.validation=t,r.reject(t)}var a=this,r=n.defer();return t.validateForm(a.data).then(r.resolve,e),r.promise}function c(e){function a(t){r.errors.validation[e]=t,o.reject(t)}var r=this,o=n.defer();return t.validateForm(r.data[e],e).then(o.resolve,a),o.promise}function u(t,a){var r=this;return n.resolve(e.link(r,t,a,!0))}function l(t,a){var r=this;return n.resolve(e.unlink(r,t,a,!0))}return a.prototype.save=o,a.prototype.reset=i,a.prototype.validate=s,a.prototype.validateField=c,a.prototype.link=u,a.prototype.unlink=l,a.prototype.toJson=r,a}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIModelForm\",t),t.$inject=[\"AngularJsonAPIModelValidatorService\",\"AngularJsonAPIModelLinkerService\",\"$q\"]}(),function(){\"use strict\";function t(t,e,n,a,r,o,i){function s(e,n,a){var r=this;e.relationships=e.relationships||{},r.saved=void 0===n?!0:n,r.stable=void 0===a?!0:a,r[\"synchronized\"]=void 0===a?!0:a,r.removed=!1,r.loadingCount=0,r.updatedAt=Date.now(),r.data={relationships:{},attributes:{}},r.relationships={},angular.forEach(r.schema.relationships,function(t,e){r.relationships[e]=void 0}),r.errors={validation:{}},r.promises={},v(r,e),r.form=new t(r)}function c(){function t(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:save\",\"resolved\",r,t),r.update(r.form.data),r[\"synchronized\"]=!0,r.saved=!0,r.stable=!0,t.finish(),o.resolve(r)}function e(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:save\",\"rejected\",r,t),t.finish(),o.reject(t.errors)}function n(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:save\",\"notify\",r,t),o.notify(t.errors)}var r=this,o=i.defer(),s={action:r.saved===!1?\"add\":\"update\",object:r};return r.form.validate().then(r.synchronize(s).then(t,e,n),o.reject),o.promise}function u(){var t=this;return t.form.reset()}function l(){function t(t){a.$emit(\"angularJsonAPI:\"+c.data.type+\":object:refresh\",\"resolved\",c,t),o.proccesResults(t.data),t.finish(),c[\"synchronized\"]=!0,c.stable=!0,s.resolve(t)}function e(t){a.$emit(\"angularJsonAPI:\"+c.data.type+\":object:refresh\",\"rejected\",c,t),t.finish(),s.reject(t)}function n(t){a.$emit(\"angularJsonAPI:\"+c.data.type+\":object:refresh\",\"notify\",c,t),s.notify(t)}var o=r.get(\"$jsonapi\"),s=i.defer(),c=this,u={action:\"refresh\",object:c,params:c.schema.params.get};return c.saved===!1?s.reject({errors:[{status:0,statusText:\"Can't refresh new object\"}]}):c.synchronize(u).then(t,e,n),s.promise}function d(){var t=this,e=angular.copy(t.data),n={};return angular.forEach(e.relationships,function(t,e){void 0!==t.data&&(n[e]=t)}),e.relationships=n,{data:e}}function h(){function t(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:remove\",\"resolved\",r,t),r.removed=!0,r.unlinkAll(),r.parentFactory.cache.clearRemoved(r.data.id),t.finish(),o.resolve(t)}function e(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:remove\",\"rejected\",r,t),r.parentFactory.cache.revertRemove(r.data.id),t.finish(),o.reject(t)}function n(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:remove\",\"notify\",r,t),o.notify(t)}var r=this,o=i.defer(),s={action:\"remove\",object:r};return r.parentFactory.cache.remove(r.data.id),r.saved===!1?o.resolve():r.synchronize(s).then(t,e,n),o.promise}function p(t){function n(t,e){var n=o.schema.relationships[e],a=n.reflection;angular.isArray(t)?angular.forEach(t,r.bind(void 0,a)):angular.isObject(t)&&r(a,t),\"hasOne\"===n.type?o.relationships[e]=null:\"hasMany\"===n.type&&(o.relationships[e]=[])}function r(t,n){function r(t){a.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"resolve\",o,t),t.finish(),s.resolve(o)}function i(t){a.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"rejected\",o,t),t.finish(),s.reject(t)}function c(t){a.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"notify\",o,t),t.finish(),s.notify(t)}var u=n.schema.relationships[t];e.unlink(n,t,o,u),n.synchronize({action:\"unlinkReflection\",object:n,target:o,key:t}).then(r,i,c)}var o=this,s=i.defer();return void 0===t?angular.forEach(o.relationships,n):n(o.relationships[t],t),s.promise}function f(t,n){function r(r){function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"resolve\",u,t),t.finish(),c.resolve(u)}function i(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"rejected\",u,t),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"notify\",u,t),t.finish(),c.notify(t)}var l=n.schema.relationships[d];a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"resolved\",u,r),e.link(u,t,n),u.stable=!0,r.finish(),n.synchronize({action:\"linkReflection\",schema:l,object:n,target:u,key:d}).then(o,i,s)}function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"rejected\",u,t),c.reject(t.errors),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"notify\",u,t),c.notify(t)}var c=i.defer(),u=this,l=u.schema.relationships[t],d=l.reflection,h={action:\"link\",object:u,schema:l,target:n,key:t};return void 0===n?c.reject({errors:[{status:0,statusText:\"Can't link undefined\"}]}):u.saved===!1?c.reject({errors:[{status:0,statusText:\"Can't link new object\"}]}):u.synchronize(h).then(r,o,s),c.promise}function y(t,n){function r(r){function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"resolve\",u,t),t.finish(),c.resolve(u)}function i(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"rejected\",u,t),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"notify\",u,t),t.finish(),c.notify(t)}var h=n.schema.relationships[d];a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"resolved\",u,r),e.unlink(u,t,n,l),u.stable=!0,r.finish(),n.synchronize({action:\"unlinkReflection\",object:n,target:u,schema:h,key:d}).then(o,i,s)}function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"rejected\",u,t),c.reject(t.errors),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"notify\",u,t),c.notify(t)}var c=i.defer(),u=this,l=u.schema.relationships[t],d=l.reflection,h={action:\"unlink\",object:u,target:n,schema:l,key:t};return void 0===n?c.reject({errors:[{status:0,statusText:\"Can't unlink undefined\"}]}):u.saved===!1?c.reject({errors:[{status:0,statusText:\"Can't unlink new object\"}]}):u.synchronize(h).then(r,o,s),c.promise}function g(t,e,n){var a=this;return v(a,t)===!0?(a.reset(e),a[\"synchronized\"]=n===!0?!1:!0,a.stable=n===!0?!1:!0,a.updatedAt=Date.now(),!0):!1}function v(t,a){function i(e,n){t.data.attributes[n]=a.attributes[n]}function s(e,n){var r=a.relationships[n];return void 0===r?void(t.data.relationships[n]={data:void 0}):(t.data.relationships[n]=t.data.relationships[n]||{},t.data.relationships[n].links=r.links,void(\"hasOne\"===e.type?c(t,n,r.data):\"hasMany\"===e.type&&(angular.isArray(r.data)&&0===r.data.length?(t.data.relationships[n].data=[],t.unlinkAll(n)):angular.forEach(r.data,c.bind(void 0,t,n)))))}function c(t,n,a){if(null===a)return void e.link(t,n,null);if(void 0!==a){var r=u.getFactory(a.type);if(void 0===r)return void o.error(\"Factory not found\",a.type,a);var i=r.cache.get(a.id);e.link(t,n,i)}}var u=r.get(\"$jsonapi\"),l=t.schema;return t.data.id=a.id,t.data.type=a.type,t.parentFactory.schema.type!==a.type?(o.error(\"Different type then factory\",t.parentFactory.schema.type,a),!1):n.validate(t.data.id)?(a.attributes=a.attributes||{},a.relationships=a.relationships||{},angular.forEach(l.attributes,i),angular.forEach(l.relationships,s),!0):(o.error(\"Invalid id\"),!1)}return s.prototype.refresh=l,s.prototype.remove=h,s.prototype.reset=u,s.prototype.save=c,s.prototype.update=g,s.prototype.link=f,s.prototype.unlink=y,s.prototype.unlinkAll=p,s.prototype.toJson=d,s}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIAbstractModel\",t),t.$inject=[\"AngularJsonAPIModelForm\",\"AngularJsonAPIModelLinkerService\",\"uuid4\",\"$rootScope\",\"$injector\",\"$log\",\"$q\"]}(),function(){\"use strict\";function t(t,e){function n(t){var e=this;e.factory=t,e.data={},e.removed={},e.size=0,e.indexIds=[]}function a(t,n,a){var r=this,o=t.id;return void 0===o?void e.error(\"Can't add data without id!\",t):(void 0===r.data[o]?(r.data[o]=new r.factory.Model(t,!0,n),r.size+=1):r.data[o].update(t,!0,a),r.data[o])}function r(t){var e=this,n=angular.fromJson(t);angular.isObject(n)&&void 0!==n.data&&(e.updatedAt=n.updatedAt,e.indexIds=n.indexIds,angular.forEach(n.data,function(t){var n=t.data;console.log(\"fromJson\",n.id),e.addOrUpdate(n,!1,!0)}))}function o(){var t=this,e={data:{},updatedAt:t.updatedAt,indexIds:t.indexIds};return angular.forEach(t.data,function(t,n){e.data[n]=t.toJson()}),angular.toJson(e)}function i(){var t=this;t.data={},t.removed={}}function s(t){var e=this;return void 0===e.data[t]&&(e.data[t]=new e.factory.Model({id:t,type:e.factory.Model.prototype.schema.type},!0,!1)),e.data[t]}function c(t){var n=this;return e.warn(\"Unused params\",t),n.indexIds.map(n.get.bind(n))}function u(e){var n=this;n.indexIds=[],angular.forEach(e,function(e){angular.isString(e)&&t.validate(e)?n.indexIds.push(e):angular.isObject(e)&&t.validate(e.data.id)&&n.indexIds.push(e.data.id)})}function l(t){var e=this;return void 0!==e.data[t]&&(e.removed[t]=e.data[t],delete e.data[t],e.size-=1),e.removed[t]}function d(t){var e=this;return void 0!==e.removed[t]&&(e.data[t]=e.removed[t],delete e.removed[t],e.size+=1),e.data[t]}function h(t){var e=this;delete e.removed[t]}return n.prototype.get=s,n.prototype.index=c,n.prototype.setIndexIds=u,n.prototype.addOrUpdate=a,n.prototype.fromJson=r,n.prototype.toJson=o,n.prototype.clear=i,n.prototype.remove=l,n.prototype.revertRemove=d,n.prototype.clearRemoved=h,n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPICache\",t),t.$inject=[\"uuid4\",\"$log\"]}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").constant(\"lazyProperty\",function(t,e,n){var a,r;Object.defineProperty(t,e,{get:function(){return r||(r=!0,a=n.call(t)),a},enumerable:!0,configurable:!0})})}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").constant(\"toKebabCase\",function(t){return t.replace(/([a-z])([A-Z])/g,\"$1-$2\").toLowerCase()})}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").config([\"$provide\",function(t){t.decorator(\"$q\",[\"$delegate\",function(t){var e=t;return e.allSettled=e.allSettled||function(t,n,a){function r(t){return e.resolve(t).then(function(t){return angular.isFunction(n)&&n(t),{success:!0,value:t}},function(t){return angular.isFunction(a)&&a(t),{success:!1,reason:t}})}var o=angular.isArray(t)?[]:{};return angular.forEach(t,function(t,e){o.hasOwnProperty(e)||(o[e]=r(t))}),e.all(o)},e}])}])}(),function(){\"use strict\";function t(t,e,n){function a(e){var n=this;n.state={},t.call(n,e),angular.forEach(e,function(t){t.synchronizer=n})}function r(a){function r(t){d.notify({step:\"synchronization\",data:t})}function o(t){d.notify({step:\"synchronization\",errors:t})}function i(t){u.state[h]=u.state[h]||{},u.state[h].success=!0,angular.forEach(t,function(t){t.success===!1&&(u.state[h].success=!1)}),angular.forEach(u.synchronizations,function(e){angular.forEach(e.afterHooks[h],function(e){d.notify({step:\"after\",errors:e.call(u,a,t)})})});var e,n=[];angular.forEach(t,function(t){t.success===!0?e=t.value:n.push(t.reason)}),n.length>0?d.reject({data:e,finish:s,errors:n}):d.resolve({data:e,finish:s,errors:n})}function s(){angular.forEach(u.synchronizations,function(t){angular.forEach(t.finishHooks[h],function(t){d.notify({step:\"finish\",errors:t.call(u,a)})})})}function c(t){n.error(\"All settled rejected! Something went wrong\"),d.reject({finish:angular.noop,errors:t})}var u=this,l=[],d=e.defer(),h=a.action;return t.prototype.synchronize.call(u,a),angular.forEach(u.synchronizations,function(t){angular.forEach(t.beginHooks[h],function(t){d.notify({step:\"begin\",data:t.call(u,a)})})}),angular.forEach(u.synchronizations,function(t){angular.forEach(t.beforeHooks[h],function(t){d.notify({step:\"before\",data:t.call(u,a)})})}),angular.forEach(u.synchronizations,function(t){angular.forEach(t.synchronizationHooks[h],function(t){l.push(t.call(u,a))})}),e.allSettled(l,r,o).then(i,c),d.promise}return a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a.prototype.synchronize=r,a}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizerSimple\",t),t.$inject=[\"AngularJsonAPISynchronizerPrototype\",\"$q\",\"$log\"]}(),function(){\"use strict\";function t(t){function e(t){var e=this;e.synchronizations=t}function n(e){var n=this;t.debug(\"Synchro Collection\",n.factory.Model.prototype.schema.type,e),void 0===e.action&&t.error(\"Can't synchronize undefined action\",e)}return e.prototype.synchronize=n,e}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizerPrototype\",t),t.$inject=[\"$log\"]}(),function(){\"use strict\";function t(t,e,n,a,r){function o(n){function o(t){return r({method:\"GET\",headers:y,url:n,params:t.params||{}}).then(h,p)}function i(t){return r({method:\"GET\",headers:y,url:n+\"/\"+t.object.data.id,params:t.params||{}}).then(h,p)}function s(t){return r({method:\"DELETE\",headers:y,url:n+\"/\"+t.object.data.id}).then(h,p)}function c(t){var e=a.defer();return t.object.removed===!0?e.reject({errors:[{status:0,statusText:\"Object has been removed\"}]}):void 0!==t.target&&void 0===t.target.data.id?e.reject({errors:[{status:0,statusText:\"Can't unlink object without id through rest call\"}]}):\"hasOne\"===t.schema.type?r({method:\"DELETE\",headers:y,url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,p).then(e.resolve,e.reject):\"hasMany\"===t.schema.type&&(void 0===t.target?r({method:\"PUT\",headers:y,data:{data:[]},url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,p).then(e.resolve,e.reject):r({method:\"DELETE\",headers:y,url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key+\"/\"+t.target.data.id}).then(h,p).then(e.resolve,e.reject)),e.promise}function u(t){var o=a.defer();return t.object.removed===!0?o.reject({errors:[{status:0,statusText:\"Object has been removed\"}]}):void 0===t.target||void 0===t.target.data.id?o.reject({errors:[{status:0,statusText:\"Can't link object without id through rest call\"}]}):\"hasOne\"===t.schema.type?r({method:\"PUT\",headers:y,data:{data:e.toLinkData(t.target)},url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,p).then(o.resolve,o.reject):\"hasMany\"===t.schema.type&&r({method:\"POST\",headers:y,data:{data:[e.toLinkData(t.target)]},url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,p).then(o.resolve,o.reject),o.promise}function l(t){return r({method:\"PUT\",headers:y,url:n+\"/\"+t.object.data.id,data:t.object.form.toJson()}).then(h,p)}function d(t){return r({method:\"POST\",headers:y,url:n+\"/\",data:t.object.form.toJson()}).then(h,p)}function h(t){return a.resolve(t.data)}function p(t){function e(){o.reject({status:t.status,statusText:\"Server is offline\"})}function n(){o.reject({status:t.status,statusText:\"No internet connection\"})}var o=a.defer();return 0===t.status?r({method:\"GET\",url:\"https://status.cloud.google.com/incidents.schema.json\"}).then(e,n):o.reject({status:t.status,statusText:t.statusText}),o.promise}var f=this,y={Accept:\"application/vnd.api+json\",\"Content-Type\":\"application/vnd.api+json\"};t.call(f),f.synchronization(\"remove\",s),f.synchronization(\"unlink\",c),f.synchronization(\"link\",u),f.synchronization(\"update\",l),f.synchronization(\"add\",d),f.synchronization(\"all\",o),f.synchronization(\"get\",i),f.synchronization(\"refresh\",i)}return o.prototype=Object.create(t.prototype),o.prototype.constructor=o,o}angular.module(\"angular-jsonapi-rest\",[\"angular-jsonapi\"]).factory(\"AngularJsonAPISynchronizationRest\",t),t.$inject=[\"AngularJsonAPISynchronizationPrototype\",\"AngularJsonAPIModelLinkerService\",\"toKebabCase\",\"$q\",\"$http\"]}(),function(){\"use strict\";function t(){function t(){var t=this,e=[\"add\",\"init\",\"get\",\"all\",\"clear\",\"remove\",\"unlink\",\"unlinkReflection\",\"link\",\"linkReflection\",\"update\",\"refresh\"];t.state={},t.beginHooks={},t.beforeHooks={},t.synchronizationHooks={},t.afterHooks={},t.finishHooks={},t.options={},angular.forEach(e,function(e){t.beginHooks[e]=[],t.beforeHooks[e]=[],t.synchronizationHooks[e]=[],t.afterHooks[e]=[],t.finishHooks[e]=[],t.state[e]={loading:!1,success:!0}})}function e(t,e){var n=this;n.beginHooks[t].push(e)}function n(t,e){var n=this;n.finishHooks[t].push(e)}function a(t,e){var n=this;n.beforeHooks[t].push(e)}function r(t,e){var n=this;n.afterHooks[t].push(e)}function o(t,e){var n=this;n.synchronizationHooks[t].push(e)}return t.prototype.before=a,t.prototype.after=r,t.prototype.begin=e,t.prototype.finish=n,t.prototype.synchronization=o,t}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizationPrototype\",t)}(),function(){\"use strict\";function t(t,e,n){function a(a){function r(){var t=s.synchronizer.factory.schema.type;return n.resolve(e.localStorage.getItem(a+\".\"+t))}function o(){var t=s.synchronizer.factory.schema.type;e.localStorage.removeItem(a+\".\"+t)}function i(){var t=s.synchronizer.factory.schema.type,n=s.synchronizer.factory.cache;e.localStorage.setItem(a+\".\"+t,n.toJson())}var s=this;a=a||\"AngularJsonAPI\",s.__updateStorage=i,t.call(s),s.synchronization(\"init\",r),s.begin(\"clear\",o),s.begin(\"remove\",i),s.begin(\"refresh\",i),s.begin(\"unlink\",i),s.begin(\"unlinkReflection\",i),s.begin(\"link\",i),s.begin(\"linkReflection\",i),s.begin(\"update\",i),s.begin(\"add\",i),s.finish(\"get\",i),s.finish(\"all\",i),s.finish(\"init\",i),s.finish(\"clear\",i),s.finish(\"remove\",i),s.finish(\"refresh\",i),s.finish(\"unlink\",i),s.finish(\"unlinkReflection\",i),s.finish(\"link\",i),s.finish(\"linkReflection\",i),s.finish(\"update\",i),s.finish(\"add\",i),s.finish(\"get\",i),s.finish(\"all\",i)}return a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a}angular.module(\"angular-jsonapi-local\",[\"angular-jsonapi\"]).factory(\"AngularJsonAPISynchronizationLocal\",t),t.$inject=[\"AngularJsonAPISynchronizationPrototype\",\"$window\",\"$q\"]}(),function(){\"use strict\";function t(t,e,n){function a(t){var e=this,a=t.include||{};t.include=a,a.get=t.include.get||[],a.all=t.include.all||[],e.params={get:{},all:{}},angular.forEach(t.relationships,function(e,r){var o=new n(e,r,t.type);t.relationships[r]=o,o.included===!0&&(a.get.push(r),\"hasOne\"===o.type&&a.all.push(r))}),angular.extend(e,t),a.get.length>0&&(e.params.get.include=a.get.join(\",\")),a.all.length>0&&(e.params.all.include=a.all.join(\",\"))}return a}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISchema\",t),t.$inject=[\"$log\",\"pluralize\",\"AngularJsonAPISchemaLink\"]}(),function(){\"use strict\";function t(t,e){function n(n,a,r){var o=this;angular.isString(n)?(o.model=e.plural(a),o.type=n,o.polymorphic=!1,o.reflection=r):(void 0===n.type&&t.error(\"Schema of link without a type: \",n,a),\"hasMany\"!==n.type&&\"hasOne\"!==n.type&&t.error(\"Schema of link with wrong type: \",n.type,\"available: hasOne, hasMany\"),o.model=n.model||e.plural(a),o.type=n.type,o.polymorphic=n.polymorphic||!1,o.reflection=void 0===n.reflection?\"hasMany\"===o.type?e.singular(r):r:n.reflection,o.included=n.included||!1)}return n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISchemaLink\",t),t.$inject=[\"$log\",\"pluralize\"]}(),function(){\"use strict\";function t(t,e,n){function a(e,a){var r=function(e,a,r){var o=this;e.type!==o.schema.type&&n.error(\"Data type other then declared in schema: \",e.type,\" instead of \",o.schema.type),t.call(o,e,a,r),o.form.parent=o};return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.schema=e,r.prototype.parentFactory=a,r.prototype.synchronize=a.synchronizer.synchronize.bind(a.synchronizer),angular.forEach(e.functions,function(t,e){r.prototype[e]=function(){return t.apply(this,arguments)}}),r}return{model:a}}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIModel\",t),t.$inject=[\"AngularJsonAPIAbstractModel\",\"AngularJsonAPISchema\",\"$log\"]}(),function(){\"use strict\";function t(t,e,n,a,r,o,i,s){function c(a,r){function i(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"resolved\",t),u.cache.fromJson(t.data),u.initialized=!0,t.finish()}function s(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"rejected\",t),t.finish(),u.initialized=!0}function c(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"notify\",t)}var u=this,l={action:\"init\"};u.schema=new e(a),u.cache=new n(u),u.synchronizer=r,u.synchronizer.factory=u,u.Model=t.model(u.schema,u),u.initialized=!1,u.type=u.schema.type,r.factory=u,u.synchronizer.synchronize(l).then(i,s,c)}function u(t){var e=this;return r.validate(t)?e.cache.get(t).refresh():s.reject({errors:[{status:0,statusText:\"Invalid id not uuid4\"}]})}function l(t){var e=this;t=t||{};var n=new a(e,angular.extend(t,e.schema.params.all));return n.fetch(),n}function d(t){var e=this,n=e.cache.remove(t);return n.remove()}function h(t,e){var n=this,a={};if(void 0!==t&&void 0!==e){var o=n.schema[t];\"hasOne\"===o.type?a[t]={data:e.data.id}:\"hasMany\"===o.type&&i.warn(\"Initialize with relationship disallowed for hasMany relationships\")}var s={type:n.type,id:r.generate(),attributes:{},relationships:a},c=new n.Model(s,!1,!1);return c}function p(){function t(t){o.$emit(\"angularJsonAPI:\"+a.type+\":factory:clear\",\"resolved\",t),t.finish(),r.resolve(t)}function e(t){o.$emit(\"angularJsonAPI:\"+a.type+\":factory:clear\",\"resolved\",t),t.finish(),r.reject(t)}function n(t){o.$emit(\"angularJsonAPI:\"+a.type+\":factory:clear\",\"notify\",t),r.notify(t)}var a=this,r=s.defer(),i={action:\"clear\"};return a.cache.clear(),a.synchronizer.synchronize(i).then(t,e,n),r}return c.prototype.get=u,c.prototype.all=l,c.prototype.remove=d,c.prototype.initialize=h,c.prototype.clear=p,c}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIFactory\",t),t.$inject=[\"AngularJsonAPIModel\",\"AngularJsonAPISchema\",\"AngularJsonAPICache\",\"AngularJsonAPICollection\",\"uuid4\",\"$rootScope\",\"$log\",\"$q\"]}(),function(){\"use strict\";function t(t,e,n){function a(e,n){function a(t,e,n){var a;\"resolved\"===e&&(a=r.data.indexOf(n),a>-1&&(r.data.splice(a,1),r.factory.cache.setIndexIds(r.data)))}var r=this;r.factory=e,r.type=e.schema.type,r.params=n,r.errors={synchronization:{name:\"Synchronization\",description:\"Errors during synchronization\",errors:[]}},r.error=!1,r.data=r.factory.cache.index(r.params),r[\"synchronized\"]=!1,t.$on(\"angularJsonAPI:\"+r.type+\":object:remove\",a)}function r(t){var e=this;return e.factory.get(t)}function o(){function a(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"resolved\",i,e),i.errors.synchronization.errors=[],i.data=c.proccesResults(e.data),i.error=!1,i.updatedAt=Date.now(),i[\"synchronized\"]=!0,i.factory.cache.setIndexIds(i.data),e.finish(),s.resolve(i)}function r(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"rejected\",i,e),i.errors.synchronization.errors=e.errors,i.error=!0,e.finish(),s.reject(e)}function o(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"notify\",i,e),s.notify(e)}var i=this,s=n.defer(),c=e.get(\"$jsonapi\"),u={action:\"all\",params:i.params};return i.factory.synchronizer.synchronize(u).then(a,r,o),s.promise}return a.prototype.fetch=o,a.prototype.refresh=o,a.prototype.get=r,a}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPICollection\",t),t.$inject=[\"$rootScope\",\"$injector\",\"$q\"]}(),function(){\"use strict\";function t(){function t(t,a){function r(){return e}function o(){return n}function i(t,r){var o=new a(t,r);e[t.type]=o,n.push(t.type)}function s(t){return e[t]}function c(n){return void 0===e[n]&&t.error(\"Can\t add not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].saved.form}function u(n,a){return void 0===e[n]&&t.error(\"Can\t get not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].get(a)}function l(n,a){return void 0===e[n]&&t.error(\"Can\t remove not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].remove(a)}function d(n){return void 0===e[n]&&t.error(\"Can\t get all of not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].all()}function h(){angular.forEach(e,function(t){t.clear()})}function p(e){if(void 0===e&&t.error(\"Can't proccess results:\",e),angular.forEach(e.included,function(t){s(t.type).cache.addOrUpdate(t,!0)}),angular.isArray(e.data)){var n=[];return angular.forEach(e.data,function(t){n.push(s(t.type).cache.addOrUpdate(t,!0))}),n}return s(e.data.type).cache.addOrUpdate(e.data,!0)}return{form:c,get:u,remove:l,all:d,addFactory:i,getFactory:s,clearAll:h,proccesResults:p,allFactories:r,factoriesNames:o}}var e={},n=[];this.$get=t,t.$inject=[\"$log\",\"AngularJsonAPIFactory\"]}angular.module(\"angular-jsonapi\").provider(\"$jsonapi\",t)}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").config([\"$logProvider\",function(t){t.debugEnabled(!1)}])}();\n//# sourceMappingURL=angular-jsonapi.min.js.map","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelLinkerService', AngularJsonAPIModelLinkerService);\n\n  function AngularJsonAPIModelLinkerService($log) {\n    var _this = this;\n\n    _this.toLinkData = toLinkData;\n\n    _this.link = link;\n    _this.unlink = unlink;\n\n    return this;\n\n    /**\n     * Extracts data needed for relationship linking from object\n     * @param  {AngularJsonAPIModel} object Object\n     * @return {json}        Link data\n     */\n    function toLinkData(object) {\n      if (object === null) {\n        return null;\n      }\n\n      return {type: object.data.type, id: object.data.id};\n    }\n\n    /**\n     * Add target to object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be linked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function link(object, key, target, oneWay) {\n      var schema;\n\n      if (object === undefined) {\n        $log.error('Can\\'t add link to non existing object', object, key, target);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        return false;\n      }\n\n      schema = object.schema.relationships[key];\n\n      if (target === undefined) {\n        $log.error('Can\\'t link non existing object', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema === undefined) {\n        $log.error('Can\\'t add link not present in schema:', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (target !== null && schema.polymorphic === false && schema.model !== target.data.type) {\n        $log.error('This relation is not polymorphic, expected: ' + schema.model + ' instead of ' + target.data.type);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema.type === 'hasMany') {\n        if (oneWay === true) {\n          return __addHasMany(object, key, target);\n        } else {\n          return __processAddHasMany(object, key, target);\n        }\n      } else if (schema.type === 'hasOne') {\n        if (oneWay === true) {\n          return __addHasOne(object, key, target);\n        } else {\n          return __processAddHasOne(object, key, target);\n        }\n      }\n    }\n\n    /**\n     * Remove target from object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be unlinked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function unlink(object, key, target, oneWay) {\n      var schema;\n\n      if (object === undefined) {\n        $log.error('Can\\'t remove link from non existing object', object, key, target);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        return false;\n      }\n\n      schema = object.schema.relationships[key];\n\n      if (schema === undefined) {\n        $log.error('Can\\'t remove link not present in schema:', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (oneWay === true) {\n        return __removeHasMany(object, key, target);\n      } else {\n        return __processRemove(object, key, target);\n      }\n    }\n\n    /////////////\n    // Private //\n    /////////////\n\n    function __processAddHasMany(object, key, target) {\n      var reflectionKey = object.schema.relationships[key].reflection;\n      var reflectionSchema;\n\n      if (reflectionKey === false) {\n        return __addHasMany(object, key, target);\n      }\n\n      reflectionSchema = target.schema.relationships[reflectionKey];\n\n      if (reflectionSchema.type === 'hasOne') {\n        __processAddHasOne(target, reflectionKey, object);\n      } else if (reflectionSchema.type === 'hasMany') {\n        __addHasMany(object, key, target);\n        __addHasMany(target, reflectionKey, object);\n      }\n    }\n\n    function __processAddHasOne(object, key, target) {\n      var reflectionKey = object.schema.relationships[key].reflection;\n      var reflectionSchema;\n      var reflection = object.relationships[key];\n\n      __addHasOne(object, key, target);\n\n      if (reflectionKey === false) {\n        return;\n      }\n\n      reflectionSchema = target.schema.relationships[reflectionKey];\n\n      if (reflectionSchema.type === 'hasOne') {\n        if (reflection !== undefined && reflection !== null) {\n          __removeHasOne(reflection, reflectionKey, object);\n        }\n\n        __addHasOne(target, reflectionKey, object);\n      } else if (reflectionSchema.type === 'hasMany') {\n        if (reflection !== undefined && reflection !== null) {\n          __removeHasMany(reflection, reflectionKey, object);\n        }\n\n        __addHasMany(target, reflectionKey, object);\n      }\n    }\n\n    function __processRemove(object, key, target) {\n      var schema = object.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var reflectionSchema;\n\n      if (schema.type === 'hasMany') {\n        __removeHasMany(object, key, target);\n      } else if (schema.type === 'hasOne') {\n        __removeHasOne(object, key, target);\n      }\n\n      if (reflectionKey === false) {\n        return;\n      }\n\n      reflectionSchema = target.schema.relationships[reflectionKey];\n\n      if (reflectionSchema.type === 'hasOne') {\n        __removeHasOne(target, reflectionKey, object);\n      } else if (reflectionSchema.type === 'hasMany') {\n        __removeHasMany(target, reflectionKey, object);\n      }\n    }\n\n    function __addHasOne(object, key, target) {\n      $log.debug('addHasOne', object, key, target);\n\n      object.relationships[key] = target;\n      object.data.relationships[key].data = toLinkData(target);\n\n      return true;\n    }\n\n    function __addHasMany(object, key, target) {\n      var linkData = toLinkData(target);\n      $log.debug('addHasMany', object, key, target);\n\n      if (angular.isArray(object.relationships[key]) && object.relationships[key].indexOf(target) > -1) {\n        return false;\n      }\n\n      object.relationships[key] = object.relationships[key] || [];\n      object.data.relationships[key].data = object.data.relationships[key].data || [];\n\n      object.relationships[key].push(target);\n      object.data.relationships[key].data.push(linkData);\n\n      return true;\n    }\n\n    function __removeHasOne(object, key, target) {\n      $log.debug('removeHasOne', object, key, target);\n\n      if (target !== undefined && object.relationships[key] !== target) {\n        return false;\n      }\n\n      object.relationships[key] = null;\n      object.data.relationships[key].data = undefined;\n\n      return true;\n    }\n\n    function __removeHasMany(object, key, target) {\n      $log.debug('removeHasMany', object, key, target);\n\n      if (object.relationships[key] === undefined) {\n        return;\n      }\n\n      if (target === undefined) {\n        object.relationships[key] = [];\n        object.data.relationships[key].data = [];\n        return true;\n      }\n\n      var index = object.relationships[key].indexOf(target);\n\n      if (index === -1) {\n        return false;\n      }\n\n      object.relationships[key].splice(index, 1);\n      object.data.relationships[key].data.splice(index, 1);\n\n      return true;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModelForm', AngularJsonAPIModelFormWrapper);\n\n  function AngularJsonAPIModelFormWrapper(\n    AngularJsonAPIModelValidatorService,\n    AngularJsonAPIModelLinkerService,\n    $q\n  ) {\n\n    AngularJsonAPIModelForm.prototype.save = save;\n    AngularJsonAPIModelForm.prototype.reset = reset;\n    AngularJsonAPIModelForm.prototype.validate = validate;\n    AngularJsonAPIModelForm.prototype.validateField = validateField;\n\n    AngularJsonAPIModelForm.prototype.link = link;\n    AngularJsonAPIModelForm.prototype.unlink = unlink;\n\n    AngularJsonAPIModelForm.prototype.toJson = toJson;\n\n    return AngularJsonAPIModelForm;\n\n    function AngularJsonAPIModelForm(parent) {\n      var _this = this;\n\n      _this.data = {\n        id: parent.data.id,\n        type: parent.data.type,\n        attributes: {},\n        relationships: {}\n      };\n\n      _this.relationships = {};\n      _this.parent = parent;\n      _this.schema = parent.schema;\n      _this.reset();\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Saves form, shortcut to parent.save()\n     * @return {promise} Promise associated with synchronization\n     */\n    function save() {\n      var _this = this;\n\n      return _this.parent.save();\n    }\n\n    /**\n     * Resets form to state of a parent\n     * @return {undefined}\n     */\n    function reset(auto) {\n      var _this = this;\n\n      if (auto === true && _this.parent.synchronized === true) {\n        return;\n      }\n\n      angular.forEach(_this.schema.attributes, function(validator, key) {\n        _this.data.attributes[key] = angular.copy(_this.parent.data.attributes[key]) || '';\n      });\n\n      angular.forEach(_this.schema.relationships, function(data, key) {\n        _this.data.relationships[key] = angular.copy(_this.parent.data.relationships[key]) || {};\n        if (angular.isArray(_this.relationships[key])) {\n          _this.relationships[key] = _this.parent.relationships[key].slice();\n        } else {\n          _this.relationships[key] = _this.parent.relationships[key];\n        }\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n    }\n\n    /**\n     * Validates form\n     * @return {promise} Promise rejected to errors object indexed by keys\n     */\n    function validate() {\n      var _this = this;\n      var deferred = $q.defer();\n\n      AngularJsonAPIModelValidatorService.validateForm(_this.data).then(deferred.resolve, reject);\n\n      function reject(erorrs) {\n        _this.errors.validation = erorrs;\n\n        deferred.reject(erorrs);\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {promise} Promise rejected to errors array\n     */\n    function validateField(key) {\n      var _this = this;\n      var deferred = $q.defer();\n\n      AngularJsonAPIModelValidatorService.validateForm(_this.data[key], key).then(deferred.resolve, reject);\n\n      function reject(erorrs) {\n        _this.errors.validation[key] = erorrs;\n\n        deferred.reject(erorrs);\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Adds link to a form without synchronization\n     * @param {string} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function link(key, target) {\n      var _this = this;\n\n      return $q.resolve(AngularJsonAPIModelLinkerService.link(_this, key, target, true));\n    }\n\n    /**\n     * Removes link from form without synchronization\n     * @param  {[type]} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function unlink(key, target) {\n      var _this = this;\n\n      return $q.resolve(AngularJsonAPIModelLinkerService.unlink(_this, key, target, true));\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIAbstractModel', AngularJsonAPIAbstractModelWrapper);\n\n  function AngularJsonAPIAbstractModelWrapper(\n    AngularJsonAPIModelForm,\n    AngularJsonAPIModelLinkerService,\n    uuid4,\n    $rootScope,\n    $injector,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIAbstractModel.prototype.refresh = refresh;\n    AngularJsonAPIAbstractModel.prototype.remove = remove;\n    AngularJsonAPIAbstractModel.prototype.reset = reset;\n    AngularJsonAPIAbstractModel.prototype.save = save;\n\n    AngularJsonAPIAbstractModel.prototype.update = update;\n\n    AngularJsonAPIAbstractModel.prototype.link = link;\n    AngularJsonAPIAbstractModel.prototype.unlink = unlink;\n    AngularJsonAPIAbstractModel.prototype.unlinkAll = unlinkAll;\n\n    AngularJsonAPIAbstractModel.prototype.toJson = toJson;\n\n    return AngularJsonAPIAbstractModel;\n\n    /**\n     * Constructor\n     * @param {json}  data      Validated data used to create an object\n     * @param {Boolean} saved   Is object new (for form)\n     */\n    function AngularJsonAPIAbstractModel(data, saved, synchronized) {\n      var _this = this;\n\n      data.relationships = data.relationships || {};\n\n      /**\n       * Is not a new record\n       * @type {Boolean}\n       */\n      _this.saved = saved === undefined ? true : saved;\n\n      /**\n       * Is present on the server\n       * @type {Boolean}\n       */\n      _this.stable = synchronized === undefined ? true : synchronized;\n\n      /**\n       * Has been synchronized with the server\n       * @type {Boolean}\n       */\n      _this.synchronized = synchronized === undefined ? true : synchronized;\n\n      _this.removed = false;\n      _this.loadingCount = 0;\n      _this.updatedAt = Date.now();\n\n      _this.data = {\n        relationships: {},\n        attributes: {}\n      };\n      _this.relationships = {};\n\n      angular.forEach(_this.schema.relationships, function(schema, name) {\n        _this.relationships[name] = undefined;\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n\n      _this.promises = {};\n\n      __setData(_this, data);\n\n      _this.form = new AngularJsonAPIModelForm(_this);\n    }\n\n    /**\n     * Saves model's form\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function save() {\n      var _this = this;\n      var deferred = $q.defer();\n      var config = {\n        action: _this.saved === false ? 'add' : 'update',\n        object: _this\n      };\n\n      _this.form.validate().then(\n        _this.synchronize(config).then(resolve, reject, notify),\n        deferred.reject\n      );\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'resolved', _this, response);\n        _this.update(_this.form.data);\n\n        _this.synchronized = true;\n        _this.saved = true;\n        _this.stable = true;\n\n        response.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response.errors);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'notify', _this, response);\n\n        deferred.notify(response.errors);\n      }\n    }\n\n    /**\n     * Reset object form\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      return _this.form.reset();\n    }\n\n    /**\n     * Synchronize object with remote\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function refresh() {\n      var $jsonapi = $injector.get('$jsonapi');\n      var deferred = $q.defer();\n      var _this = this;\n      var config = {\n        action: 'refresh',\n        object: _this,\n        params: _this.schema.params.get\n      };\n\n      if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t refresh new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'resolved', _this, response);\n        $jsonapi.proccesResults(response.data);\n        response.finish();\n\n        _this.synchronized = true;\n        _this.stable = true;\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Remove object\n     * @return {promise} Promise associated with synchronization that resolves to nothing\n     */\n    function remove() {\n      var _this = this;\n      var deferred = $q.defer();\n\n      var config = {\n        action: 'remove',\n        object: _this\n      };\n\n      _this.parentFactory.cache.remove(_this.data.id);\n\n      if (_this.saved === false) {\n        deferred.resolve();\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'resolved', _this, response);\n        _this.removed = true;\n        _this.unlinkAll();\n        _this.parentFactory.cache.clearRemoved(_this.data.id);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'rejected', _this, response);\n        _this.parentFactory.cache.revertRemove(_this.data.id);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Unlink all reflection relationships of the object **without synchronization**\n     * @return {boolean} Result\n     */\n    function unlinkAll(key) {\n      var _this = this;\n      var deferred = $q.defer();\n\n      if (key === undefined) {\n        angular.forEach(_this.relationships, removeLink);\n      } else {\n        removeLink(_this.relationships[key], key);\n      }\n\n      return deferred.promise;\n\n      function removeLink(linksObj, key) {\n        var schema = _this.schema.relationships[key];\n        var reflectionKey = schema.reflection;\n\n        if (angular.isArray(linksObj)) {\n          angular.forEach(linksObj, removeReflectionLink.bind(undefined, reflectionKey));\n        } else if (angular.isObject(linksObj)) {\n          removeReflectionLink(reflectionKey, linksObj);\n        }\n\n        if (schema.type === 'hasOne') {\n          _this.relationships[key] = null;\n        } else if (schema.type === 'hasMany') {\n          _this.relationships[key] = [];\n        }\n      }\n\n      function removeReflectionLink(reflectionKey, target) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolve, reject, notify);\n\n        function resolve(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function reject(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notify(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n    }\n\n    /**\n     * Links object to relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be linked\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function link(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var config = {\n        action: 'link',\n        object: _this,\n        schema: schema,\n        target: target,\n        key: key\n      };\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link undefined'}]});\n      } else if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.link(_this, key, target);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'linkReflection',\n          schema: reflectionSchema,\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Unlinks object from relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be unlinked if undefined unlinks all\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function unlink(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var config = {\n        action: 'unlink',\n        object: _this,\n        target: target,\n        schema: schema,\n        key: key\n      };\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink undefined'}]});\n      } else if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          schema: reflectionSchema,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Sets object state to data\n     * @param  {object} validatedData JsonAPI object with data\n     * @return {bool}               Result\n     */\n    function update(validatedData, auto, initialization) {\n      var _this = this;\n\n      if (__setData(_this, validatedData) === true) {\n        _this.reset(auto);\n        _this.synchronized = initialization === true ? false : true;\n        _this.stable = initialization === true ? false : true;\n        _this.updatedAt = Date.now();\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /////////////\n    // PRIVATE //\n    /////////////\n\n    /**\n     * Low level set data function, use only with validated data\n     * @param  {AngularJsonAPIModel} object        object to be modified\n     * @param  {object} validatedData Validated data\n     * @return {boolean}               Status\n     */\n    function __setData(object, validatedData) {\n\n      var $jsonapi = $injector.get('$jsonapi');\n      var schema = object.schema;\n\n      object.data.id = validatedData.id;\n      object.data.type = validatedData.type;\n\n      if (object.parentFactory.schema.type !== validatedData.type) {\n        $log.error('Different type then factory', object.parentFactory.schema.type, validatedData);\n        return false;\n      }\n\n      if (!uuid4.validate(object.data.id)) {\n        $log.error('Invalid id');\n        return false;\n      }\n\n      validatedData.attributes = validatedData.attributes || {};\n      validatedData.relationships = validatedData.relationships || {};\n\n      angular.forEach(schema.attributes, setAttributes);\n      angular.forEach(schema.relationships, setRelationships);\n\n      return true;\n\n      function setAttributes(validators, key) {\n        object.data.attributes[key] = validatedData.attributes[key];\n      }\n\n      function setRelationships(schema, key) {\n        var relationshipData = validatedData.relationships[key];\n\n        if (relationshipData === undefined) {\n          object.data.relationships[key] = {data: undefined};\n          return;\n        }\n\n        object.data.relationships[key] = object.data.relationships[key] || {};\n        object.data.relationships[key].links = relationshipData.links;\n\n        if (schema.type === 'hasOne') {\n          linkOne(object, key, relationshipData.data);\n        } else if (schema.type === 'hasMany') {\n          if (angular.isArray(relationshipData.data) && relationshipData.data.length === 0) {\n            object.data.relationships[key].data = [];\n            object.unlinkAll(key);\n          } else {\n            angular.forEach(\n              relationshipData.data,\n              linkOne.bind(undefined, object, key)\n            );\n          }\n        }\n      }\n\n      function linkOne(object, key, data) {\n        if (data === null) {\n          AngularJsonAPIModelLinkerService.link(object, key, null);\n          return;\n        }\n\n        if (data === undefined) {\n          return;\n        }\n\n        var factory = $jsonapi.getFactory(data.type);\n\n        if (factory === undefined) {\n          $log.error('Factory not found', data.type, data);\n          return;\n        }\n\n        var target = factory.cache.get(data.id);\n\n        AngularJsonAPIModelLinkerService.link(object, key, target);\n      }\n\n      // function unlinkOne(object, key) {\n      //   var target = object.relationships[key];\n      //   var reflectionKey;\n      //   var reflectionSchema;\n\n      //   if (target === undefined) {\n      //     return;\n      //   }\n\n      //   reflectionKey = schema.reflection;\n      //   reflectionSchema = target.schema.relationships[reflectionKey];\n\n      //   AngularJsonAPIModelLinkerService.unlink(object, key, target, schema);\n      // }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICache', AngularJsonAPICacheWrapper);\n\n  function AngularJsonAPICacheWrapper(\n    uuid4,\n    $log\n  ) {\n\n    AngularJsonAPICache.prototype.get = get;\n    AngularJsonAPICache.prototype.index = index;\n    AngularJsonAPICache.prototype.setIndexIds = setIndexIds;\n    AngularJsonAPICache.prototype.addOrUpdate = addOrUpdate;\n\n    AngularJsonAPICache.prototype.fromJson = fromJson;\n    AngularJsonAPICache.prototype.toJson = toJson;\n    AngularJsonAPICache.prototype.clear = clear;\n\n    AngularJsonAPICache.prototype.remove = remove;\n    AngularJsonAPICache.prototype.revertRemove = revertRemove;\n    AngularJsonAPICache.prototype.clearRemoved = clearRemoved;\n\n    return AngularJsonAPICache;\n\n    /**\n     * Constructor\n     */\n    function AngularJsonAPICache(factory) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.data = {};\n      _this.removed = {};\n      _this.size = 0;\n\n      _this.indexIds = [];\n    }\n\n    /**\n     * Add new model or update existing with data\n     * @param {object} validatedData Data that are used to update or create an object, has to be valid\n     * @return {AngularJsonAPIModel} Created model\n     */\n    function addOrUpdate(validatedData, synchronized, initialization) {\n      var _this = this;\n      var id = validatedData.id;\n\n      if (id === undefined) {\n        $log.error('Can\\'t add data without id!', validatedData);\n        return;\n      }\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model(validatedData, true, synchronized);\n        _this.size += 1;\n      } else {\n        _this.data[id].update(validatedData, true, initialization);\n      }\n\n      return _this.data[id];\n    }\n\n\n    /**\n     * Recreate object structure from json data\n     * @param  {json} json Json data\n     * @return {undefined}\n     */\n    function fromJson(json) {\n      var _this = this;\n      var collection = angular.fromJson(json);\n\n      if (angular.isObject(collection) && collection.data !== undefined) {\n        _this.updatedAt = collection.updatedAt;\n        _this.indexIds = collection.indexIds;\n\n        angular.forEach(collection.data, function(objectData) {\n          var data = objectData.data;\n          console.log('fromJson', data.id);\n          _this.addOrUpdate(data, false, true);\n        });\n      }\n    }\n\n    /**\n     * Encodes memory into json format\n     * @return {json} Json encoded memory\n     */\n    function toJson() {\n      var _this = this;\n      var json = {\n        data: {},\n        updatedAt: _this.updatedAt,\n        indexIds: _this.indexIds\n      };\n\n      angular.forEach(_this.data, function(object, key) {\n        json.data[key] = object.toJson();\n      });\n\n      return angular.toJson(json);\n    }\n\n    /**\n     * Clear memory\n     * @return {undefined}\n     */\n    function clear() {\n      var _this = this;\n\n      _this.data = {};\n      _this.removed = {};\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function get(id) {\n      var _this = this;\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model({id: id, type: _this.factory.Model.prototype.schema.type}, true, false);\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {objec} params\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function index(params) {\n      var _this = this;\n\n      $log.warn('Unused params', params);\n\n      return _this.indexIds.map(_this.get.bind(_this));\n    }\n\n    /**\n     * Cache ids of objects returned by index request\n     * @param {ids array or AngularJsonAPIModel array} array Objects or ids to be cached\n     */\n    function setIndexIds(array) {\n      var _this = this;\n\n      _this.indexIds = [];\n\n      angular.forEach(array, function(element) {\n        if (angular.isString(element) && uuid4.validate(element)) {\n          _this.indexIds.push(element);\n        } else if (angular.isObject(element) && uuid4.validate(element.data.id)) {\n          _this.indexIds.push(element.data.id);\n        }\n      });\n    }\n\n    /**\n     * Remove object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function remove(id) {\n      var _this = this;\n\n      if (_this.data[id] !== undefined) {\n        _this.removed[id] = _this.data[id];\n        delete _this.data[id];\n        _this.size -= 1;\n      }\n\n      return _this.removed[id];\n    }\n\n    /**\n     * Revert removal of an object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function revertRemove(id) {\n      var _this = this;\n\n      if (_this.removed[id] !== undefined) {\n        _this.data[id] = _this.removed[id];\n        delete _this.removed[id];\n        _this.size += 1;\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Clear removed object from memory\n     * @param  {uuid} id\n     * @return {undefined}\n     */\n    function clearRemoved(id) {\n      var _this = this;\n\n      delete _this.removed[id];\n    }\n  }\n})();\n","// from https://www.sitepen.com/blog/2012/10/19/lazy-property-access/\n(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('lazyProperty', function(target, propertyName, callback) {\n      var result;\n      var done;\n      Object.defineProperty(target, propertyName, {\n        get: function() { // Define the getter\n          if (!done) {\n            // We cache the result and only compute once.\n            done = true;\n            result = callback.call(target);\n          }\n\n          return result;\n        },\n\n        // Keep it enumerable and configurable, certainly not necessary.\n        enumerable: true,\n        configurable: true\n      });\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('toKebabCase', function(str) {\n      return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi').config(['$provide', function($provide) {\n    $provide.decorator('$q', ['$delegate', function($delegate) {\n      var $q = $delegate;\n\n      $q.allSettled = $q.allSettled || function allSettled(promises, resolvedCallback, rejectedCallback) {\n        // Implementation of allSettled function from Kris Kowal's Q:\n        // https://github.com/kriskowal/q/wiki/API-Reference#promiseallsettled\n        // by Michael Kropat from http://stackoverflow.com/a/27114615/1400432 slightly modified\n\n        var wrapped = angular.isArray(promises) ? [] : {};\n\n        angular.forEach(promises, function(promise, key) {\n          if (!wrapped.hasOwnProperty(key)) {\n            wrapped[key] = wrap(promise);\n          }\n        });\n\n        return $q.all(wrapped);\n\n        function wrap(promise) {\n          return $q.resolve(promise)\n            .then(function(value) {\n              if (angular.isFunction(resolvedCallback)) {\n                resolvedCallback(value);\n              }\n\n              return { success: true, value: value };\n            },\n\n            function(reason) {\n              if (angular.isFunction(rejectedCallback)) {\n                rejectedCallback(reason);\n              }\n\n              return { success: false, reason: reason };\n            });\n        }\n      };\n\n      return $q;\n    }]);\n  }]);\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerSimple', AngularJsonAPISynchronizerSimpleWrapper);\n\n  function AngularJsonAPISynchronizerSimpleWrapper(AngularJsonAPISynchronizerPrototype, $q, $log) {\n\n    AngularJsonAPISynchronizerSimple.prototype = Object.create(AngularJsonAPISynchronizerPrototype.prototype);\n    AngularJsonAPISynchronizerSimple.prototype.constructor = AngularJsonAPISynchronizerSimple;\n\n    AngularJsonAPISynchronizerSimple.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerSimple;\n\n    function AngularJsonAPISynchronizerSimple(synchronizations) {\n      var _this = this;\n\n      _this.state = {};\n\n      AngularJsonAPISynchronizerPrototype.call(_this, synchronizations);\n\n      angular.forEach(synchronizations, function(synchronization) {\n        synchronization.synchronizer = _this;\n      });\n    }\n\n    function synchronize(config) {\n      var _this = this;\n      var promises = [];\n      var deferred = $q.defer();\n      var action = config.action;\n\n      AngularJsonAPISynchronizerPrototype.prototype.synchronize.call(_this, config);\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beginHooks[action], function(hook) {\n          deferred.notify({step: 'begin', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beforeHooks[action], function(hook) {\n          deferred.notify({step: 'before', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.synchronizationHooks[action], function(hook) {\n          promises.push(hook.call(_this, config));\n        });\n      });\n\n      $q.allSettled(promises, resolvedCallback, rejectedCallback).then(resolved, rejected);\n\n      function resolvedCallback(value) {\n        deferred.notify({step: 'synchronization', data: value});\n      }\n\n      function rejectedCallback(reason) {\n        deferred.notify({step: 'synchronization', errors: reason});\n      }\n\n      function resolved(results) {\n        _this.state[action] = _this.state[action] || {};\n        _this.state[action].success = true;\n\n        angular.forEach(results, function(result) {\n          if (result.success === false) {\n            _this.state[action].success = false;\n          }\n        });\n\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.afterHooks[action], function(hook) {\n            deferred.notify({step: 'after', errors: hook.call(_this, config, results)});\n          });\n        });\n\n        var data;\n        var errors = [];\n\n        angular.forEach(results, function(result) {\n          if (result.success === true) {\n            data = result.value;\n          } else {\n            errors.push(result.reason);\n          }\n        });\n\n        if (errors.length > 0) {\n          deferred.reject({data: data, finish: finish, errors: errors});\n        } else {\n          deferred.resolve({data: data, finish: finish, errors: errors});\n        }\n      }\n\n      function finish() {\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.finishHooks[action], function(hook) {\n            deferred.notify({step: 'finish', errors: hook.call(_this, config)});\n          });\n        });\n      }\n\n      function rejected(errors) {\n        $log.error('All settled rejected! Something went wrong');\n\n        deferred.reject({finish: angular.noop, errors: errors});\n      }\n\n      return deferred.promise;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerPrototype', AngularJsonAPISynchronizerPrototypeWrapper);\n\n  function AngularJsonAPISynchronizerPrototypeWrapper($log) {\n\n    AngularJsonAPISynchronizerPrototype.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerPrototype;\n\n    function AngularJsonAPISynchronizerPrototype(synchronizations) {\n      var _this = this;\n\n      _this.synchronizations = synchronizations;\n    }\n\n    function synchronize(config) {\n      var _this = this;\n\n      $log.debug('Synchro Collection', _this.factory.Model.prototype.schema.type, config);\n\n      if (config.action === undefined) {\n        $log.error('Can\\'t synchronize undefined action', config);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-rest', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationRest', AngularJsonAPISynchronizationRestWrapper);\n\n  function AngularJsonAPISynchronizationRestWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    AngularJsonAPIModelLinkerService,\n    toKebabCase,\n    $q,\n    $http\n  ) {\n\n    AngularJsonAPISynchronizationRest.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationRest.prototype.constructor = AngularJsonAPISynchronizationRest;\n\n    return AngularJsonAPISynchronizationRest;\n\n    function AngularJsonAPISynchronizationRest(url) {\n      var _this = this;\n      var headers = { // jscs:disable disallowQuotedKeysInObjects\n        'Accept': 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json'\n      }; // jscs:enable disallowQuotedKeysInObjects\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('remove', remove);\n      _this.synchronization('unlink', unlink);\n      _this.synchronization('link', link);\n      _this.synchronization('update', update);\n      _this.synchronization('add', add);\n      _this.synchronization('all', all);\n      _this.synchronization('get', get);\n      _this.synchronization('refresh', get);\n\n      function all(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function get(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function remove(config) {\n        return $http({\n          method: 'DELETE',\n          headers: headers,\n          url: url + '/' + config.object.data.id\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function unlink(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target !== undefined && config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink object without id through rest call'}]});\n        } else if (config.schema.type === 'hasOne') {\n          $http({\n            method: 'DELETE',\n            headers: headers,\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        } else if (config.schema.type === 'hasMany') {\n          if (config.target === undefined) {\n            $http({\n              method: 'PUT',\n              headers: headers,\n              data: {data: []},\n              url: url + '/' + config.object.data.id + '/relationships/' + config.key\n            }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n          } else {\n            $http({\n              method: 'DELETE',\n              headers: headers,\n              url: url + '/' + config.object.data.id + '/relationships/' + config.key + '/' + config.target.data.id\n            }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n          }\n        }\n\n        return deferred.promise;\n      }\n\n      function link(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target === undefined || config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link object without id through rest call'}]});\n        } else if (config.schema.type === 'hasOne') {\n          $http({\n            method: 'PUT',\n            headers: headers,\n            data: {data: AngularJsonAPIModelLinkerService.toLinkData(config.target)},\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        } else if (config.schema.type === 'hasMany') {\n          $http({\n            method: 'POST',\n            headers: headers,\n            data: {data: [AngularJsonAPIModelLinkerService.toLinkData(config.target)]},\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        }\n\n        return deferred.promise;\n      }\n\n      function update(config) {\n        return $http({\n          method: 'PUT',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function add(config) {\n        return $http({\n          method: 'POST',\n          headers: headers,\n          url: url + '/',\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function resolveHttp(response) {\n        return $q.resolve(response.data);\n      }\n\n      function rejectHttp(response) {\n        var deferred = $q.defer();\n\n        if (response.status === 0) {\n          $http({\n            method: 'GET',\n            url: 'https://status.cloud.google.com/incidents.schema.json'\n          }).then(rejectServerOffline, rejectNoConnection);\n        } else {\n          deferred.reject({status: response.status, statusText: response.statusText});\n        }\n\n        return deferred.promise;\n\n        function rejectServerOffline() {\n          deferred.reject({status: response.status, statusText: 'Server is offline'});\n        }\n\n        function rejectNoConnection() {\n          deferred.reject({status: response.status, statusText: 'No internet connection'});\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizationPrototype', AngularJsonAPISynchronizationPrototypeWrapper);\n\n  function AngularJsonAPISynchronizationPrototypeWrapper() {\n    AngularJsonAPISynchronizationPrototype.prototype.before = beforeSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.after = afterSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.begin = begin;\n    AngularJsonAPISynchronizationPrototype.prototype.finish = finish;\n    AngularJsonAPISynchronizationPrototype.prototype.synchronization = synchronization;\n\n    return AngularJsonAPISynchronizationPrototype;\n\n    function AngularJsonAPISynchronizationPrototype() {\n      var _this = this;\n      var allHooks = [\n        'add',\n        'init',\n        'get',\n        'all',\n        'clear',\n        'remove',\n        'unlink',\n        'unlinkReflection',\n        'link',\n        'linkReflection',\n        'update',\n        'refresh'\n      ];\n\n      _this.state = {};\n\n      _this.beginHooks = {};\n      _this.beforeHooks = {};\n      _this.synchronizationHooks = {};\n      _this.afterHooks = {};\n      _this.finishHooks = {};\n\n      _this.options = {};\n\n      angular.forEach(allHooks, function(hookName) {\n        _this.beginHooks[hookName] = [];\n        _this.beforeHooks[hookName] = [];\n        _this.synchronizationHooks[hookName] = [];\n        _this.afterHooks[hookName] = [];\n        _this.finishHooks[hookName] = [];\n        _this.state[hookName] = {\n          loading: false,\n          success: true\n        };\n      });\n    }\n\n    function begin(action, callback) {\n      var _this = this;\n\n      _this.beginHooks[action].push(callback);\n    }\n\n    function finish(action, callback) {\n      var _this = this;\n\n      _this.finishHooks[action].push(callback);\n    }\n\n    function beforeSynchro(action, callback) {\n      var _this = this;\n\n      _this.beforeHooks[action].push(callback);\n    }\n\n    function afterSynchro(action, callback) {\n      var _this = this;\n\n      _this.afterHooks[action].push(callback);\n    }\n\n    function synchronization(action, callback) {\n      var _this = this;\n\n      _this.synchronizationHooks[action].push(callback);\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-local', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationLocal', AngularJsonAPISynchronizationLocalWrapper);\n\n  function AngularJsonAPISynchronizationLocalWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    $window,\n    $q\n  ) {\n\n    AngularJsonAPISynchronizationLocal.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationLocal.prototype.constructor = AngularJsonAPISynchronizationLocal;\n\n    return AngularJsonAPISynchronizationLocal;\n\n    function AngularJsonAPISynchronizationLocal(prefix) {\n      var _this = this;\n\n      prefix = prefix || 'AngularJsonAPI';\n\n      _this.__updateStorage = updateStorage;\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('init', init);\n\n      _this.begin('clear', clear);\n      _this.begin('remove', updateStorage);\n      _this.begin('refresh', updateStorage);\n      _this.begin('unlink', updateStorage);\n      _this.begin('unlinkReflection', updateStorage);\n      _this.begin('link', updateStorage);\n      _this.begin('linkReflection', updateStorage);\n      _this.begin('update', updateStorage);\n      _this.begin('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      _this.finish('init', updateStorage);\n      _this.finish('clear', updateStorage);\n      _this.finish('remove', updateStorage);\n      _this.finish('refresh', updateStorage);\n      _this.finish('unlink', updateStorage);\n      _this.finish('unlinkReflection', updateStorage);\n      _this.finish('link', updateStorage);\n      _this.finish('linkReflection', updateStorage);\n      _this.finish('update', updateStorage);\n      _this.finish('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      function init() {\n        var type = _this.synchronizer.factory.schema.type;\n        return $q.resolve($window.localStorage.getItem(prefix + '.' + type));\n      }\n\n      function clear() {\n        var type = _this.synchronizer.factory.schema.type;\n        $window.localStorage.removeItem(prefix + '.' + type);\n      }\n\n      function updateStorage() {\n        var type = _this.synchronizer.factory.schema.type;\n        var cache = _this.synchronizer.factory.cache;\n        $window.localStorage.setItem(prefix + '.' + type, cache.toJson());\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchema', AngularJsonAPISchemaWrapper);\n\n  function AngularJsonAPISchemaWrapper($log, pluralize, AngularJsonAPISchemaLink) {\n\n    return AngularJsonAPISchema;\n\n    function AngularJsonAPISchema(schema) {\n      var _this = this;\n      var include = schema.include || {};\n      schema.include = include;\n      include.get = schema.include.get || [];\n      include.all = schema.include.all || [];\n\n      _this.params = {\n        get: {},\n        all: {}\n      };\n\n      angular.forEach(schema.relationships, function(linkSchema, linkName) {\n        var linkSchemaObj = new AngularJsonAPISchemaLink(linkSchema, linkName, schema.type);\n        schema.relationships[linkName] = linkSchemaObj;\n        if (linkSchemaObj.included === true) {\n          include.get.push(linkName);\n          if (linkSchemaObj.type === 'hasOne') {\n            include.all.push(linkName);\n          }\n        }\n      });\n\n      angular.extend(_this, schema);\n\n      if (include.get.length > 0) {\n        _this.params.get.include = include.get.join(',');\n      }\n\n      if (include.all.length > 0) {\n        _this.params.all.include = include.all.join(',');\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchemaLink', AngularJsonAPILinkSchrapperLink);\n\n  function AngularJsonAPILinkSchrapperLink($log, pluralize) {\n\n    return AngularJsonAPISchemaLink;\n\n    function AngularJsonAPISchemaLink(linkSchema, linkName, type) {\n      var _this = this;\n\n      if (angular.isString(linkSchema)) {\n        _this.model = pluralize.plural(linkName);\n        _this.type = linkSchema;\n        _this.polymorphic = false;\n        _this.reflection = type;\n      } else {\n        if (linkSchema.type === undefined) {\n          $log.error('Schema of link without a type: ', linkSchema, linkName);\n        }\n\n        if (linkSchema.type !== 'hasMany' && linkSchema.type !== 'hasOne') {\n          $log.error('Schema of link with wrong type: ', linkSchema.type, 'available: hasOne, hasMany');\n        }\n\n        _this.model = linkSchema.model || pluralize.plural(linkName);\n        _this.type = linkSchema.type;\n        _this.polymorphic = linkSchema.polymorphic || false;\n\n        if (linkSchema.reflection === undefined) {\n          _this.reflection = _this.type === 'hasMany' ? pluralize.singular(type) : type;\n        } else {\n          _this.reflection = linkSchema.reflection;\n        }\n\n        _this.included = linkSchema.included || false;\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModel', AngularJsonAPIModel);\n\n  function AngularJsonAPIModel(AngularJsonAPIAbstractModel, AngularJsonAPISchema, $log) {\n\n    return {\n      model: modelFactory\n    };\n\n    function modelFactory(schemaObj, parentFactory) {\n      var Model = function(data, updatedAt, saved) {\n        var _this = this;\n\n        if (data.type !== _this.schema.type) {\n          $log.error('Data type other then declared in schema: ', data.type, ' instead of ', _this.schema.type);\n        }\n\n        AngularJsonAPIAbstractModel.call(_this, data, updatedAt, saved);\n\n        _this.form.parent = _this;\n      };\n\n      Model.prototype = Object.create(AngularJsonAPIAbstractModel.prototype);\n      Model.prototype.constructor = Model;\n\n      Model.prototype.schema = schemaObj;\n      Model.prototype.parentFactory = parentFactory;\n      Model.prototype.synchronize = parentFactory.synchronizer.synchronize.bind(parentFactory.synchronizer);\n\n      angular.forEach(schemaObj.functions, function(metaFunction, metaFunctionName) {\n        Model.prototype[metaFunctionName] = function() {\n          return metaFunction.apply(this, arguments);\n        };\n      });\n\n      return Model;\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIFactory', AngularJsonAPIFactoryWrapper);\n\n  function AngularJsonAPIFactoryWrapper(\n    AngularJsonAPIModel,\n    AngularJsonAPISchema,\n    AngularJsonAPICache,\n    AngularJsonAPICollection,\n    uuid4,\n    $rootScope,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIFactory.prototype.get = get;\n    AngularJsonAPIFactory.prototype.all = all;\n    AngularJsonAPIFactory.prototype.remove = remove;\n    AngularJsonAPIFactory.prototype.initialize = initialize;\n\n    AngularJsonAPIFactory.prototype.clear = clear;\n\n    return AngularJsonAPIFactory;\n\n    /**\n     * AngularJsonAPIFactory constructor\n     * @param {json} schema       Schema object\n     * @param {AngularJsonAPISynchronizer} synchronizer Synchronizer for the factory\n     */\n    function AngularJsonAPIFactory(schema, synchronizer) {\n      var _this = this;\n      var config = {\n        action: 'init'\n      };\n\n      _this.schema = new AngularJsonAPISchema(schema);\n      _this.cache = new AngularJsonAPICache(_this);\n\n      _this.synchronizer = synchronizer;\n      _this.synchronizer.factory = _this;\n\n      _this.Model = AngularJsonAPIModel.model(\n        _this.schema,\n        _this\n      );\n\n      _this.initialized = false;\n      _this.type = _this.schema.type;\n\n      synchronizer.factory = _this;\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'resolved', response);\n        _this.cache.fromJson(response.data);\n        _this.initialized = true;\n\n        response.finish();\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'rejected', response);\n        response.finish();\n        _this.initialized = true;\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'notify', response);\n      }\n    }\n\n    /**\n     * Get request\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id, synchronized\n     */\n    function get(id) {\n      var _this = this;\n\n      if (!uuid4.validate(id)) {\n        return $q.reject({errors: [{status: 0, statusText: 'Invalid id not uuid4'}]});\n      }\n\n      return _this.cache.get(id).refresh();\n    }\n\n    /**\n     * All request\n     * @param  {object} params Object associated with params (for filters/pagination etc.)\n     * @return {AngularJsonAPICollection} Collection of AngularJsonAPIModel, synchronized\n     */\n    function all(params) {\n      var _this = this;\n      params = params || {};\n\n      var collection = new AngularJsonAPICollection(\n        _this,\n        angular.extend(params, _this.schema.params.all)\n      );\n\n      collection.fetch();\n\n      return collection;\n    }\n\n    /**\n     * Remove request\n     * @param  {uuid} id\n     * @return {promise} Promise associated with the synchronization, in case of\n     * fail object is reverted to previous state\n     */\n    function remove(id) {\n      var _this = this;\n      var object = _this.cache.remove(id);\n\n      return object.remove();\n    }\n\n    /**\n     * Initialize new AngularJsonAPIModel\n     * @return {AngularJsonAPIModel} New model\n     */\n    function initialize(key, target) {\n      var _this = this;\n      var relationships = {};\n\n      if (key !== undefined && target !== undefined) {\n        var schema = _this.schema[key];\n\n        if (schema.type === 'hasOne') {\n          relationships[key] = {\n            data: target.data.id\n          };\n        } else if (schema.type === 'hasMany') {\n          $log.warn('Initialize with relationship disallowed for hasMany relationships');\n        }\n      }\n\n      var data = {\n        type: _this.type,\n        id: uuid4.generate(),\n        attributes: {},\n        relationships: relationships\n      };\n\n      var model = new _this.Model(data, false, false);\n\n      return model;\n    }\n\n    /**\n     * Clears localy saved data\n     * @return {promise} Promise associated with the synchronization resolves to nothing\n     */\n    function clear() {\n      var _this = this;\n      var deferred = $q.defer();\n      var config = {\n        action: 'clear'\n      };\n\n      _this.cache.clear();\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'resolved', response);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'resolved', response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'notify', response);\n\n        deferred.notify(response);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICollection', AngularJsonAPICollectionWrapper);\n\n  function AngularJsonAPICollectionWrapper(\n    $rootScope,\n    $injector,\n    $q\n  ) {\n\n    AngularJsonAPICollection.prototype.fetch = fetch;\n    AngularJsonAPICollection.prototype.refresh = fetch;\n    AngularJsonAPICollection.prototype.get = get;\n\n    return AngularJsonAPICollection;\n\n    /**\n     * Constructor\n     * @param {AngularJsonAPIFactory} factory Factory associated with the collection\n     * @param {object} params  Params associated with this factory (such as filters)\n     */\n    function AngularJsonAPICollection(factory, params) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.type = factory.schema.type;\n      _this.params = params;\n\n      _this.errors = {\n        synchronization: {\n          name: 'Synchronization',\n          description: 'Errors during synchronization',\n          errors: []\n        }\n      };\n\n      _this.error = false;\n\n      _this.data = _this.factory.cache.index(_this.params);\n      _this.synchronized = false;\n\n      $rootScope.$on('angularJsonAPI:' + _this.type + ':object:remove', remove);\n\n      function remove(event, status, object) {\n        var index;\n\n        if (status === 'resolved') {\n\n          index = _this.data.indexOf(object);\n          if (index > -1) {\n            _this.data.splice(index, 1);\n            _this.factory.cache.setIndexIds(_this.data);\n          }\n        }\n      }\n    }\n\n    /**\n     * Shortcut to this.factory.get\n     * @param  {uuid4} id Id of object]\n     * @return {AngularJsonAPIModel}          Model with id\n     */\n    function get(id) {\n      var _this = this;\n\n      return _this.factory.get(id);\n    }\n\n    /**\n     * Synchronizes collection with the server\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function fetch() {\n      var _this = this;\n      var deferred = $q.defer();\n      var $jsonapi = $injector.get('$jsonapi');\n      var config = {\n        action: 'all',\n        params: _this.params\n      };\n\n      _this.factory.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred.promise;\n\n      function resolve(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'resolved', _this, results);\n\n        _this.errors.synchronization.errors = [];\n        _this.data = $jsonapi.proccesResults(results.data);\n        _this.error = false;\n\n        _this.updatedAt = Date.now();\n        _this.synchronized = true;\n\n        _this.factory.cache.setIndexIds(_this.data);\n\n        results.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'rejected', _this, results);\n\n        _this.errors.synchronization.errors = results.errors;\n        _this.error = true;\n\n        results.finish();\n\n        deferred.reject(results);\n      }\n\n      function notify(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'notify', _this, results);\n\n        deferred.notify(results);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .provider('$jsonapi', jsonapiProvider);\n\n  function jsonapiProvider() {\n    var memory = {};\n    var names = [];\n    this.$get = jsonapiFactory;\n\n    function jsonapiFactory($log, AngularJsonAPIFactory) {\n      return {\n        form: form,\n        get: get,\n        remove: remove,\n        all: all,\n        addFactory: addFactory,\n        getFactory: getFactory,\n        clearAll: clearAll,\n        proccesResults: proccesResults,\n\n        allFactories: allFactories,\n        factoriesNames: factoriesNames\n      };\n\n      function allFactories() {\n        return memory;\n      }\n\n      function factoriesNames() {\n        return names;\n      }\n\n      function addFactory(schema, synchronization) {\n        var factory = new AngularJsonAPIFactory(schema, synchronization);\n\n        memory[schema.type] = factory;\n        names.push(schema.type);\n      }\n\n      function getFactory(type) {\n        return memory[type];\n      }\n\n      function form(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t add not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].saved.form;\n      }\n\n      function get(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].get(id);\n      }\n\n      function remove(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t remove not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].remove(id);\n      }\n\n      function all(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get all of not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].all();\n      }\n\n      function clearAll() {\n        angular.forEach(memory, function(factory) {\n          factory.clear();\n        });\n      }\n\n      function proccesResults(results) {\n        if (results === undefined) {\n          $log.error('Can\\'t proccess results:', results);\n        }\n\n        angular.forEach(results.included, function(data) {\n          getFactory(data.type).cache.addOrUpdate(data, true);\n        });\n\n        if (angular.isArray(results.data)) {\n          var objects = [];\n          angular.forEach(results.data, function(data) {\n            objects.push(getFactory(data.type).cache.addOrUpdate(data, true));\n          });\n\n          return objects;\n        } else {\n          return getFactory(results.data.type).cache.addOrUpdate(results.data, true);\n        }\n      }\n    }\n  }\n\n})();\n\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .config(function($logProvider) {\n    $logProvider.debugEnabled(false);\n  });\n})();\n"],"sourceRoot":"/source/"}