{"version":3,"sources":["/source/jsonapi.module.js","/source/model/model-validator/model-validator.js","/source/model/model-linker/model-linker.js","angular-jsonapi.min.js","/source/model/model-form/model-form.js","/source/model/abstract-model/abstract-model.js","/source/factory/factory-cache/factory-cache.factory.js","/source/utils/lazy-property.js","/source/utils/kebab-case.js","/source/utils/all-settled.js","/source/synchronizers/synchronizer-simple.js","/source/synchronizers/synchronizer-prototype.js","/source/synchronizations/synchronization-rest.js","/source/synchronizations/synchronization-prototype.js","/source/synchronizations/synchronization-local.js","/source/schema/schema.js","/source/model/model.js","/source/factory/factory.js","/source/collection/collection.js","/source/jsonapi.provider.js"],"names":["angular","module","constant","pluralize","AngularJsonAPIModelValidatorService","validateForm","schema","data","validateField","key","_this","this","service","AngularJsonAPIModelLinkerService","$log","toLinkData","object","type","id","link","target","undefined","error","polymorphic","model","__addHasMany","__addHasOne","unlink","__removeHasMany","__removeHasOne","log","relationships","warn","indexOf","push","index","splice","$inject","AngularJsonAPIModelFormWrapper","AngularJsonAPIModelForm","parent","attributes","reset","toJson","copy","forEach","value","save","errors","validation","validate","prototype","factory","AngularJsonAPIAbstractModelWrapper","uuid4","$injector","$q","AngularJsonAPIAbstractModel","isNew","form","removed","loadingCount","promises","__setData","resolved","finish","rejected","deferred","defer","hasErrors","config","action","hasOwnProperty","reject","promise","synchronize","then","refresh","update","params","get","remove","parentFactory","unlinkAll","resolve","reflectionKey","reflectionSchema","reflection","all","validatedData","initialize","setAttributes","validators","setRelationships","linkOne","bind","$jsonapi","getModel","AngularJsonAPICacheWrapper","AngularJsonAPICache","size","addOrUpdate","Model","__update","fromJson","json","collection","updatedAt","objectData","clear","revertRemove","clearRemoved","propertyName","callback","result","done","Object","defineProperty","call","enumerable","configurable","str","replace","toLowerCase","$provide","decorator","$delegate","allSettled","resolvedCallback","rejectedCallback","wrap","when","isFunction","success","reason","wrapped","isArray","AngularJsonAPISynchronizerSimpleWrapper","AngularJsonAPISynchronizerPrototype","AngularJsonAPISynchronizerSimple","synchronizations","synchronization","synchronizer","notify","results","state","afterHooks","hook","finishHooks","beginHooks","beforeHooks","synchronizationHooks","create","constructor","AngularJsonAPISynchronizerPrototypeWrapper","debug","AngularJsonAPISynchronizationRestWrapper","AngularJsonAPISynchronizationPrototype","toKebabCase","$http","AngularJsonAPISynchronizationRest","url","method","headers","add","Accept","Content-Type","AngularJsonAPISynchronizationPrototypeWrapper","allHooks","options","hookName","loading","begin","beforeSynchro","afterSynchro","before","after","AngularJsonAPISynchronizationLocalWrapper","$window","AngularJsonAPISynchronizationLocal","prefix","init","localStorage","getItem","removeItem","updateStorage","setItem","cache","__updateStorage","AngularJsonAPISchemaWrapper","AngularJsonAPISchema","include","linkSchema","linkName","linkSchemaObj","AngularJsonAPILinkSchema","included","extend","length","join","isString","plural","AngularJsonAPIModel","modelFactory","schemaObj","functions","metaFunction","metaFunctionName","apply","arguments","AngularJsonAPIFactoryWrapper","AngularJsonAPICollection","AngularJsonAPIFactory","__get","fetch","generate","AngularJsonAPICollectionWrapper","step","__synchronize","jsonapiProvider","jsonapiFactory","addModel","memory","clearAll","$get","provider"],"mappings":"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","file":"angular-jsonapi.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi', ['uuid4'])\n  /* global pluralize: false */\n  .constant('pluralize', pluralize);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelValidatorService', AngularJsonAPIModelValidatorService);\n\n  function AngularJsonAPIModelValidatorService() {\n    var _this = this;\n    _this.validateForm = validateForm;\n    _this.validateField = validateField;\n\n    return this;\n\n    /**\n     * Validates form\n     * @param  {object} data Form data\n     * @return {object} Errors object indexed by keys\n     */\n    function validateForm(schema, data) {\n      var _this = this;\n\n      return {};\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(schema, key) {\n      var _this = this;\n\n      return [];\n    }\n\n    // function __validate(validator, attributeValue, attributeName) {\n    //   var errors = [];\n    //   if (angular.isArray(validator)) {\n    //     angular.forEach(validator, function(element) {\n    //       errors = errors.concat(__validate(element, attributeValue, attributeName));\n    //     });\n    //   } else if (angular.isFunction(validator)) {\n    //     var err = validator(attributeValue);\n    //     if (angular.isArray(err)) {\n    //       errors.concat(err);\n    //     } else {\n    //       $log.error(\n    //         'Wrong validator type it should return array of errors instead of: ' +\n    //           err.toString()\n    //       );\n    //     }\n    //   } else if (angular.isString(validator)) {\n    //     if (validator === 'text' || validator === 'string') {\n    //       if (!angular.isString(attributeValue)) {\n    //         errors.push(attributeName + ' is not a string ');\n    //       }\n    //     } else if (validator === 'number' || validator === 'integer') {\n    //       if (parseInt(attributeValue).toString() !== attributeValue.toString()) {\n    //         errors.push(attributeName + ' is not a number');\n    //       }\n    //     } else if (validator === 'uuid4') {\n    //       if (!uuid4.validate(attributeValue)) {\n    //         errors.push(attributeName + ' is not a uuid4');\n    //       }\n    //     } else if (validator === 'required') {\n    //       if (attributeValue.toString().length === 0) {\n    //         errors.push(attributeName + ' is empty');\n    //       }\n    //     } else {\n    //       $log.error('Wrong validator type: ' + validator.toString());\n    //     }\n    //   } else if (angular.isObject(validator)) {\n    //     if (validator.maxlength !== undefined && attributeValue.length > validator.maxlength) {\n    //       errors.push(attributeName + ' is too long max ' + validator.maxlength);\n    //     }\n\n    //     if (validator.minlength !== undefined && attributeValue.length < validator.minlength) {\n    //       errors.push(attributeName + ' is too short min ' + validator.minlength);\n    //     }\n\n    //     if (validator.maxvalue !== undefined && parseInt(attributeValue) > validator.maxvalue) {\n    //       errors.push(attributeName + ' is too big max ' + validator.maxvalue);\n    //     }\n\n    //     if (validator.minvalue !== undefined && parseInt(attributeValue) < validator.minvalue) {\n    //       errors.push(attributeName + ' is too small min ' + validator.minvalue);\n    //     }\n    //   } else {\n    //     $log.error('Wrong validator type: ' + validator.toString());\n    //   }\n\n    //   return errors;\n    // }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelLinkerService', AngularJsonAPIModelLinkerService);\n\n  function AngularJsonAPIModelLinkerService($log) {\n    var _this = this;\n\n    _this.toLinkData = toLinkData;\n\n    _this.link = link;\n    _this.unlink = unlink;\n\n    return this;\n\n    /**\n     * Extracts data needed for relationship linking from object\n     * @param  {AngularJsonAPIModel} object Object\n     * @return {json}        Link data\n     */\n    function toLinkData(object) {\n      return {type: object.data.type, id: object.data.id};\n    }\n\n    /**\n     * Add target to object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be linked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function link(object, key, target, schema) {\n      if (target === undefined) {\n        $log.error('Can\\'t link non existing object', object, key, target, schema);\n        return false;\n      }\n\n      if (object === undefined) {\n        $log.error('Can\\'t add link to non existing object', object, key, target, schema);\n        return false;\n      }\n\n      if (schema === undefined) {\n        $log.error('Can\\'t add link not present in schema: ', object, key, target, schema);\n        return false;\n      }\n\n      if (schema.polymorphic === false && schema.model !== target.data.type) {\n        $log.error('This relation is not polymorphic, expected: ' + schema.model + ' instead of ' + target.data.type);\n        return false;\n      }\n\n      if (schema.type === 'hasMany') {\n        return __addHasMany(_this, key, object, schema);\n      } else if (schema.type === 'hasOne') {\n        return __addHasOne(_this, key, object, schema);\n      }\n    }\n\n    /**\n     * Remove target from object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be unlinked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function unlink(object, key, target, schema) {\n      if (schema === undefined) {\n        $log.error('Can\\'t remove link not present in schema: ' + key);\n        return;\n      }\n\n      if (schema.type === 'hasMany') {\n        return __removeHasMany(_this, key, object, schema);\n      } else if (schema.type === 'hasOne') {\n        return __removeHasOne(_this, key, object, schema);\n      }\n    }\n\n    /////////////\n    // Private //\n    /////////////\n\n    function __addHasOne(object, key, target, schema) {\n      $log.log('addHasOne', object, key, target, schema);\n\n      if (object.relationships[key] === target) {\n        $log.warn(object, 'is already linked to', target);\n        return false;\n      } else {\n        object.relationships[key] = target;\n        object.data.relationships[key].data = toLinkData(target);\n      }\n\n      return true;\n    }\n\n    function __addHasMany(object, key, target, schema) {\n      $log.log('addHasMany', object, key, target, schema);\n\n      if (object.relationships[key].indexOf(target) > -1) {\n        $log.warn(object, 'is already linked to', target);\n        return false;\n      } else {\n        object.relationships[key].push(target);\n        object.data.relationships[key].data.push(toLinkData(target));\n      }\n\n      return true;\n    }\n\n    function __removeHasOne(object, key, target, schema) {\n      $log.log('removeHasOne', object, key, target, schema);\n\n      if (target !== undefined && object.relationships[key] !== target) {\n        $log.warn(object, 'is not linked to', target);\n        return false;\n      } else {\n        object.relationships[key] = null;\n        object.data.relationships[key].data = undefined;\n      }\n\n      return true;\n    }\n\n    function __removeHasMany(object, key, target, schema) {\n      $log.log('removeHasMany', object, key, target, schema);\n\n      if (target === undefined) {\n        object.relationships[key] = [];\n        object.data.relationships[key].data = [];\n      } else {\n        var index = object.relationships[key].indexOf(target);\n\n        if (index === -1) {\n          $log.warn(object, 'is not linked to', target);\n          return false;\n        } else {\n          object.relationships[key].splice(index, 1);\n          object.data.relationships[key].data.splice(index, 1);\n        }\n      }\n\n      return true;\n    }\n\n  }\n})();\n",null,"(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModelForm', AngularJsonAPIModelFormWrapper);\n\n  function AngularJsonAPIModelFormWrapper(\n    AngularJsonAPIModelValidatorService,\n    AngularJsonAPIModelLinkerService\n  ) {\n\n    AngularJsonAPIModelForm.prototype.save = save;\n    AngularJsonAPIModelForm.prototype.reset = reset;\n    AngularJsonAPIModelForm.prototype.validate = validate;\n    AngularJsonAPIModelForm.prototype.validateField = validateField;\n\n    AngularJsonAPIModelForm.prototype.link = link;\n    AngularJsonAPIModelForm.prototype.unlink = unlink;\n\n    AngularJsonAPIModelForm.prototype.toJson = toJson;\n\n    return AngularJsonAPIModelForm;\n\n    function AngularJsonAPIModelForm(parent) {\n      var _this = this;\n\n      _this.data = {\n        attributes: {},\n        relationships: {}\n      };\n\n      _this.relationships = {};\n      _this.parent = parent;\n      _this.schema = parent.schema;\n      _this.reset();\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Saves form, shortcut to parent.save()\n     * @return {promise} Promise associated with synchronization\n     */\n    function save() {\n      var _this = this;\n\n      return _this.parent.save();\n    }\n\n    /**\n     * Resets form to state of a parent\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      angular.forEach(_this.schema.attributes, function(data, key) {\n        _this.data.attributes[key] = _this.parent.data.attributes[key] || '';\n      });\n\n      angular.forEach(_this.schema.relationships, function(data, key) {\n        _this.data.relationships[key] = _this.parent.data.relationships[key] || {};\n        _this.relationships[key] = _this.parent.relationships[key];\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n    }\n\n    /**\n     * Validates form\n     * @return {objec} Errors object indexed by keys\n     */\n    function validate() {\n      var _this = this;\n      var errors;\n\n      errors = AngularJsonAPIModelValidatorService.validateForm(_this.data);\n\n      _this.errors.validation = errors;\n\n      return errors;\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(key) {\n      var _this = this;\n      var errors;\n      errors = AngularJsonAPIModelValidatorService.validateField(\n        _this.data[key],\n        key\n      );\n\n      _this.errors.validation[key] = errors;\n\n      return errors;\n    }\n\n    /**\n     * Adds link to a form without synchronization\n     * @param {string} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function link(key, target) {\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n\n      return AngularJsonAPIModelLinkerService.link(_this, key, target, schema);\n    }\n\n    /**\n     * Removes link from form without synchronization\n     * @param  {[type]} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function unlink(key, target) {\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n\n      return AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIAbstractModel', AngularJsonAPIAbstractModelWrapper);\n\n  function AngularJsonAPIAbstractModelWrapper(\n    AngularJsonAPIModelForm,\n    AngularJsonAPIModelLinkerService,\n    uuid4,\n    $injector,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIAbstractModel.prototype.refresh = refresh;\n    AngularJsonAPIAbstractModel.prototype.remove = remove;\n    AngularJsonAPIAbstractModel.prototype.reset = reset;\n    AngularJsonAPIAbstractModel.prototype.save = save;\n\n    AngularJsonAPIAbstractModel.prototype.link = link;\n    AngularJsonAPIAbstractModel.prototype.unlink = unlink;\n\n    AngularJsonAPIAbstractModel.prototype.unlinkAll = unlinkAll;\n\n    AngularJsonAPIAbstractModel.prototype.toJson = toJson;\n\n    return AngularJsonAPIAbstractModel;\n\n    /**\n     * Constructor\n     * @param {json}  data      Validated data used to create an object\n     * @param {Boolean} isNew   Is object new (for form)\n     */\n    function AngularJsonAPIAbstractModel(data, isNew) {\n      var _this = this;\n\n      data.relationships = data.relationships || {};\n\n      _this.isNew = isNew || false;\n      _this.form = new AngularJsonAPIModelForm(_this);\n      _this.removed = false;\n      _this.loadingCount = 0;\n\n      _this.data = {\n        relationships: {},\n        attributes: {}\n      };\n      _this.relationships = {};\n\n      _this.errors = {\n        validation: {}\n      };\n\n      _this.promises = {};\n\n      __setData(_this, data, true);\n    }\n\n    /**\n     * Saves model's form\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function save() {\n      var _this = this;\n      var deferred = $q.defer();\n      var hasErrors = false;\n      var config = {\n        action: 'update',\n        object: _this\n      };\n\n      if (_this.isNew === true) {\n        config.action = 'add';\n      }\n\n      var errors = _this.form.validate();\n\n      for (var error in errors) {\n        if (errors.hasOwnProperty(error)) {\n          hasErrors = true;\n        }\n      }\n\n      if (hasErrors === true) {\n        deferred.reject(errors);\n        return deferred.promise;\n      } else {\n        _this.synchronize(config).then(resolved, rejected);\n      }\n\n      return deferred.promise;\n\n      function resolved(data, finish) {\n        __setData(_this, _this.form.data);\n        finish();\n\n        return _this;\n      }\n\n      function rejected(errors, finish) {\n        finish();\n\n        return errors;\n      }\n    }\n\n    /**\n     * Reset object form\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      return _this.form.reset();\n    }\n\n    /**\n     * Synchronize object with remote\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function refresh() {\n      var deferred = $q.defer();\n      var _this = this;\n      var config = {\n        action: 'refresh',\n        object: _this,\n        params: _this.schema.params.get\n      };\n\n      if (_this.isNew === true) {\n        $log.error('Can\\'t refresh new object');\n        deferred.reject('Can\\'t refresh new object');\n      } else {\n        _this.synchronize(config).then(resolved, rejected);\n      }\n\n      function resolved(data, finish) {\n        _this.update(data);\n        finish();\n\n        return _this;\n      }\n\n      function rejected(errors, finish) {\n        finish();\n\n        return errors;\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Remove object\n     * @return {promise} Promise associated with synchronization that resolves to nothing\n     */\n    function remove() {\n      var _this = this;\n\n      return _this.parentFactory.remove(_this.data.id);\n    }\n\n    /**\n     * Unlink all relationships of the object **without synchronization**\n     * @return {boolean} result\n     */\n    function unlinkAll() {\n      var _this = this;\n\n      angular.forEach(_this.relationships, function(link, key) {\n        AngularJsonAPIModelLinkerService.unlink(_this, key, undefined, _this.schema.relationships[key]);\n      });\n    }\n\n    /**\n     * Links object to relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be linked\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function link(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var reflectionSchema = target.schema.relationships[reflectionKey];\n      var promise;\n\n      if (!AngularJsonAPIModelLinkerService.link(_this, key, target, schema) ||\n          !AngularJsonAPIModelLinkerService.link(target, reflectionKey, _this, reflectionSchema)) {\n\n        deferred.reject();\n        return deferred.promise;\n      }\n\n      promise = $q.all(_this.synchronize({\n        action: 'link',\n        object: _this,\n        target: target,\n        key: key\n      }),\n\n      _this.synchronize({\n        action: 'linkReflection',\n        object: _this,\n        target: target,\n        key: key\n      }));\n\n      promise.then(resolved, rejected);\n\n      function resolved(data, finish) {\n        deferred.resolve(_this);\n\n        finish();\n        return data;\n      }\n\n      function rejected(errors, finish) {\n        AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        deferred.reject(errors);\n        finish();\n        return errors;\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Unlinks object from relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be unlinked\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function unlink(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var reflectionSchema = target.schema.relationships[reflectionKey];\n      var promise;\n\n      if (!AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema) ||\n          !AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema)) {\n\n        deferred.reject();\n        return deferred.promise;\n      }\n\n      promise = $q.all(_this.synchronize({\n        action: 'unlink',\n        object: _this,\n        target: target,\n        key: key\n      }),\n\n      _this.synchronize({\n        action: 'unlinkReflection',\n        object: _this,\n        target: target,\n        key: key\n      }));\n\n      promise.then(resolved, rejected);\n\n      function resolved(data, finish) {\n        deferred.resolve(_this);\n\n        finish();\n        return data;\n      }\n\n      function rejected(errors, finish) {\n        AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        deferred.reject(errors);\n        finish();\n        return errors;\n      }\n\n      return deferred.promise;\n    }\n\n    /////////////\n    // PRIVATE //\n    /////////////\n\n    /**\n     * Low level set data function, use only with validated data\n     * @param  {AngularJsonAPIModel} object        object to be modified\n     * @param  {object} validatedData Validated data\n     * @return {boolean}               Status\n     */\n    function __setData(object, validatedData, initialize) {\n      var $jsonapi = $injector.get('$jsonapi');\n      var schema = object.schema;\n\n      object.id = validatedData.id;\n      object.type = validatedData.type;\n\n      if (object.parentFactory.schema.type !== validatedData.type) {\n        $log.error('Different type then factory');\n        return false;\n      }\n\n      if (!uuid4.validate(object.id)) {\n        $log.error('Invalid id');\n        return false;\n      }\n\n      validatedData.attributes = validatedData.attributes || {};\n      validatedData.relationships = validatedData.relationships || {};\n\n      angular.forEach(schema.attributes, setAttributes);\n      angular.forEach(schema.relationships, setRelationships);\n\n      function setAttributes(validators, key) {\n        object.data.attributes[key] = validatedData.attributes[key];\n      }\n\n      function setRelationships(schema, key) {\n        if (validatedData.relationships[key] === undefined) {\n          if (schema.type === 'hasOne') {\n            object.data.relationships[key] = {data: undefined};\n          } else if (schema.type === 'hasMany') {\n            object.data.relationships[key] = {data: []};\n          }\n        } else {\n          object.data.relationships[key] = validatedData.relationships[key];\n          if (schema.type === 'hasOne') {\n            linkOne(object, key, schema, object.data.relationships[key].data);\n          } else if (schema.type === 'hasMany') {\n            angular.forEach(\n              object.data.relationships[key].data,\n              linkOne.bind(undefined, object, key, schema)\n            );\n          }\n        }\n      }\n\n      function linkOne(object, key, schema, data) {\n        var factory = $jsonapi.getModel(data.type);\n        var target = factory.get(data.id);\n        var reflectionKey = schema.reflection;\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n\n        AngularJsonAPIModelLinkerService.link(object, key, target, schema);\n\n        if (initialize !== true) {\n          AngularJsonAPIModelLinkerService.link(object, reflectionKey, target, reflectionSchema);\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICache', AngularJsonAPICacheWrapper);\n\n  function AngularJsonAPICacheWrapper(\n    $log\n  ) {\n\n    AngularJsonAPICache.prototype.get = get;\n    AngularJsonAPICache.prototype.addOrUpdate = addOrUpdate;\n\n    AngularJsonAPICache.prototype.fromJson = fromJson;\n    AngularJsonAPICache.prototype.toJson = toJson;\n    AngularJsonAPICache.prototype.clear = clear;\n\n    AngularJsonAPICache.prototype.remove = remove;\n    AngularJsonAPICache.prototype.revertRemove = revertRemove;\n    AngularJsonAPICache.prototype.clearRemoved = clearRemoved;\n\n    return AngularJsonAPICache;\n\n    /**\n     * Constructor\n     */\n    function AngularJsonAPICache(factory) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.data = {};\n      _this.removed = {};\n      _this.size = 0;\n    }\n\n    /**\n     * Add new model or update existing with data\n     * @param {object} validatedData Data that are used to update or create an object, has to be valid\n     * @return {AngularJsonAPIModel} Created model\n     */\n    function addOrUpdate(validatedData) {\n      var _this = this;\n      var id = validatedData.id;\n\n      if (id === undefined) {\n        $log.error('Can\\'t add data without id!', validatedData);\n        return;\n      }\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model(validatedData);\n        _this.size += 1;\n      } else {\n        _this.data[id].__update(validatedData);\n      }\n\n      return _this.data[id];\n    }\n\n\n    /**\n     * Recreate object structure from json data\n     * @param  {json} json Json data\n     * @return {undefined}\n     */\n    function fromJson(json) {\n      var _this = this;\n      var collection = angular.fromJson(json);\n\n      if (collection !== null && collection.data !== undefined) {\n        _this.updatedAt = collection.updatedAt;\n\n        angular.forEach(collection.data, function(objectData) {\n          var data = objectData.data;\n          _this.addOrUpdate(data, objectData.updatedAt);\n        });\n      }\n    }\n\n    /**\n     * Encodes memory into json format\n     * @return {json} Json encoded memory\n     */\n    function toJson() {\n      var _this = this;\n      var json = {\n        data: {},\n        updatedAt: _this.updatedAt\n      };\n\n      angular.forEach(_this.data, function(object, key) {\n        json.data[key] = object.toJson();\n      });\n\n      return angular.toJson(json);\n    }\n\n    /**\n     * Clear memory\n     * @return {undefined}\n     */\n    function clear() {\n      var _this = this;\n\n      _this.data = {};\n      _this.removed = {};\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function get(id) {\n      var _this = this;\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model({id: id, type: _this.Model.prototype.schema.type});\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Remove object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function remove(id) {\n      var _this = this;\n\n      if (_this.data[id] !== undefined) {\n        _this.removed[id] = _this.data[id];\n        delete _this.data[id];\n        _this.size -= 1;\n      }\n\n      return _this.removed[id];\n    }\n\n    /**\n     * Revert removal of an object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function revertRemove(id) {\n      var _this = this;\n\n      if (_this.removed[id] !== undefined) {\n        _this.data[id] = _this.removed[id];\n        delete _this.removed[id];\n        _this.size += 1;\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Clear removed object from memory\n     * @param  {uuid} id\n     * @return {undefined}\n     */\n    function clearRemoved(id) {\n      var _this = this;\n\n      delete _this.removed[id];\n    }\n  }\n})();\n","// from https://www.sitepen.com/blog/2012/10/19/lazy-property-access/\n(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('lazyProperty', function(target, propertyName, callback) {\n      var result;\n      var done;\n      Object.defineProperty(target, propertyName, {\n        get: function() { // Define the getter\n          if (!done) {\n            // We cache the result and only compute once.\n            done = true;\n            result = callback.call(target);\n          }\n\n          return result;\n        },\n\n        // Keep it enumerable and configurable, certainly not necessary.\n        enumerable: true,\n        configurable: true\n      });\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('toKebabCase', function(str) {\n      return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi').config(['$provide', function($provide) {\n    $provide.decorator('$q', ['$delegate', function($delegate) {\n      var $q = $delegate;\n\n      $q.allSettled = $q.allSettled || function allSettled(promises, resolvedCallback, rejectedCallback) {\n        // Implementation of allSettled function from Kris Kowal's Q:\n        // https://github.com/kriskowal/q/wiki/API-Reference#promiseallsettled\n        // by Michael Kropat from http://stackoverflow.com/a/27114615/1400432 slightly modified\n\n        var wrapped = angular.isArray(promises) ? [] : {};\n\n        angular.forEach(promises, function(promise, key) {\n          if (!wrapped.hasOwnProperty(key)) {\n            wrapped[key] = wrap(promise);\n          }\n        });\n\n        return $q.all(wrapped);\n\n        function wrap(promise) {\n          return $q.when(promise)\n            .then(function(value) {\n              if (angular.isFunction(resolvedCallback)) {\n                resolvedCallback(value);\n              }\n\n              return { success: true, value: value };\n            },\n\n            function(reason) {\n              if (angular.isFunction(rejectedCallback)) {\n                rejectedCallback(reason);\n              }\n\n              return { success: false, reason: reason };\n            });\n        }\n      };\n\n      return $q;\n    }]);\n  }]);\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-local', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizerSimple', AngularJsonAPISynchronizerSimpleWrapper);\n\n  function AngularJsonAPISynchronizerSimpleWrapper(AngularJsonAPISynchronizerPrototype, $q, $log) {\n\n    AngularJsonAPISynchronizerSimple.prototype = Object.create(AngularJsonAPISynchronizerPrototype.prototype);\n    AngularJsonAPISynchronizerSimple.prototype.constructor = AngularJsonAPISynchronizerSimple;\n\n    AngularJsonAPISynchronizerSimple.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerSimple;\n\n    function AngularJsonAPISynchronizerSimple(synchronizations) {\n      var _this = this;\n\n      AngularJsonAPISynchronizerPrototype.call(_this, synchronizations);\n\n      angular.forEach(synchronizations, function(synchronization) {\n        synchronization.synchronizer = _this;\n      });\n    }\n\n    function synchronize(config) {\n      var _this = this;\n      var promises = [];\n      var deferred = $q.defer();\n      var action = config.action;\n\n      AngularJsonAPISynchronizerPrototype.synchronize.call(_this, config);\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beginHooks[action], function(hook) {\n          deferred.notify('begin', hook.call(_this, config));\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beforeHooks[action], function(hook) {\n          deferred.notify('before', hook.call(_this, config));\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.synchronizationHooks[action], function(hook) {\n          promises.push(hook.call(_this, config));\n        });\n      });\n\n      $q.allSettled(promises, resolvedCallback, rejectedCallback).then(resolved, rejected);\n\n      function resolvedCallback(value) {\n        deferred.notify('synchronization', value);\n      }\n\n      function rejectedCallback(reason) {\n        deferred.notify('synchronization', reason);\n      }\n\n      function resolved(results) {\n        _this.state[action].success = true;\n\n        angular.forEach(results, function(result) {\n          if (result.success === false) {\n            _this.state[action].success = false;\n          }\n        });\n\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.afterHooks[action], function(hook) {\n            deferred.notify('after', hook.call(_this, config, results));\n          });\n        });\n\n        var data;\n        var errors = [];\n\n        angular.forEach(results, function(result) {\n          if (result.success === true) {\n            data = result.value;\n          } else {\n            errors.push(result.reason);\n          }\n        });\n\n        if (data === undefined) {\n          deferred.reject(data, finish, errors);\n        } else {\n          deferred.resolve(errors, finish);\n        }\n      }\n\n      function finish() {\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.finishHooks[action], function(hook) {\n            deferred.notify('finish', hook.call(_this, config));\n          });\n        });\n      }\n\n      function rejected(results) {\n        $log.error('All settled rejected! Something went wrong');\n\n        deferred.reject(results);\n      }\n\n      return deferred.promise;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-local', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizerPrototype', AngularJsonAPISynchronizerPrototypeWrapper);\n\n  function AngularJsonAPISynchronizerPrototypeWrapper($log) {\n\n    AngularJsonAPISynchronizerPrototype.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerPrototype;\n\n    function AngularJsonAPISynchronizerPrototype(synchronizations) {\n      var _this = this;\n\n      _this.synchronizations = synchronizations;\n    }\n\n    function synchronize(config) {\n      $log.debug('Synchro Collection', this.Model.prototype.schema.type, config);\n\n      if (config.action === undefined) {\n        $log.error('Can\\'t synchronize undefined action', config);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-rest', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationRest', AngularJsonAPISynchronizationRestWrapper);\n\n  function AngularJsonAPISynchronizationRestWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    AngularJsonAPIModelLinkerService,\n    toKebabCase,\n    $q,\n    $http\n  ) {\n\n    AngularJsonAPISynchronizationRest.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationRest.prototype.constructor = AngularJsonAPISynchronizationRest;\n\n    return AngularJsonAPISynchronizationRest;\n\n    function AngularJsonAPISynchronizationRest(url) {\n      var _this = this;\n      var headers = { // jscs:disable disallowQuotedKeysInObjects\n        'Accept': 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json'\n      }; // jscs:enable disallowQuotedKeysInObjects\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('remove', remove);\n      _this.synchronization('unlink', unlink);\n      _this.synchronization('link', link);\n      _this.synchronization('update', update);\n      _this.synchronization('add', add);\n      _this.synchronization('all', all);\n      _this.synchronization('get', get);\n      _this.synchronization('refresh', get);\n\n      function all(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url,\n          params: config.params || {}\n        });\n      }\n\n      function get(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          params: config.params || {}\n        });\n      }\n\n      function remove(config) {\n        return $http({\n          method: 'DELETE',\n          headers: headers,\n          url: url + '/' + config.object.data.id\n        });\n      }\n\n      function unlink(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true || config.target === undefined) {\n          deferred.reject();\n        } else {\n          $http({\n            method: 'DELETE',\n            headers: headers,\n            url: url + '/' + config.object.data.id + '/relationships/' + toKebabCase(config.key) + '/' + config.target.data.id\n          }).then(deferred.resolve, deferred.reject);\n        }\n\n        return deferred.promise;\n      }\n\n      function link(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true || config.target === undefined) {\n          deferred.reject();\n        } else {\n          $http({\n            method: 'POST',\n            headers: headers,\n            url: url + '/' + config.object.data.id + '/relationships/' + toKebabCase(config.key),\n            data: {data: [AngularJsonAPIModelLinkerService.toLinkData(config.target)]}\n          }).then(deferred.resolve, deferred.reject);\n        }\n\n        return deferred.promise;\n      }\n\n      function update(config) {\n        return $http({\n          method: 'PUT',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          data: config.object.form.toJson()\n        });\n      }\n\n      function add(config) {\n        return $http({\n          method: 'POST',\n          headers: headers,\n          url: url + '/',\n          data: config.object.form.toJson()\n        });\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizationPrototype', AngularJsonAPISynchronizationPrototypeWrapper);\n\n  function AngularJsonAPISynchronizationPrototypeWrapper() {\n    AngularJsonAPISynchronizationPrototype.prototype.before = beforeSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.after = afterSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.begin = begin;\n    AngularJsonAPISynchronizationPrototype.prototype.finish = finish;\n    AngularJsonAPISynchronizationPrototype.prototype.synchronization = synchronization;\n\n    return AngularJsonAPISynchronizationPrototype;\n\n    function AngularJsonAPISynchronizationPrototype() {\n      var _this = this;\n      var allHooks = [\n        'add',\n        'init',\n        'get',\n        'all',\n        'clear',\n        'remove',\n        'unlink',\n        'unlinkReflection',\n        'link',\n        'linkReflection',\n        'update',\n        'refresh'\n      ];\n\n      _this.state = {};\n\n      _this.beginHooks = {};\n      _this.beforeHooks = {};\n      _this.synchronizationHooks = {};\n      _this.afterHooks = {};\n      _this.finishHooks = {};\n\n      _this.options = {};\n\n      angular.forEach(allHooks, function(hookName) {\n        _this.beginHooks[hookName] = [];\n        _this.beforeHooks[hookName] = [];\n        _this.synchronizationHooks[hookName] = [];\n        _this.afterHooks[hookName] = [];\n        _this.finishHooks[hookName] = [];\n        _this.state[hookName] = {\n          loading: false,\n          success: true\n        };\n      });\n    }\n\n    function begin(action, callback) {\n      var _this = this;\n\n      _this.beginHooks[action].push(callback);\n    }\n\n    function finish(action, callback) {\n      var _this = this;\n\n      _this.finishHooks[action].push(callback);\n    }\n\n    function beforeSynchro(action, callback) {\n      var _this = this;\n\n      _this.beforeHooks[action].push(callback);\n    }\n\n    function afterSynchro(action, callback) {\n      var _this = this;\n\n      _this.afterHooks[action].push(callback);\n    }\n\n    function synchronization(action, callback) {\n      var _this = this;\n\n      _this.synchronizationHooks[action].push(callback);\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-local', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationLocal', AngularJsonAPISynchronizationLocalWrapper);\n\n  function AngularJsonAPISynchronizationLocalWrapper(AngularJsonAPISynchronizationPrototype, $window) {\n\n    AngularJsonAPISynchronizationLocal.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationLocal.prototype.constructor = AngularJsonAPISynchronizationLocal;\n\n    return AngularJsonAPISynchronizationLocal;\n\n    function AngularJsonAPISynchronizationLocal(prefix) {\n      var _this = this;\n      var type = _this.synchronizer.factory.schema.type;\n      var cache = _this.synchronizer.factory.cache;\n\n      _this.__updateStorage = updateStorage;\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.begin('init', init);\n      _this.begin('clear', clear);\n      _this.begin('remove', updateStorage);\n      _this.begin('unlink', updateStorage);\n      _this.begin('unlinkReflection', updateStorage);\n      _this.begin('link', updateStorage);\n      _this.begin('linkReflection', updateStorage);\n      _this.begin('update', updateStorage);\n      _this.begin('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      _this.finish('init', updateStorage);\n      _this.finish('clear', updateStorage);\n      _this.finish('remove', updateStorage);\n      _this.finish('unlink', updateStorage);\n      _this.finish('unlinkReflection', updateStorage);\n      _this.finish('link', updateStorage);\n      _this.finish('linkReflection', updateStorage);\n      _this.finish('update', updateStorage);\n      _this.finish('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      function init() {\n        return $window.localStorage.getItem(prefix + '.' + type);\n      }\n\n      function clear() {\n        $window.localStorage.removeItem(prefix + '.' + type);\n      }\n\n      function updateStorage() {\n        $window.localStorage.setItem(prefix + '.' + type, cache.toJson());\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchema', AngularJsonAPISchemaWrapper);\n\n  function AngularJsonAPISchemaWrapper($log, pluralize) {\n\n    return AngularJsonAPISchema;\n\n    function AngularJsonAPISchema(schema) {\n      var _this = this;\n      var include = schema.include || {};\n      schema.include = include;\n      include.get = schema.include.get || [];\n      include.all = schema.include.all || [];\n\n      _this.params = {\n        get: {},\n        all: {}\n      };\n\n      angular.forEach(schema.relationships, function(linkSchema, linkName) {\n        var linkSchemaObj = new AngularJsonAPILinkSchema(linkSchema, linkName, schema.type);\n        schema.relationships[linkName] = linkSchemaObj;\n        if (linkSchemaObj.included === true) {\n          include.get.push(linkName);\n          if (linkSchemaObj.type === 'hasOne') {\n            include.all.push(linkName);\n          }\n        }\n      });\n\n      angular.extend(_this, schema);\n\n      if (include.get.length > 0) {\n        _this.params.get.include = include.get.join(',');\n      }\n\n      if (include.all.length > 0) {\n        _this.params.all.include = include.all.join(',');\n      }\n    }\n\n    function AngularJsonAPILinkSchema(linkSchema, linkName, type) {\n      var _this = this;\n\n      if (angular.isString(linkSchema)) {\n        _this.model = pluralize.plural(linkName);\n        _this.type = linkSchema;\n        _this.polymorphic = false;\n        _this.reflection = type;\n      } else {\n        if (linkSchema.type === undefined) {\n          $log.error('Schema of link without a type: ', linkSchema, linkName);\n        }\n\n        _this.model = linkSchema.model || pluralize.plural(linkName);\n        _this.type = linkSchema.type;\n        _this.polymorphic = linkSchema.polymorphic || false;\n        _this.reflection = linkSchema.reflection || type;\n        _this.included = linkSchema.included || false;\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModel', AngularJsonAPIModel);\n\n  function AngularJsonAPIModel(AngularJsonAPIAbstractModel, AngularJsonAPISchema, $log) {\n\n    return {\n      model: modelFactory\n    };\n\n    function modelFactory(schemaObj, parentFactory) {\n      var Model = function(data, updatedAt, isNew) {\n        var _this = this;\n\n        if (data.type !== _this.schema.type) {\n          $log.error('Data type other then declared in schema: ', data.type, ' instead of ', _this.schema.type);\n        }\n\n        AngularJsonAPIAbstractModel.call(_this, data, updatedAt, isNew);\n\n        _this.form.parent = _this;\n      };\n\n      Model.prototype = Object.create(AngularJsonAPIAbstractModel.prototype);\n      Model.prototype.constructor = Model;\n\n      Model.prototype.schema = schemaObj;\n      Model.prototype.parentFactory = parentFactory;\n      Model.prototype.synchronize = parentFactory.synchronizer.synchronize;\n\n      angular.forEach(schemaObj.functions, function(metaFunction, metaFunctionName) {\n        Model.prototype[metaFunctionName] = function() {\n          return metaFunction.apply(this, arguments);\n        };\n      });\n\n      return Model;\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIFactory', AngularJsonAPIFactoryWrapper);\n\n  function AngularJsonAPIFactoryWrapper(\n    AngularJsonAPIModel,\n    AngularJsonAPISchema,\n    AngularJsonAPICache,\n    AngularJsonAPICollection,\n    uuid4,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIFactory.prototype.get = get;\n    AngularJsonAPIFactory.prototype.all = all;\n    AngularJsonAPIFactory.prototype.remove = remove;\n    AngularJsonAPIFactory.prototype.initialize = initialize;\n\n    AngularJsonAPIFactory.prototype.clear = clear;\n\n    return AngularJsonAPIFactory;\n\n    /**\n     * AngularJsonAPIFactory constructor\n     * @param {json} schema       Schema object\n     * @param {AngularJsonAPISynchronizer} synchronizer Synchronizer for the factory\n     */\n    function AngularJsonAPIFactory(schema, synchronizer) {\n      var _this = this;\n      var config = {\n        action: 'init'\n      };\n\n      _this.schema = new AngularJsonAPISchema(schema);\n      _this.cache = new AngularJsonAPICache(_this);\n\n      _this.synchronizer = synchronizer;\n      _this.synchronizer.factory = _this;\n\n      _this.Model = AngularJsonAPIModel.model(\n        _this.schema,\n        _this\n      );\n\n      _this.synchronizer.synchronize(config).then(resolved, rejected);\n\n      function resolved(data, finish) {\n        _this.cache.fromJson(data);\n\n        finish();\n        return data;\n      }\n\n      function rejected(errors, finish) {\n        finish();\n\n        return errors;\n      }\n    }\n\n    /**\n     * Get request\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id, synchronized\n     */\n    function get(id) {\n      var _this = this;\n      var object = _this.__get(id);\n\n      object.fetch();\n\n      return object;\n    }\n\n    /**\n     * All request\n     * @param  {object} params Object associated with params (for filters/pagination etc.)\n     * @return {AngularJsonAPICollection} Collection of AngularJsonAPIModel, synchronized\n     */\n    function all(params) {\n      var _this = this;\n\n      var collection = new AngularJsonAPICollection(\n        _this,\n        angular.extend(params, _this.schema.params.all)\n      );\n\n      collection.fetch();\n\n      return collection;\n    }\n\n    /**\n     * Remove request\n     * @param  {uuid} id\n     * @return {promise} Promise associated with the synchronization, in case of\n     * fail object is reverted to previous state\n     */\n    function remove(id) {\n      var _this = this;\n      var object = _this.cache.remove(id);\n      var config = {\n        action: 'remove',\n        object: object\n      };\n\n      if (object !== undefined) {\n        object.removed = true;\n\n        if (object.isNew) {\n          return $q.when(undefined);\n        }\n      } else {\n        $log.error('Object with this id does not exist');\n      }\n\n      return _this.synchronizer.synchronize(config).then(resolved, rejected);\n\n      function resolved(data, finish) {\n        object.unlinkAll();\n        _this.cache.clearRemoved(id);\n        finish();\n\n        return data;\n      }\n\n      function rejected(errors, finish) {\n        if (object !== undefined) {\n          object.removed = false;\n          _this.cache.revertRemove(id);\n        }\n\n        finish();\n        return errors;\n      }\n    }\n\n    /**\n     * Initialize new AngularJsonAPIModel\n     * @return {AngularJsonAPIModel} New model\n     */\n    function initialize() {\n      var _this = this;\n\n      var model = new _this.Model({\n        type: _this.schema.type,\n        id: uuid4.generate(),\n        attributes: {},\n        relationships: {}\n      }, true);\n\n      return model;\n    }\n\n    /**\n     * Clears localy saved data\n     * @return {promise} Promise associated with the synchronization resolves to nothing\n     */\n    function clear() {\n      var _this = this;\n      _this.cache.clear();\n      var config = {\n        action: 'clear'\n      };\n\n      return _this.synchronizer.synchronize(config).then(resolved, rejected);\n\n      function resolved(data, finish) {\n        finish();\n      }\n\n      function rejected(errors, finish) {\n        finish();\n\n        return errors;\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICollection', AngularJsonAPICollectionWrapper);\n\n  function AngularJsonAPICollectionWrapper(\n\n  ) {\n\n    AngularJsonAPICollection.prototype.fetch = fetch;\n    AngularJsonAPICollection.prototype.refresh = fetch;\n\n    return AngularJsonAPICollection;\n\n    /**\n     * Constructor\n     * @param {AngularJsonAPIFactory} factory Factory associated with the collection\n     * @param {object} params  Params associated with this factory (such as filters)\n     */\n    function AngularJsonAPICollection(factory, params) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.params = params;\n\n      _this.errors = {\n        synchronization: []\n      };\n      _this.data = [];\n      _this.step = 'initialized';\n    }\n\n    /**\n     * Synchronizes collection with the server\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function fetch() {\n      var _this = this;\n      var config = {\n        method: 'all',\n        params: _this.params\n      };\n\n      return _this.factory.__synchronize(config).then(resolved, rejected, notify);\n\n      function resolved(data) {\n        _this.errors.synchronization = [];\n        _this.data = data;\n\n        return _this;\n      }\n\n      function rejected(errors) {\n        _this.errors.synchronization = errors;\n\n        return _this;\n      }\n\n      function notify(data, step) {\n        if (data !== undefined) {\n          _this.data = data;\n        }\n\n        _this.step = step;\n\n        return _this;\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .provider('$jsonapi', jsonapiProvider);\n\n  function jsonapiProvider() {\n    var memory = {};\n    this.$get = jsonapiFactory;\n\n    function jsonapiFactory($log, AngularJsonAPIFactory) {\n      return {\n        form: form,\n        get: get,\n        remove: remove,\n        all: all,\n        addModel: addModel,\n        getModel: getModel,\n        clearAll: clearAll\n      };\n\n      function addModel(schema, synchronization) {\n        var collection = new AngularJsonAPIFactory(schema, synchronization);\n\n        memory[schema.type] = collection;\n      }\n\n      function getModel(type) {\n        return memory[type];\n      }\n\n      function form(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t add not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].isNew.form;\n      }\n\n      function get(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].get(id);\n      }\n\n      function remove(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t remove not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].remove(id);\n      }\n\n      function all(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get all of not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].all();\n      }\n\n      function clearAll() {\n        angular.forEach(memory, function(collection) {\n          collection.clear();\n        });\n      }\n    }\n  }\n\n})();\n\n"],"sourceRoot":"/source/"}