{"version":3,"sources":["/source/jsonapi.module.js","/source/model/model-validator/model-validator.js","/source/model/model-linker/model-linker.js","angular-jsonapi.min.js","/source/model/model-form/model-form.js","/source/model/abstract-model/abstract-model.js","/source/factory/factory-cache/factory-cache.factory.js","/source/utils/lazy-property.js","/source/utils/kebab-case.js","/source/utils/all-settled.js","/source/synchronizers/synchronizer-simple.js","/source/synchronizers/synchronizer-prototype.js","/source/synchronizations/synchronization-rest.js","/source/synchronizations/synchronization-prototype.js","/source/synchronizations/synchronization-local.js","/source/schema/schema.js","/source/schema/schema-link.js","/source/model/model.js","/source/factory/factory.js","/source/collection/collection.js","/source/jsonapi.provider.js","/source/jsonapi.config.js"],"names":["angular","module","constant","pluralize","AngularJsonAPIModelValidatorService","validateForm","schema","data","validateField","key","_this","this","service","AngularJsonAPIModelLinkerService","$log","toLinkData","object","type","id","link","target","undefined","error","polymorphic","model","__addHasMany","__addHasOne","unlink","__removeHasMany","__removeHasOne","debug","relationships","linkData","isArray","indexOf","push","index","splice","$inject","AngularJsonAPIModelFormWrapper","AngularJsonAPIModelForm","parent","attributes","reset","toJson","copy","forEach","value","save","validator","errors","validation","validate","prototype","factory","AngularJsonAPIAbstractModelWrapper","uuid4","$rootScope","$injector","$q","AngularJsonAPIAbstractModel","saved","synchronized","stable","removed","loadingCount","name","promises","__setData","form","resolve","response","$emit","update","finish","deferred","reject","notify","defer","hasErrors","config","action","hasOwnProperty","synchronize","then","promise","refresh","$jsonapi","proccesResults","get","params","status","statusText","remove","unlinkAll","parentFactory","cache","clearRemoved","revertRemove","removeLink","linksObj","reflectionKey","reflection","removeReflectionLink","bind","isObject","reflectionSchema","resolveReflection","rejectReflection","notifyReflection","validatedData","updatedAt","Date","now","setAttributes","validators","setRelationships","relationshipData","links","linkOne","length","getFactory","AngularJsonAPICacheWrapper","AngularJsonAPICache","size","indexIds","addOrUpdate","Model","fromJson","json","collection","objectData","clear","map","setIndexIds","array","element","isString","propertyName","callback","result","done","Object","defineProperty","call","enumerable","configurable","str","replace","toLowerCase","$provide","decorator","$delegate","allSettled","resolvedCallback","rejectedCallback","wrap","when","isFunction","success","reason","wrapped","all","AngularJsonAPISynchronizerSimpleWrapper","AngularJsonAPISynchronizerPrototype","AngularJsonAPISynchronizerSimple","synchronizations","state","synchronization","synchronizer","step","resolved","results","afterHooks","hook","finishHooks","rejected","noop","beginHooks","beforeHooks","synchronizationHooks","create","constructor","AngularJsonAPISynchronizerPrototypeWrapper","AngularJsonAPISynchronizationRestWrapper","AngularJsonAPISynchronizationPrototype","toKebabCase","$http","AngularJsonAPISynchronizationRest","url","method","headers","resolveHttp","rejectHttp","add","rejectServerOffline","rejectNoConnection","Accept","Content-Type","AngularJsonAPISynchronizationPrototypeWrapper","allHooks","options","hookName","loading","begin","beforeSynchro","afterSynchro","before","after","AngularJsonAPISynchronizationLocalWrapper","$window","AngularJsonAPISynchronizationLocal","prefix","init","localStorage","getItem","removeItem","updateStorage","setItem","__updateStorage","AngularJsonAPISchemaWrapper","AngularJsonAPISchemaLink","AngularJsonAPISchema","include","linkSchema","linkName","linkSchemaObj","included","extend","join","AngularJsonAPILinkSchrapperLink","plural","singular","AngularJsonAPIModel","modelFactory","schemaObj","functions","metaFunction","metaFunctionName","apply","arguments","AngularJsonAPIFactoryWrapper","AngularJsonAPICollection","AngularJsonAPIFactory","initialized","fetch","initialize","warn","generate","AngularJsonAPICollectionWrapper","event","description","$on","jsonapiProvider","jsonapiFactory","allFactories","memory","factoriesNames","names","addFactory","clearAll","objects","$get","provider","$logProvider","debugEnabled"],"mappings":"CAAA,WACE,YAEAA,SAAQC,OAAO,mBAAoB,UAElCC,SAAS,YAAaC,cCLzB,WACE,YAKA,SAASC,KAYP,QAASC,GAAaC,EAAQC,GAG5B,SAQF,QAASC,GAAcF,EAAQG,GAG7B,SAzBF,GAAIC,GAAQC,IAIZ,OAHAD,GAAML,aAAeA,EACrBK,EAAMF,cAAgBA,EAEfG,KARTX,QAAQC,OAAO,mBACdW,QAAQ,sCAAuCR,MCJlD,WACE,YAKA,SAASS,GAAiCC,GAexC,QAASC,GAAWC,GAClB,MAAe,QAAXA,EACK,MAGDC,KAAMD,EAAOT,KAAKU,KAAMC,GAAIF,EAAOT,KAAKW,IAUlD,QAASC,GAAKH,EAAQP,EAAKW,EAAQd,GAEjC,MAAee,UAAXD,GACFN,EAAKQ,MAAM,iCAAmCN,EAAQP,EAAKW,EAAQd,GACnEQ,EAAKQ,MAAM,UAAWN,EAAOT,KAAKU,KAAMD,GACxCF,EAAKQ,MAAM,UAAWF,EAAOb,KAAKU,KAAMG,GACxCN,EAAKQ,MAAM,OAAQb,GACnBK,EAAKQ,MAAM,UAAWhB,IACf,GAGMe,SAAXL,GACFF,EAAKQ,MAAM,wCAA0CN,EAAQP,EAAKW,EAAQd,GAC1EQ,EAAKQ,MAAM,UAAWN,EAAOT,KAAKU,KAAMD,GACxCF,EAAKQ,MAAM,UAAWF,EAAOb,KAAKU,KAAMG,GACxCN,EAAKQ,MAAM,OAAQb,GACnBK,EAAKQ,MAAM,UAAWhB,IACf,GAGMe,SAAXf,GACFQ,EAAKQ,MAAM,wCAA0CN,EAAQP,EAAKW,EAAQd,GAC1EQ,EAAKQ,MAAM,UAAWN,EAAOT,KAAKU,KAAMD,GACxCF,EAAKQ,MAAM,UAAWF,EAAOb,KAAKU,KAAMG,GACxCN,EAAKQ,MAAM,OAAQb,GACnBK,EAAKQ,MAAM,UAAWhB,IACf,GAGM,OAAXc,GAAmBd,EAAOiB,eAAgB,GAASjB,EAAOkB,QAAUJ,EAAOb,KAAKU,MAClFH,EAAKQ,MAAM,+CAAiDhB,EAAOkB,MAAQ,eAAiBJ,EAAOb,KAAKU,MACxGH,EAAKQ,MAAM,UAAWN,EAAOT,KAAKU,KAAMD,GACxCF,EAAKQ,MAAM,UAAWF,EAAOb,KAAKU,KAAMG,GACxCN,EAAKQ,MAAM,OAAQb,GACnBK,EAAKQ,MAAM,UAAWhB,IACf,GAGW,YAAhBA,EAAOW,KACFQ,EAAaT,EAAQP,EAAKW,EAAQd,GAChB,WAAhBA,EAAOW,KACTS,EAAYV,EAAQP,EAAKW,EAAQd,GADnC,OAYT,QAASqB,GAAOX,EAAQP,EAAKW,EAAQd,GACnC,MAAee,UAAXf,MACFQ,GAAKQ,MAAM,4CAA+Cb,GAIxC,YAAhBH,EAAOW,KACFW,EAAgBZ,EAAQP,EAAKW,EAAQd,GACnB,WAAhBA,EAAOW,KACTY,EAAeb,EAAQP,EAAKW,EAAQd,GADtC,OAST,QAASoB,GAAYV,EAAQP,EAAKW,EAAQd,GAGxC,MAFAQ,GAAKgB,MAAM,YAAad,EAAQP,EAAKW,EAAQd,GAE9B,OAAXc,GAAmBJ,EAAOe,cAActB,KAASW,GAE5C,GAEPJ,EAAOe,cAActB,GAAOW,EAC5BJ,EAAOT,KAAKwB,cAActB,GAAKF,KAAOQ,EAAWK,IAG5C,GAGT,QAASK,GAAaT,EAAQP,EAAKW,EAAQd,GACzC,GAAI0B,GAAWjB,EAAWK,EAG1B,OAFAN,GAAKgB,MAAM,aAAcd,EAAQP,EAAKW,EAAQd,GAE1CN,QAAQiC,QAAQjB,EAAOe,cAActB,KAASO,EAAOe,cAActB,GAAKyB,QAAQd,GAAU,IAErF,GAEPJ,EAAOe,cAActB,GAAOO,EAAOe,cAActB,OACjDO,EAAOe,cAActB,GAAK0B,KAAKf,GAC/BJ,EAAOT,KAAKwB,cAActB,GAAKF,KAAOS,EAAOT,KAAKwB,cAActB,GAAKF,SACrES,EAAOT,KAAKwB,cAActB,GAAKF,KAAK4B,KAAKH,IAGpC,GAGT,QAASH,GAAeb,EAAQP,EAAKW,EAAQd,GAG3C,MAFAQ,GAAKgB,MAAM,eAAgBd,EAAQP,EAAKW,EAAQd,GAEjCe,SAAXD,GAAwBJ,EAAOe,cAActB,KAASW,GAEjD,GAEPJ,EAAOe,cAActB,GAAO,KAC5BO,EAAOT,KAAKwB,cAActB,GAAKF,KAAOc,QAGjC,GAGT,QAASO,GAAgBZ,EAAQP,EAAKW,EAAQd,GAG5C,GAFAQ,EAAKgB,MAAM,gBAAiBd,EAAQP,EAAKW,EAAQd,GAElCe,SAAXD,EACFJ,EAAOe,cAActB,MACrBO,EAAOT,KAAKwB,cAActB,GAAKF,YAC1B,CAAA,GAAkCc,SAA9BL,EAAOe,cAActB,GAE9B,MAEA,IAAI2B,GAAQpB,EAAOe,cAActB,GAAKyB,QAAQd,EAE9C,IAAc,KAAVgB,EAEF,OAAO,CAEPpB,GAAOe,cAActB,GAAK4B,OAAOD,EAAO,GACxCpB,EAAOT,KAAKwB,cAActB,GAAKF,KAAK8B,OAAOD,EAAO,GAItD,OAAO,EApKT,GAAI1B,GAAQC,IAOZ,OALAD,GAAMK,WAAaA,EAEnBL,EAAMS,KAAOA,EACbT,EAAMiB,OAASA,EAERhB,KAXTX,QAAQC,OAAO,mBACdW,QAAQ,mCAAoCC,GCmR7CA,EAAiCyB,SAAW,WCvR9C,WACE,YAKA,SAASC,GACPnC,EACAS,GAeA,QAAS2B,GAAwBC,GAC/B,GAAI/B,GAAQC,IAEZD,GAAMH,MACJW,GAAIuB,EAAOlC,KAAKW,GAChBD,KAAMwB,EAAOlC,KAAKU,KAClByB,cACAX,kBAGFrB,EAAMqB,iBACNrB,EAAM+B,OAASA,EACf/B,EAAMJ,OAASmC,EAAOnC,OACtBI,EAAMiC,QAOR,QAASC,KACP,GAAIlC,GAAQC,KACRJ,EAAOP,QAAQ6C,KAAKnC,EAAMH,MAC1BwB,IAUJ,OARA/B,SAAQ8C,QAAQvC,EAAKwB,cAAe,SAASgB,EAAOtC,GAC/BY,SAAf0B,EAAMxC,OACRwB,EAActB,GAAOsC,KAIzBxC,EAAKwB,cAAgBA,GAGnBxB,KAAMA,GAQV,QAASyC,KACP,GAAItC,GAAQC,IAEZ,OAAOD,GAAM+B,OAAOO,OAOtB,QAASL,KACP,GAAIjC,GAAQC,IAEZX,SAAQ8C,QAAQpC,EAAMJ,OAAOoC,WAAY,SAASO,EAAWxC,GAC3DC,EAAMH,KAAKmC,WAAWjC,GAAOC,EAAM+B,OAAOlC,KAAKmC,WAAWjC,IAAQ,KAGpET,QAAQ8C,QAAQpC,EAAMJ,OAAOyB,cAAe,SAASxB,EAAME,GACzDC,EAAMH,KAAKwB,cAActB,GAAOC,EAAM+B,OAAOlC,KAAKwB,cAActB,OAChEC,EAAMqB,cAActB,GAAOC,EAAM+B,OAAOV,cAActB,KAGxDC,EAAMwC,QACJC,eAQJ,QAASC,KACP,GACIF,GADAxC,EAAQC,IAOZ,OAJAuC,GAAS9C,EAAoCC,aAAaK,EAAMH,MAEhEG,EAAMwC,OAAOC,WAAaD,EAEnBA,EAQT,QAAS1C,GAAcC,GACrB,GACIyC,GADAxC,EAAQC,IASZ,OAPAuC,GAAS9C,EAAoCI,cAC3CE,EAAMH,KAAKE,GACXA,GAGFC,EAAMwC,OAAOC,WAAW1C,GAAOyC,EAExBA,EAST,QAAS/B,GAAKV,EAAKW,GACjB,GAAIV,GAAQC,KACRL,EAASI,EAAMJ,OAAOyB,cAActB,EAExC,OAAOI,GAAiCM,KAAKT,EAAOD,EAAKW,EAAQd,GASnE,QAASqB,GAAOlB,EAAKW,GACnB,GAAIV,GAAQC,KACRL,EAASI,EAAMJ,OAAOyB,cAActB,EAExC,OAAOI,GAAiCc,OAAOjB,EAAOD,EAAKW,EAAQd,GA/HrE,MAVAkC,GAAwBa,UAAUL,KAAOA,EACzCR,EAAwBa,UAAUV,MAAQA,EAC1CH,EAAwBa,UAAUD,SAAWA,EAC7CZ,EAAwBa,UAAU7C,cAAgBA,EAElDgC,EAAwBa,UAAUlC,KAAOA,EACzCqB,EAAwBa,UAAU1B,OAASA,EAE3Ca,EAAwBa,UAAUT,OAASA,EAEpCJ,EAlBTxC,QAAQC,OAAO,mBACdqD,QAAQ,0BAA2Bf,GD6apCA,EAA+BD,SAAW,sCAAuC,uCEjbnF,WACE,YAKA,SAASiB,GACPf,EACA3B,EACA2C,EACAC,EACAC,EACA5C,EACA6C,GAsBA,QAASC,GAA4BrD,EAAMsD,EAAOC,GAChD,GAAIpD,GAAQC,IAEZJ,GAAKwB,cAAgBxB,EAAKwB,kBAM1BrB,EAAMmD,MAAkBxC,SAAVwC,GAAsB,EAAOA,EAM3CnD,EAAMqD,OAA0B1C,SAAjByC,GAA6B,EAAOA,EAMnDpD,EAAAA,gBAAsCW,SAAjByC,GAA6B,EAAOA,EAEzDpD,EAAMsD,SAAU,EAChBtD,EAAMuD,aAAe,EAErBvD,EAAMH,MACJwB,iBACAW,eAEFhC,EAAMqB,iBAEN/B,QAAQ8C,QAAQpC,EAAMJ,OAAOyB,cAAe,SAASzB,EAAQ4D,GAC3DxD,EAAMqB,cAAcmC,GAAQ7C,SAG9BX,EAAMwC,QACJC,eAGFzC,EAAMyD,YAENC,EAAU1D,EAAOH,GAEjBG,EAAM2D,KAAO,GAAI7B,GAAwB9B,GAO3C,QAASsC,KAyBP,QAASsB,GAAQC,GACfd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,eAAgB,WAAYP,EAAO6D,GAC1F7D,EAAM+D,OAAO/D,EAAM2D,KAAK9D,MAExBG,EAAAA,iBAAqB,EACrBA,EAAMmD,OAAQ,EACdnD,EAAMqD,QAAS,EAEfQ,EAASG,SAETC,EAASL,QAAQ5D,GAGnB,QAASkE,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,eAAgB,WAAYP,EAAO6D,GAC1FA,EAASG,SAETC,EAASC,OAAOL,EAASrB,QAG3B,QAAS2B,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,eAAgB,SAAUP,EAAO6D,GAExFI,EAASE,OAAON,EAASrB,QA/C3B,GAAIxC,GAAQC,KACRgE,EAAWhB,EAAGmB,QACdC,GAAY,EACZC,GACFC,OAAQvE,EAAMmD,SAAU,EAAQ,MAAQ,SACxC7C,OAAQN,GAGNwC,EAASxC,EAAM2D,KAAKjB,UAExB,KAAK,GAAI9B,KAAS4B,GACZA,EAAOgC,eAAe5D,KACxByD,GAAY,EAUhB,OANIA,MAAc,EAChBJ,EAASC,OAAO1B,GAEhBxC,EAAMyE,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GAG3CF,EAASU,QAiClB,QAAS1C,KACP,GAAIjC,GAAQC,IAEZ,OAAOD,GAAM2D,KAAK1B,QAOpB,QAAS2C,KAkBP,QAAShB,GAAQC,GACfd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,kBAAmB,WAAYP,EAAO6D,GAC7FgB,EAASC,eAAejB,EAAShE,MACjCgE,EAASG,SAEThE,EAAAA,iBAAqB,EACrBA,EAAMqD,QAAS,EAEfY,EAASL,QAAQC,GAGnB,QAASK,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,kBAAmB,WAAYP,EAAO6D,GAC7FA,EAASG,SAETC,EAASC,OAAOL,GAGlB,QAASM,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,kBAAmB,SAAUP,EAAO6D,GAE3FI,EAASE,OAAON,GAtClB,GAAIgB,GAAW7B,EAAU+B,IAAI,YACzBd,EAAWhB,EAAGmB,QACdpE,EAAQC,KACRqE,GACFC,OAAQ,UACRjE,OAAQN,EACRgF,OAAQhF,EAAMJ,OAAOoF,OAAOD,IAS9B,OANI/E,GAAMmD,SAAU,EAClBc,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,+BAElDlF,EAAMyE,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GAG3CF,EAASU,QA+BlB,QAASzC,KACP,GAAIlC,GAAQC,KACRJ,EAAOP,QAAQ6C,KAAKnC,EAAMH,MAC1BwB,IAUJ,OARA/B,SAAQ8C,QAAQvC,EAAKwB,cAAe,SAASgB,EAAOtC,GAC/BY,SAAf0B,EAAMxC,OACRwB,EAActB,GAAOsC,KAIzBxC,EAAKwB,cAAgBA,GAGnBxB,KAAMA,GAQV,QAASsF,KAmBP,QAASvB,GAAQC,GACfd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,iBAAkB,WAAYP,EAAO6D,GAC5F7D,EAAMsD,SAAU,EAChBtD,EAAMoF,YACNpF,EAAMqF,cAAcC,MAAMC,aAAavF,EAAMH,KAAKW,IAClDqD,EAASG,SAETC,EAASL,QAAQC,GAGnB,QAASK,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,iBAAkB,WAAYP,EAAO6D,GAC5F7D,EAAMqF,cAAcC,MAAME,aAAaxF,EAAMH,KAAKW,IAClDqD,EAASG,SAETC,EAASC,OAAOL,GAGlB,QAASM,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,iBAAkB,SAAUP,EAAO6D,GAE1FI,EAASE,OAAON,GAvClB,GAAI7D,GAAQC,KACRgE,EAAWhB,EAAGmB,QAEdE,GACFC,OAAQ,SACRjE,OAAQN,EAWV,OARAA,GAAMqF,cAAcC,MAAMH,OAAOnF,EAAMH,KAAKW,IAExCR,EAAMmD,SAAU,EAClBc,EAASL,UAET5D,EAAMyE,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GAG3CF,EAASU,QA+BlB,QAASS,GAAUrF,GAYjB,QAAS0F,GAAWC,EAAU3F,GAC5B,GAAIH,GAASI,EAAMJ,OAAOyB,cAActB,GACpC4F,EAAgB/F,EAAOgG,UAEvBtG,SAAQiC,QAAQmE,GAClBpG,QAAQ8C,QAAQsD,EAAUG,EAAqBC,KAAKnF,OAAWgF,IACtDrG,QAAQyG,SAASL,IAC1BG,EAAqBF,EAAeD,GAGlB,WAAhB9F,EAAOW,KACTP,EAAMqB,cAActB,GAAO,KACF,YAAhBH,EAAOW,OAChBP,EAAMqB,cAActB,OAIxB,QAAS8F,GAAqBF,EAAejF,GAW3C,QAASkD,GAAQC,GACfd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,2BAA4B,UAAWP,EAAO6D,GAErGA,EAASG,SACTC,EAASL,QAAQ5D,GAGnB,QAASkE,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,2BAA4B,WAAYP,EAAO6D,GAEtGA,EAASG,SACTC,EAASC,OAAOL,GAGlB,QAASM,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,2BAA4B,SAAUP,EAAO6D,GAEpGA,EAASG,SACTC,EAASE,OAAON,GA5BlB,GAAImC,GAAmBtF,EAAOd,OAAOyB,cAAcsE,EACnDxF,GAAiCc,OAAOP,EAAQiF,EAAe3F,EAAOgG,GAEtEtF,EAAO+D,aACLF,OAAQ,mBACRjE,OAAQI,EACRA,OAAQV,EACRD,IAAK4F,IACJjB,KAAKd,EAASM,EAAQC,GArC3B,GAAInE,GAAQC,KACRgE,EAAWhB,EAAGmB,OAQlB,OANYzD,UAARZ,EACFT,QAAQ8C,QAAQpC,EAAMqB,cAAeoE,GAErCA,EAAWzF,EAAMqB,cAActB,GAAMA,GAGhCkE,EAASU,QA2DlB,QAASlE,GAAKV,EAAKW,GAuBjB,QAASkD,GAAQC,GAmBf,QAASoC,GAAkBpC,GACzBd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,yBAA0B,UAAWP,EAAO6D,GAEnGA,EAASG,SACTC,EAASL,QAAQ5D,GAGnB,QAASkG,GAAiBrC,GACxBd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,yBAA0B,WAAYP,EAAO6D,GAEpGA,EAASG,SACTC,EAASC,OAAOL,GAGlB,QAASsC,GAAiBtC,GACxBd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,yBAA0B,SAAUP,EAAO6D,GAElGA,EAASG,SACTC,EAASE,OAAON,GApClB,GAAImC,GAAmBtF,EAAOd,OAAOyB,cAAcsE,EAEnD5C,GAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,eAAgB,WAAYP,EAAO6D,GAE1F1D,EAAiCM,KAAKT,EAAOD,EAAKW,EAAQd,GAC1DO,EAAiCM,KAAKC,EAAQiF,EAAe3F,EAAOgG,GAEpEhG,EAAMqD,QAAS,EACfQ,EAASG,SAETtD,EAAO+D,aACLF,OAAQ,iBACR3E,OAAQoG,EACR1F,OAAQI,EACRA,OAAQV,EACRD,IAAK4F,IACJjB,KAAKuB,EAAmBC,EAAkBC,GAwB/C,QAASjC,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,eAAgB,WAAYP,EAAO6D,GAE1FI,EAASC,OAAOL,EAASrB,QACzBqB,EAASG,SACTC,EAASC,OAAOL,GAGlB,QAASM,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,eAAgB,SAAUP,EAAO6D,GAExFI,EAASE,OAAON,GA1ElB,GAAII,GAAWhB,EAAGmB,QACdpE,EAAQC,KACRL,EAASI,EAAMJ,OAAOyB,cAActB,GACpC4F,EAAgB/F,EAAOgG,WACvBtB,GACFC,OAAQ,OACRjE,OAAQN,EACRJ,OAAQA,EACRc,OAAQA,EACRX,IAAKA,EAWP,OAReY,UAAXD,EACFuD,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,2BACzClF,EAAMmD,SAAU,EACzBc,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,4BAElDlF,EAAMyE,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GAG3CF,EAASU,QAgElB,QAAS1D,GAAOlB,EAAKW,GAuBnB,QAASkD,GAAQC,GAkBf,QAASoC,GAAkBpC,GACzBd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,2BAA4B,UAAWP,EAAO6D,GAErGA,EAASG,SACTC,EAASL,QAAQ5D,GAGnB,QAASkG,GAAiBrC,GACxBd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,2BAA4B,WAAYP,EAAO6D,GAEtGA,EAASG,SACTC,EAASC,OAAOL,GAGlB,QAASsC,GAAiBtC,GACxBd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,2BAA4B,SAAUP,EAAO6D,GAEpGA,EAASG,SACTC,EAASE,OAAON,GAnClB,GAAImC,GAAmBtF,EAAOd,OAAOyB,cAAcsE,EACnD5C,GAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,iBAAkB,WAAYP,EAAO6D,GAE5F1D,EAAiCc,OAAOjB,EAAOD,EAAKW,EAAQd,GAC5DO,EAAiCc,OAAOP,EAAQiF,EAAe3F,EAAOgG,GAEtEhG,EAAMqD,QAAS,EACfQ,EAASG,SAETtD,EAAO+D,aACLF,OAAQ,mBACRjE,OAAQI,EACRA,OAAQV,EACRJ,OAAQoG,EACRjG,IAAK4F,IACJjB,KAAKuB,EAAmBC,EAAkBC,GAwB/C,QAASjC,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,iBAAkB,WAAYP,EAAO6D,GAE5FI,EAASC,OAAOL,EAASrB,QACzBqB,EAASG,SACTC,EAASC,OAAOL,GAGlB,QAASM,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMH,KAAKU,KAAO,iBAAkB,SAAUP,EAAO6D,GAE1FI,EAASE,OAAON,GAzElB,GAAII,GAAWhB,EAAGmB,QACdpE,EAAQC,KACRL,EAASI,EAAMJ,OAAOyB,cAActB,GACpC4F,EAAgB/F,EAAOgG,WACvBtB,GACFC,OAAQ,SACRjE,OAAQN,EACRU,OAAQA,EACRd,OAAQA,EACRG,IAAKA,EAWP,OAReY,UAAXD,EACFuD,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,6BACzClF,EAAMmD,SAAU,EACzBc,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,8BAElDlF,EAAMyE,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GAG3CF,EAASU,QA8DlB,QAASZ,GAAOqC,GACd,GAAIpG,GAAQC,IAEZ,OAAIyD,GAAU1D,EAAOoG,MAAmB,GACtCpG,EAAMiC,QACNjC,EAAAA,iBAAqB,EACrBA,EAAMqD,QAAS,EACfrD,EAAMqG,UAAYC,KAAKC,OAEhB,IAEA,EAcX,QAAS7C,GAAUpD,EAAQ8F,GA0BzB,QAASI,GAAcC,EAAY1G,GACjCO,EAAOT,KAAKmC,WAAWjC,GAAOqG,EAAcpE,WAAWjC,GAGzD,QAAS2G,GAAiB9G,EAAQG,GAChC,GAAI4G,GAAmBP,EAAc/E,cAActB,EAEnD,OAAyBY,UAArBgG,OACFrG,EAAOT,KAAKwB,cAActB,IAAQF,KAAMc,UAI1CL,EAAOT,KAAKwB,cAActB,GAAOO,EAAOT,KAAKwB,cAActB,OAC3DO,EAAOT,KAAKwB,cAActB,GAAK6G,MAAQD,EAAiBC,WAEpC,WAAhBhH,EAAOW,KACTsG,EAAQvG,EAAQP,EAAKH,EAAQ+G,EAAiB9G,MACrB,YAAhBD,EAAOW,OACZjB,QAAQiC,QAAQoF,EAAiB9G,OAA0C,IAAjC8G,EAAiB9G,KAAKiH,QAClExG,EAAOT,KAAKwB,cAActB,GAAKF,QAC/BS,EAAO8E,UAAUrF,IAEjBT,QAAQ8C,QACNuE,EAAiB9G,KACjBgH,EAAQf,KAAKnF,OAAWL,EAAQP,EAAKH,OAM7C,QAASiH,GAAQvG,EAAQP,EAAKH,EAAQC,GACpC,GAAa,OAATA,EAEF,WADAM,GAAiCM,KAAKH,EAAQP,EAAK,KAAMH,EAI3D,IAAae,SAATd,EAAJ,CAIA,GAAI+C,GAAUiC,EAASkC,WAAWlH,EAAKU,KAEvC,IAAgBI,SAAZiC,EAEF,WADAxC,GAAKQ,MAAM,oBAAqBf,EAAKU,KAAMV,EAI7C,IAAIa,GAASkC,EAAQ0C,MAAMP,IAAIlF,EAAKW,IAChCmF,EAAgB/F,EAAOgG,WACvBI,EAAmBtF,EAAOd,OAAOyB,cAAcsE,EAEnDxF,GAAiCM,KAAKH,EAAQP,EAAKW,EAAQd,GAEvD+F,KAAkB,GACpBxF,EAAiCM,KAAKC,EAAQiF,EAAerF,EAAQ0F,IA9EzE,GAAInB,GAAW7B,EAAU+B,IAAI,YACzBnF,EAASU,EAAOV,MAKpB,OAHAU,GAAOT,KAAKW,GAAK4F,EAAc5F,GAC/BF,EAAOT,KAAKU,KAAO6F,EAAc7F,KAE7BD,EAAO+E,cAAczF,OAAOW,OAAS6F,EAAc7F,MACrDH,EAAKQ,MAAM,8BAA+BN,EAAO+E,cAAczF,OAAOW,KAAM6F,IACrE,GAGJtD,EAAMJ,SAASpC,EAAOT,KAAKW,KAKhC4F,EAAcpE,WAAaoE,EAAcpE,eACzCoE,EAAc/E,cAAgB+E,EAAc/E,kBAE5C/B,QAAQ8C,QAAQxC,EAAOoC,WAAYwE,GACnClH,QAAQ8C,QAAQxC,EAAOyB,cAAeqF,IAE/B,IAVLtG,EAAKQ,MAAM,eACJ,GAtgBX,MAbAsC,GAA4BP,UAAUiC,QAAUA,EAChD1B,EAA4BP,UAAUwC,OAASA,EAC/CjC,EAA4BP,UAAUV,MAAQA,EAC9CiB,EAA4BP,UAAUL,KAAOA,EAE7CY,EAA4BP,UAAUoB,OAASA,EAE/Cb,EAA4BP,UAAUlC,KAAOA,EAC7CyC,EAA4BP,UAAU1B,OAASA,EAC/CiC,EAA4BP,UAAUyC,UAAYA,EAElDlC,EAA4BP,UAAUT,OAASA,EAExCgB,EAzBT5D,QAAQC,OAAO,mBACdqD,QAAQ,8BAA+BC,GFwhCxCA,EAAmCjB,SAAW,0BAA2B,mCAAoC,QAAS,aAAc,YAAa,OAAQ,SG5hC3J,WACE,YAKA,SAASoF,GACPlE,EACA1C,GAqBA,QAAS6G,GAAoBrE,GAC3B,GAAI5C,GAAQC,IAEZD,GAAM4C,QAAUA,EAChB5C,EAAMH,QACNG,EAAMsD,WACNtD,EAAMkH,KAAO,EAEblH,EAAMmH,YAQR,QAASC,GAAYhB,EAAehD,GAClC,GAAIpD,GAAQC,KACRO,EAAK4F,EAAc5F,EAEvB,OAAWG,UAAPH,MACFJ,GAAKQ,MAAM,6BAA+BwF,IAIrBzF,SAAnBX,EAAMH,KAAKW,IACbR,EAAMH,KAAKW,GAAM,GAAIR,GAAM4C,QAAQyE,MAAMjB,GAAe,EAAMhD,GAC9DpD,EAAMkH,MAAQ,GAEdlH,EAAMH,KAAKW,GAAIuD,OAAOqC,GAGjBpG,EAAMH,KAAKW,IASpB,QAAS8G,GAASC,GAChB,GAAIvH,GAAQC,KACRuH,EAAalI,QAAQgI,SAASC,EAE9BjI,SAAQyG,SAASyB,IAAmC7G,SAApB6G,EAAW3H,OAC7CG,EAAMqG,UAAYmB,EAAWnB,UAC7BrG,EAAMmH,SAAWK,EAAWL,SAE5B7H,QAAQ8C,QAAQoF,EAAW3H,KAAM,SAAS4H,GACxC,GAAI5H,GAAO4H,EAAW5H,IACtBG,GAAMoH,YAAYvH,GAAM,MAS9B,QAASqC,KACP,GAAIlC,GAAQC,KACRsH,GACF1H,QACAwG,UAAWrG,EAAMqG,UACjBc,SAAUnH,EAAMmH,SAOlB,OAJA7H,SAAQ8C,QAAQpC,EAAMH,KAAM,SAASS,EAAQP,GAC3CwH,EAAK1H,KAAKE,GAAOO,EAAO4B,WAGnB5C,QAAQ4C,OAAOqF,GAOxB,QAASG,KACP,GAAI1H,GAAQC,IAEZD,GAAMH,QACNG,EAAMsD,WAQR,QAASyB,GAAIvE,GACX,GAAIR,GAAQC,IAMZ,OAJuBU,UAAnBX,EAAMH,KAAKW,KACbR,EAAMH,KAAKW,GAAM,GAAIR,GAAM4C,QAAQyE,OAAO7G,GAAIA,EAAID,KAAMP,EAAM4C,QAAQyE,MAAM1E,UAAU/C,OAAOW,OAAO,GAAM,IAGrGP,EAAMH,KAAKW,GAQpB,QAASkB,GAAMsD,GACb,GAAIhF,GAAQC,IAEZ,OAAOD,GAAMmH,SAASQ,IAAI3H,EAAM+E,IAAIe,KAAK9F,IAO3C,QAAS4H,GAAYC,GACnB,GAAI7H,GAAQC,IAEZD,GAAMmH,YAEN7H,QAAQ8C,QAAQyF,EAAO,SAASC,GAC1BxI,QAAQyI,SAASD,IAAYhF,EAAMJ,SAASoF,GAC9C9H,EAAMmH,SAAS1F,KAAKqG,GACXxI,QAAQyG,SAAS+B,IAAYhF,EAAMJ,SAASoF,EAAQjI,KAAKW,KAClER,EAAMmH,SAAS1F,KAAKqG,EAAQjI,KAAKW,MAWvC,QAAS2E,GAAO3E,GACd,GAAIR,GAAQC,IAQZ,OANuBU,UAAnBX,EAAMH,KAAKW,KACbR,EAAMsD,QAAQ9C,GAAMR,EAAMH,KAAKW,SACxBR,GAAMH,KAAKW,GAClBR,EAAMkH,MAAQ,GAGTlH,EAAMsD,QAAQ9C,GASvB,QAASgF,GAAahF,GACpB,GAAIR,GAAQC,IAQZ,OAN0BU,UAAtBX,EAAMsD,QAAQ9C,KAChBR,EAAMH,KAAKW,GAAMR,EAAMsD,QAAQ9C,SACxBR,GAAMsD,QAAQ9C,GACrBR,EAAMkH,MAAQ,GAGTlH,EAAMH,KAAKW,GAQpB,QAAS+E,GAAa/E,GACpB,GAAIR,GAAQC,WAELD,GAAMsD,QAAQ9C,GAnLvB,MAbAyG,GAAoBtE,UAAUoC,IAAMA,EACpCkC,EAAoBtE,UAAUjB,MAAQA,EACtCuF,EAAoBtE,UAAUiF,YAAcA,EAC5CX,EAAoBtE,UAAUyE,YAAcA,EAE5CH,EAAoBtE,UAAU2E,SAAWA,EACzCL,EAAoBtE,UAAUT,OAASA,EACvC+E,EAAoBtE,UAAU+E,MAAQA,EAEtCT,EAAoBtE,UAAUwC,OAASA,EACvC8B,EAAoBtE,UAAU6C,aAAeA,EAC7CyB,EAAoBtE,UAAU4C,aAAeA,EAEtC0B,EArBT3H,QAAQC,OAAO,mBACdqD,QAAQ,sBAAuBoE,GHyuChCA,EAA2BpF,SAAW,QAAS,WI5uCjD,WACE,YAEAtC,SAAQC,OAAO,mBACZC,SAAS,eAAgB,SAASkB,EAAQsH,EAAcC,GACvD,GAAIC,GACAC,CACJC,QAAOC,eAAe3H,EAAQsH,GAC5BjD,IAAK,WAOH,MANKoD,KAEHA,GAAO,EACPD,EAASD,EAASK,KAAK5H,IAGlBwH,GAITK,YAAY,EACZC,cAAc,SCrBtB,WACE,YAEAlJ,SAAQC,OAAO,mBACZC,SAAS,cAAe,SAASiJ,GAChC,MAAOA,GAAIC,QAAQ,kBAAmB,SAASC,mBCLrD,WACE,YAEArJ,SAAQC,OAAO,mBAAmB+E,QAAQ,WAAY,SAASsE,GAC7DA,EAASC,UAAU,MAAO,YAAa,SAASC,GAC9C,GAAI7F,GAAK6F,CAqCT,OAnCA7F,GAAG8F,WAAa9F,EAAG8F,YAAc,SAAoBtF,EAAUuF,EAAkBC,GAe/E,QAASC,GAAKvE,GACZ,MAAO1B,GAAGkG,KAAKxE,GACZD,KAAK,SAASrC,GAKb,MAJI/C,SAAQ8J,WAAWJ,IACrBA,EAAiB3G,IAGVgH,SAAS,EAAMhH,MAAOA,IAGjC,SAASiH,GAKP,MAJIhK,SAAQ8J,WAAWH,IACrBA,EAAiBK,IAGVD,SAAS,EAAOC,OAAQA,KAzBvC,GAAIC,GAAUjK,QAAQiC,QAAQkC,QAQ9B,OANAnE,SAAQ8C,QAAQqB,EAAU,SAASkB,EAAS5E,GACrCwJ,EAAQ/E,eAAezE,KAC1BwJ,EAAQxJ,GAAOmJ,EAAKvE,MAIjB1B,EAAGuG,IAAID,IAsBTtG,WC1Cb,WACE,YAKA,SAASwG,GAAwCC,EAAqCzG,EAAI7C,GASxF,QAASuJ,GAAiCC,GACxC,GAAI5J,GAAQC,IAEZD,GAAM6J,SAENH,EAAoCpB,KAAKtI,EAAO4J,GAEhDtK,QAAQ8C,QAAQwH,EAAkB,SAASE,GACzCA,EAAgBC,aAAe/J,IAInC,QAASyE,GAAYH,GA4BnB,QAAS0E,GAAiB3G,GACxB4B,EAASE,QAAQ6F,KAAM,kBAAmBnK,KAAMwC,IAGlD,QAAS4G,GAAiBK,GACxBrF,EAASE,QAAQ6F,KAAM,kBAAmBxH,OAAQ8G,IAGpD,QAASW,GAASC,GAChBlK,EAAM6J,MAAMtF,GAAUvE,EAAM6J,MAAMtF,OAClCvE,EAAM6J,MAAMtF,GAAQ8E,SAAU,EAE9B/J,QAAQ8C,QAAQ8H,EAAS,SAAShC,GAC5BA,EAAOmB,WAAY,IACrBrJ,EAAM6J,MAAMtF,GAAQ8E,SAAU,KAIlC/J,QAAQ8C,QAAQpC,EAAM4J,iBAAkB,SAASE,GAC/CxK,QAAQ8C,QAAQ0H,EAAgBK,WAAW5F,GAAS,SAAS6F,GAC3DnG,EAASE,QAAQ6F,KAAM,QAASxH,OAAQ4H,EAAK9B,KAAKtI,EAAOsE,EAAQ4F,QAIrE,IAAIrK,GACA2C,IAEJlD,SAAQ8C,QAAQ8H,EAAS,SAAShC,GAC5BA,EAAOmB,WAAY,EACrBxJ,EAAOqI,EAAO7F,MAEdG,EAAOf,KAAKyG,EAAOoB,UAInB9G,EAAOsE,OAAS,EAClB7C,EAASC,QAAQrE,KAAMA,EAAMmE,OAAQA,EAAQxB,OAAQA,IAErDyB,EAASL,SAAS/D,KAAMA,EAAMmE,OAAQA,EAAQxB,OAAQA,IAI1D,QAASwB,KACP1E,QAAQ8C,QAAQpC,EAAM4J,iBAAkB,SAASE,GAC/CxK,QAAQ8C,QAAQ0H,EAAgBO,YAAY9F,GAAS,SAAS6F,GAC5DnG,EAASE,QAAQ6F,KAAM,SAAUxH,OAAQ4H,EAAK9B,KAAKtI,EAAOsE,SAKhE,QAASgG,GAAS9H,GAChBpC,EAAKQ,MAAM,8CAEXqD,EAASC,QAAQF,OAAQ1E,QAAQiL,KAAM/H,OAAQA,IAhFjD,GAAIxC,GAAQC,KACRwD,KACAQ,EAAWhB,EAAGmB,QACdG,EAASD,EAAOC,MAgFpB,OA9EAmF,GAAoC/G,UAAU8B,YAAY6D,KAAKtI,EAAOsE,GAEtEhF,QAAQ8C,QAAQpC,EAAM4J,iBAAkB,SAASE,GAC/CxK,QAAQ8C,QAAQ0H,EAAgBU,WAAWjG,GAAS,SAAS6F,GAC3DnG,EAASE,QAAQ6F,KAAM,QAASnK,KAAMuK,EAAK9B,KAAKtI,EAAOsE,SAI3DhF,QAAQ8C,QAAQpC,EAAM4J,iBAAkB,SAASE,GAC/CxK,QAAQ8C,QAAQ0H,EAAgBW,YAAYlG,GAAS,SAAS6F,GAC5DnG,EAASE,QAAQ6F,KAAM,SAAUnK,KAAMuK,EAAK9B,KAAKtI,EAAOsE,SAI5DhF,QAAQ8C,QAAQpC,EAAM4J,iBAAkB,SAASE,GAC/CxK,QAAQ8C,QAAQ0H,EAAgBY,qBAAqBnG,GAAS,SAAS6F,GACrE3G,EAAShC,KAAK2I,EAAK9B,KAAKtI,EAAOsE,QAInCrB,EAAG8F,WAAWtF,EAAUuF,EAAkBC,GAAkBvE,KAAKuF,EAAUK,GA0DpErG,EAASU,QAlGlB,MALAgF,GAAiChH,UAAYyF,OAAOuC,OAAOjB,EAAoC/G,WAC/FgH,EAAiChH,UAAUiI,YAAcjB,EAEzDA,EAAiChH,UAAU8B,YAAcA,EAElDkF,EAVTrK,QAAQC,OAAO,mBACdqD,QAAQ,mCAAoC6G,GPm7C7CA,EAAwC7H,SAAW,sCAAuC,KAAM,WQv7ClG,WACE,YAKA,SAASiJ,GAA2CzK,GAMlD,QAASsJ,GAAoCE,GAC3C,GAAI5J,GAAQC,IAEZD,GAAM4J,iBAAmBA,EAG3B,QAASnF,GAAYH,GACnB,GAAItE,GAAQC,IAEZG,GAAKgB,MAAM,qBAAsBpB,EAAM4C,QAAQyE,MAAM1E,UAAU/C,OAAOW,KAAM+D,GAEtD3D,SAAlB2D,EAAOC,QACTnE,EAAKQ,MAAM,qCAAuC0D,GAdtD,MAFAoF,GAAoC/G,UAAU8B,YAAcA,EAErDiF,EAPTpK,QAAQC,OAAO,mBACdqD,QAAQ,sCAAuCiI,GRk9ChDA,EAA2CjJ,SAAW,WSt9CxD,WACE,YAKA,SAASkJ,GACPC,EACA5K,EACA6K,EACA/H,EACAgI,GAQA,QAASC,GAAkCC,GAkBzC,QAAS3B,GAAIlF,GACX,MAAO2G,IACLG,OAAQ,MACRC,QAASA,EACTF,IAAKA,EACLnG,OAAQV,EAAOU,aACdN,KAAK4G,EAAaC,GAGvB,QAASxG,GAAIT,GACX,MAAO2G,IACLG,OAAQ,MACRC,QAASA,EACTF,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,GACpCwE,OAAQV,EAAOU,aACdN,KAAK4G,EAAaC,GAGvB,QAASpG,GAAOb,GACd,MAAO2G,IACLG,OAAQ,SACRC,QAASA,EACTF,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,KACnCkE,KAAK4G,EAAaC,GAGvB,QAAStK,GAAOqD,GACd,GAAIL,GAAWhB,EAAGmB,OA6BlB,OA3BIE,GAAOhE,OAAOgD,WAAY,EAC5BW,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,8BACvBvE,SAAlB2D,EAAO5D,QAAkDC,SAA1B2D,EAAO5D,OAAOb,KAAKW,GAC3DyD,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,uDAClB,WAAvBZ,EAAO1E,OAAOW,KACvB0K,GACEG,OAAQ,SACRC,QAASA,EACTF,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,GAAK,kBAAoB8D,EAAOvE,MACnE2E,KAAK4G,EAAaC,GAAY7G,KAAKT,EAASL,QAASK,EAASC,QACjC,YAAvBI,EAAO1E,OAAOW,OACDI,SAAlB2D,EAAO5D,OACTuK,GACEG,OAAQ,MACRC,QAASA,EACTxL,MAAOA,SACPsL,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,GAAK,kBAAoB8D,EAAOvE,MACnE2E,KAAK4G,EAAaC,GAAY7G,KAAKT,EAASL,QAASK,EAASC,QAEjE+G,GACEG,OAAQ,SACRC,QAASA,EACTF,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,GAAK,kBAAoB8D,EAAOvE,IAAM,IAAMuE,EAAO5D,OAAOb,KAAKW,KAClGkE,KAAK4G,EAAaC,GAAY7G,KAAKT,EAASL,QAASK,EAASC,SAI9DD,EAASU,QAGlB,QAASlE,GAAK6D,GACZ,GAAIL,GAAWhB,EAAGmB,OAsBlB,OApBIE,GAAOhE,OAAOgD,WAAY,EAC5BW,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,8BACvBvE,SAAlB2D,EAAO5D,QAAkDC,SAA1B2D,EAAO5D,OAAOb,KAAKW,GAC3DyD,EAASC,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,qDAClB,WAAvBZ,EAAO1E,OAAOW,KACvB0K,GACEG,OAAQ,MACRC,QAASA,EACTxL,MAAOA,KAAMM,EAAiCE,WAAWiE,EAAO5D,SAChEyK,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,GAAK,kBAAoB8D,EAAOvE,MACnE2E,KAAK4G,EAAaC,GAAY7G,KAAKT,EAASL,QAASK,EAASC,QACjC,YAAvBI,EAAO1E,OAAOW,MACvB0K,GACEG,OAAQ,OACRC,QAASA,EACTxL,MAAOA,MAAOM,EAAiCE,WAAWiE,EAAO5D,UACjEyK,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,GAAK,kBAAoB8D,EAAOvE,MACnE2E,KAAK4G,EAAaC,GAAY7G,KAAKT,EAASL,QAASK,EAASC,QAG5DD,EAASU,QAGlB,QAASZ,GAAOO,GACd,MAAO2G,IACLG,OAAQ,MACRC,QAASA,EACTF,IAAKA,EAAM,IAAM7G,EAAOhE,OAAOT,KAAKW,GACpCX,KAAMyE,EAAOhE,OAAOqD,KAAKzB,WACxBwC,KAAK4G,EAAaC,GAGvB,QAASC,GAAIlH,GACX,MAAO2G,IACLG,OAAQ,OACRC,QAASA,EACTF,IAAKA,EAAM,IACXtL,KAAMyE,EAAOhE,OAAOqD,KAAKzB,WACxBwC,KAAK4G,EAAaC,GAGvB,QAASD,GAAYzH,GACnB,MAAOZ,GAAGW,QAAQC,EAAShE,MAG7B,QAAS0L,GAAW1H,GAclB,QAAS4H,KACPxH,EAASC,QAAQe,OAAQpB,EAASoB,OAAQC,WAAY,sBAGxD,QAASwG,KACPzH,EAASC,QAAQe,OAAQpB,EAASoB,OAAQC,WAAY,2BAlBxD,GAAIjB,GAAWhB,EAAGmB,OAWlB,OATwB,KAApBP,EAASoB,OACXgG,GACEG,OAAQ,MACRD,IAAK,0DACJzG,KAAK+G,EAAqBC,GAE7BzH,EAASC,QAAQe,OAAQpB,EAASoB,OAAQC,WAAYrB,EAASqB,aAG1DjB,EAASU,QAxIlB,GAAI3E,GAAQC,KACRoL,GACFM,OAAU,2BACVC,eAAgB,2BAGlBb,GAAuCzC,KAAKtI,GAE5CA,EAAM8J,gBAAgB,SAAU3E,GAChCnF,EAAM8J,gBAAgB,SAAU7I,GAChCjB,EAAM8J,gBAAgB,OAAQrJ,GAC9BT,EAAM8J,gBAAgB,SAAU/F,GAChC/D,EAAM8J,gBAAgB,MAAO0B,GAC7BxL,EAAM8J,gBAAgB,MAAON,GAC7BxJ,EAAM8J,gBAAgB,MAAO/E,GAC7B/E,EAAM8J,gBAAgB,UAAW/E,GAlBnC,MAHAmG,GAAkCvI,UAAYyF,OAAOuC,OAAOI,EAAuCpI,WACnGuI,EAAkCvI,UAAUiI,YAAcM,EAEnDA,EAdT5L,QAAQC,OAAO,wBAAyB,oBACvCqD,QAAQ,oCAAqCkI,GT6nD9CA,EAAyClJ,SAAW,yCAA0C,mCAAoC,cAAe,KAAM,YUjoDzJ,WACE,YAKA,SAASiK,KASP,QAASd,KACP,GAAI/K,GAAQC,KACR6L,GACF,MACA,OACA,MACA,MACA,QACA,SACA,SACA,mBACA,OACA,iBACA,SACA,UAGF9L,GAAM6J,SAEN7J,EAAMwK,cACNxK,EAAMyK,eACNzK,EAAM0K,wBACN1K,EAAMmK,cACNnK,EAAMqK,eAENrK,EAAM+L,WAENzM,QAAQ8C,QAAQ0J,EAAU,SAASE,GACjChM,EAAMwK,WAAWwB,MACjBhM,EAAMyK,YAAYuB,MAClBhM,EAAM0K,qBAAqBsB,MAC3BhM,EAAMmK,WAAW6B,MACjBhM,EAAMqK,YAAY2B,MAClBhM,EAAM6J,MAAMmC,IACVC,SAAS,EACT5C,SAAS,KAKf,QAAS6C,GAAM3H,EAAQ0D,GACrB,GAAIjI,GAAQC,IAEZD,GAAMwK,WAAWjG,GAAQ9C,KAAKwG,GAGhC,QAASjE,GAAOO,EAAQ0D,GACtB,GAAIjI,GAAQC,IAEZD,GAAMqK,YAAY9F,GAAQ9C,KAAKwG,GAGjC,QAASkE,GAAc5H,EAAQ0D,GAC7B,GAAIjI,GAAQC,IAEZD,GAAMyK,YAAYlG,GAAQ9C,KAAKwG,GAGjC,QAASmE,GAAa7H,EAAQ0D,GAC5B,GAAIjI,GAAQC,IAEZD,GAAMmK,WAAW5F,GAAQ9C,KAAKwG,GAGhC,QAAS6B,GAAgBvF,EAAQ0D,GAC/B,GAAIjI,GAAQC,IAEZD,GAAM0K,qBAAqBnG,GAAQ9C,KAAKwG,GArE1C,MANA8C,GAAuCpI,UAAU0J,OAASF,EAC1DpB,EAAuCpI,UAAU2J,MAAQF,EACzDrB,EAAuCpI,UAAUuJ,MAAQA,EACzDnB,EAAuCpI,UAAUqB,OAASA,EAC1D+G,EAAuCpI,UAAUmH,gBAAkBA,EAE5DiB,EAVTzL,QAAQC,OAAO,mBACdqD,QAAQ,yCAA0CiJ,MCJrD,WACE,YAKA,SAASU,GACPxB,EACAyB,EACAvJ,GAQA,QAASwJ,GAAmCC,GAoC1C,QAASC,KACP,GAAIpM,GAAOP,EAAM+J,aAAanH,QAAQhD,OAAOW,IAC7C,OAAO0C,GAAGkG,KAAKqD,EAAQI,aAAaC,QAAQH,EAAS,IAAMnM,IAG7D,QAASmH,KACP,GAAInH,GAAOP,EAAM+J,aAAanH,QAAQhD,OAAOW,IAC7CiM,GAAQI,aAAaE,WAAWJ,EAAS,IAAMnM,GAGjD,QAASwM,KACP,GAAIxM,GAAOP,EAAM+J,aAAanH,QAAQhD,OAAOW,KACzC+E,EAAQtF,EAAM+J,aAAanH,QAAQ0C,KACvCkH,GAAQI,aAAaI,QAAQN,EAAS,IAAMnM,EAAM+E,EAAMpD,UAhD1D,GAAIlC,GAAQC,IAEZyM,GAASA,GAAU,iBAEnB1M,EAAMiN,gBAAkBF,EAExBhC,EAAuCzC,KAAKtI,GAE5CA,EAAM8J,gBAAgB,OAAQ6C,GAE9B3M,EAAMkM,MAAM,QAASxE,GACrB1H,EAAMkM,MAAM,SAAUa,GACtB/M,EAAMkM,MAAM,UAAWa,GACvB/M,EAAMkM,MAAM,SAAUa,GACtB/M,EAAMkM,MAAM,mBAAoBa,GAChC/M,EAAMkM,MAAM,OAAQa,GACpB/M,EAAMkM,MAAM,iBAAkBa,GAC9B/M,EAAMkM,MAAM,SAAUa,GACtB/M,EAAMkM,MAAM,MAAOa,GACnB/M,EAAMgE,OAAO,MAAO+I,GACpB/M,EAAMgE,OAAO,MAAO+I,GAEpB/M,EAAMgE,OAAO,OAAQ+I,GACrB/M,EAAMgE,OAAO,QAAS+I,GACtB/M,EAAMgE,OAAO,SAAU+I,GACvB/M,EAAMgE,OAAO,UAAW+I,GACxB/M,EAAMgE,OAAO,SAAU+I,GACvB/M,EAAMgE,OAAO,mBAAoB+I,GACjC/M,EAAMgE,OAAO,OAAQ+I,GACrB/M,EAAMgE,OAAO,iBAAkB+I,GAC/B/M,EAAMgE,OAAO,SAAU+I,GACvB/M,EAAMgE,OAAO,MAAO+I,GACpB/M,EAAMgE,OAAO,MAAO+I,GACpB/M,EAAMgE,OAAO,MAAO+I,GApCtB,MAHAN,GAAmC9J,UAAYyF,OAAOuC,OAAOI,EAAuCpI,WACpG8J,EAAmC9J,UAAUiI,YAAc6B,EAEpDA,EAZTnN,QAAQC,OAAO,yBAA0B,oBACxCqD,QAAQ,qCAAsC2J,GX8xD/CA,EAA0C3K,SAAW,yCAA0C,UAAW,SYlyD5G,WACE,YAKA,SAASsL,GAA4B9M,EAAMX,EAAW0N,GAIpD,QAASC,GAAqBxN,GAC5B,GAAII,GAAQC,KACRoN,EAAUzN,EAAOyN,WACrBzN,GAAOyN,QAAUA,EACjBA,EAAQtI,IAAMnF,EAAOyN,QAAQtI,QAC7BsI,EAAQ7D,IAAM5J,EAAOyN,QAAQ7D,QAE7BxJ,EAAMgF,QACJD,OACAyE,QAGFlK,QAAQ8C,QAAQxC,EAAOyB,cAAe,SAASiM,EAAYC,GACzD,GAAIC,GAAgB,GAAIL,GAAyBG,EAAYC,EAAU3N,EAAOW,KAC9EX,GAAOyB,cAAckM,GAAYC,EAC7BA,EAAcC,YAAa,IAC7BJ,EAAQtI,IAAItD,KAAK8L,GACU,WAAvBC,EAAcjN,MAChB8M,EAAQ7D,IAAI/H,KAAK8L,MAKvBjO,QAAQoO,OAAO1N,EAAOJ,GAElByN,EAAQtI,IAAI+B,OAAS,IACvB9G,EAAMgF,OAAOD,IAAIsI,QAAUA,EAAQtI,IAAI4I,KAAK,MAG1CN,EAAQ7D,IAAI1C,OAAS,IACvB9G,EAAMgF,OAAOwE,IAAI6D,QAAUA,EAAQ7D,IAAImE,KAAK,MAhChD,MAAOP,GALT9N,QAAQC,OAAO,mBACdqD,QAAQ,uBAAwBsK,GZ80DjCA,EAA4BtL,SAAW,OAAQ,YAAa,+Bal1D9D,WACE,YAKA,SAASgM,GAAgCxN,EAAMX,GAI7C,QAAS0N,GAAyBG,EAAYC,EAAUhN,GACtD,GAAIP,GAAQC,IAERX,SAAQyI,SAASuF,IACnBtN,EAAMc,MAAQrB,EAAUoO,OAAON,GAC/BvN,EAAMO,KAAO+M,EACbtN,EAAMa,aAAc,EACpBb,EAAM4F,WAAarF,IAEKI,SAApB2M,EAAW/M,MACbH,EAAKQ,MAAM,kCAAmC0M,EAAYC,GAGpC,YAApBD,EAAW/M,MAA0C,WAApB+M,EAAW/M,MAC9CH,EAAKQ,MAAM,mCAAoC0M,EAAW/M,KAAM,8BAGlEP,EAAMc,MAAQwM,EAAWxM,OAASrB,EAAUoO,OAAON,GACnDvN,EAAMO,KAAO+M,EAAW/M,KACxBP,EAAMa,YAAcyM,EAAWzM,cAAe,EAG5Cb,EAAM4F,WADsBjF,SAA1B2M,EAAW1H,WACqB,YAAf5F,EAAMO,KAAqBd,EAAUqO,SAASvN,GAAQA,EAEtD+M,EAAW1H,WAGhC5F,EAAMyN,SAAWH,EAAWG,WAAY,GA7B5C,MAAON,GALT7N,QAAQC,OAAO,mBACdqD,QAAQ,2BAA4BgL,Gb23DrCA,EAAgChM,SAAW,OAAQ,gBc/3DrD,WACE,YAKA,SAASmM,GAAoB7K,EAA6BkK,EAAsBhN,GAM9E,QAAS4N,GAAaC,EAAW5I,GAC/B,GAAIgC,GAAQ,SAASxH,EAAMwG,EAAWlD,GACpC,GAAInD,GAAQC,IAERJ,GAAKU,OAASP,EAAMJ,OAAOW,MAC7BH,EAAKQ,MAAM,4CAA6Cf,EAAKU,KAAM,eAAgBP,EAAMJ,OAAOW,MAGlG2C,EAA4BoF,KAAKtI,EAAOH,EAAMwG,EAAWlD,GAEzDnD,EAAM2D,KAAK5B,OAAS/B,EAgBtB,OAbAqH,GAAM1E,UAAYyF,OAAOuC,OAAOzH,EAA4BP,WAC5D0E,EAAM1E,UAAUiI,YAAcvD,EAE9BA,EAAM1E,UAAU/C,OAASqO,EACzB5G,EAAM1E,UAAU0C,cAAgBA,EAChCgC,EAAM1E,UAAU8B,YAAcY,EAAc0E,aAAatF,YAAYqB,KAAKT,EAAc0E,cAExFzK,QAAQ8C,QAAQ6L,EAAUC,UAAW,SAASC,EAAcC,GAC1D/G,EAAM1E,UAAUyL,GAAoB,WAClC,MAAOD,GAAaE,MAAMpO,KAAMqO,cAI7BjH,EA9BT,OACEvG,MAAOkN,GANX1O,QAAQC,OAAO,mBACdqD,QAAQ,sBAAuBmL,Gdw6DhCA,EAAoBnM,SAAW,8BAA+B,uBAAwB,We56DxF,WACE,YAKA,SAAS2M,GACPR,EACAX,EACAnG,EACAuH,EACA1L,EACAC,EACA3C,EACA6C,GAgBA,QAASwL,GAAsB7O,EAAQmK,GAwBrC,QAASnG,GAAQC,GACfd,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,gBAAiB,WAAYsD,GAC/E7D,EAAMsF,MAAMgC,SAASzD,EAAShE,MAC9BG,EAAM0O,aAAc,EAEpB7K,EAASG,SAGX,QAASE,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,gBAAiB,WAAYsD,GAC/EA,EAASG,SACThE,EAAM0O,aAAc,EAGtB,QAASvK,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,gBAAiB,SAAUsD,GAtC/E,GAAI7D,GAAQC,KACRqE,GACFC,OAAQ,OAGVvE,GAAMJ,OAAS,GAAIwN,GAAqBxN,GACxCI,EAAMsF,MAAQ,GAAI2B,GAAoBjH,GAEtCA,EAAM+J,aAAeA,EACrB/J,EAAM+J,aAAanH,QAAU5C,EAE7BA,EAAMqH,MAAQ0G,EAAoBjN,MAChCd,EAAMJ,OACNI,GAGFA,EAAM0O,aAAc,EACpB1O,EAAMO,KAAOP,EAAMJ,OAAOW,KAE1BwJ,EAAanH,QAAU5C,EAEvBA,EAAM+J,aAAatF,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GA0B/D,QAASY,GAAIvE,GACX,GAAIR,GAAQC,IAEZ,OAAK6C,GAAMJ,SAASlC,GAIbR,EAAMsF,MAAMP,IAAIvE,GAAIoE,UAHlB3B,EAAGiB,QAAQ1B,SAAUyC,OAAQ,EAAGC,WAAY,2BAWvD,QAASsE,GAAIxE,GACX,GAAIhF,GAAQC,IACZ+E,GAASA,KAET,IAAIwC,GAAa,GAAIgH,GACnBxO,EACAV,QAAQoO,OAAO1I,EAAQhF,EAAMJ,OAAOoF,OAAOwE,KAK7C,OAFAhC,GAAWmH,QAEJnH,EAST,QAASrC,GAAO3E,GACd,GAAIR,GAAQC,KACRK,EAASN,EAAMsF,MAAMH,OAAO3E,EAEhC,OAAOF,GAAO6E,SAOhB,QAASyJ,GAAW7O,EAAKW,GACvB,GAAIV,GAAQC,KACRoB,IAEJ,IAAYV,SAARZ,GAAgCY,SAAXD,EAAsB,CAC7C,GAAId,GAASI,EAAMJ,OAAOG,EAEN,YAAhBH,EAAOW,KACTc,EAActB,IACZF,KAAMa,EAAOb,KAAKW,IAEK,YAAhBZ,EAAOW,MAChBH,EAAKyO,KAAK,qEAId,GAAIhP,IACFU,KAAMP,EAAMO,KACZC,GAAIsC,EAAMgM,WACV9M,cACAX,cAAeA,GAGbP,EAAQ,GAAId,GAAMqH,MAAMxH,GAAM,GAAO,EAEzC,OAAOiB,GAOT,QAAS4G,KAaP,QAAS9D,GAAQC,GACfd,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,iBAAkB,WAAYsD,GAChFA,EAASG,SAETC,EAASL,QAAQC,GAGnB,QAASK,GAAOL,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,iBAAkB,WAAYsD,GAChFA,EAASG,SAETC,EAASC,OAAOL,GAGlB,QAASM,GAAON,GACdd,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,iBAAkB,SAAUsD,GAE9EI,EAASE,OAAON,GA7BlB,GAAI7D,GAAQC,KACRgE,EAAWhB,EAAGmB,QACdE,GACFC,OAAQ,QAOV,OAJAvE,GAAMsF,MAAMoC,QAEZ1H,EAAM+J,aAAatF,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GAEtDF,EAhJT,MAPAwK,GAAsB9L,UAAUoC,IAAMA,EACtC0J,EAAsB9L,UAAU6G,IAAMA,EACtCiF,EAAsB9L,UAAUwC,OAASA,EACzCsJ,EAAsB9L,UAAUiM,WAAaA,EAE7CH,EAAsB9L,UAAU+E,MAAQA,EAEjC+G,EApBTnP,QAAQC,OAAO,mBACdqD,QAAQ,wBAAyB2L,GfymElCA,EAA6B3M,SAAW,sBAAuB,uBAAwB,sBAAuB,2BAA4B,QAAS,aAAc,OAAQ,SgB7mE3K,WACE,YAKA,SAASmN,GACPhM,EACAC,EACAC,GAcA,QAASuL,GAAyB5L,EAASoC,GAsBzC,QAASG,GAAO6J,EAAO/J,EAAQ3E,GAC7B,GAAIoB,EAEW,cAAXuD,IAEFvD,EAAQ1B,EAAMH,KAAK2B,QAAQlB,GACvBoB,EAAQ,KACV1B,EAAMH,KAAK8B,OAAOD,EAAO,GACzB1B,EAAM4C,QAAQ0C,MAAMsC,YAAY5H,EAAMH,QA7B5C,GAAIG,GAAQC,IAEZD,GAAM4C,QAAUA,EAChB5C,EAAMO,KAAOqC,EAAQhD,OAAOW,KAC5BP,EAAMgF,OAASA,EAEfhF,EAAMwC,QACJsH,iBACEtG,KAAM,kBACNyL,YAAa,gCACbzM,YAIJxC,EAAMY,OAAQ,EAEdZ,EAAMH,KAAOG,EAAM4C,QAAQ0C,MAAM5D,MAAM1B,EAAMgF,QAC7ChF,EAAAA,iBAAqB,EAErB+C,EAAWmM,IAAI,kBAAoBlP,EAAMO,KAAO,iBAAkB4E,GAqBpE,QAASJ,GAAIvE,GACX,GAAIR,GAAQC,IAEZ,OAAOD,GAAM4C,QAAQmC,IAAIvE,GAO3B,QAASmO,KAaP,QAAS/K,GAAQsG,GACfnH,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,oBAAqB,WAAYP,EAAOkK,GAE1FlK,EAAMwC,OAAOsH,gBAAgBtH,UAC7BxC,EAAMH,KAAOgF,EAASC,eAAeoF,EAAQrK,MAC7CG,EAAMY,OAAQ,EAEdZ,EAAMqG,UAAYC,KAAKC,MACvBvG,EAAAA,iBAAqB,EAErBA,EAAM4C,QAAQ0C,MAAMsC,YAAY5H,EAAMH,MAEtCqK,EAAQlG,SAERC,EAASL,QAAQ5D,GAGnB,QAASkE,GAAOgG,GACdnH,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,oBAAqB,WAAYP,EAAOkK,GAE1FlK,EAAMwC,OAAOsH,gBAAgBtH,OAAS0H,EAAQ1H,OAC9CxC,EAAMY,OAAQ,EAEdsJ,EAAQlG,SAERC,EAASC,OAAOgG,GAGlB,QAAS/F,GAAO+F,GACdnH,EAAWe,MAAM,kBAAoB9D,EAAMO,KAAO,oBAAqB,SAAUP,EAAOkK,GAExFjG,EAASE,OAAO+F,GA3ClB,GAAIlK,GAAQC,KACRgE,EAAWhB,EAAGmB,QACdS,EAAW7B,EAAU+B,IAAI,YACzBT,GACFC,OAAQ,MACRS,OAAQhF,EAAMgF,OAKhB,OAFAhF,GAAM4C,QAAQmH,aAAatF,YAAYH,GAAQI,KAAKd,EAASM,EAAQC,GAE9DF,EAASU,QArElB,MAJA6J,GAAyB7L,UAAUgM,MAAQA,EAC3CH,EAAyB7L,UAAUiC,QAAU+J,EAC7CH,EAAyB7L,UAAUoC,IAAMA,EAElCyJ,EAbTlP,QAAQC,OAAO,mBACdqD,QAAQ,2BAA4BmM,GhBsuErCA,EAAgCnN,SAAW,aAAc,YAAa,SiB1uExE,WACE,YAKA,SAASuN,KAKP,QAASC,GAAehP,EAAMqO,GAe5B,QAASY,KACP,MAAOC,GAGT,QAASC,KACP,MAAOC,GAGT,QAASC,GAAW7P,EAAQkK,GAC1B,GAAIlH,GAAU,GAAI6L,GAAsB7O,EAAQkK,EAEhDwF,GAAO1P,EAAOW,MAAQqC,EACtB4M,EAAM/N,KAAK7B,EAAOW,MAGpB,QAASwG,GAAWxG,GAClB,MAAO+O,GAAO/O,GAGhB,QAASoD,GAAKpD,GAKZ,MAJqBI,UAAjB2O,EAAO/O,IACTH,EAAKQ,MAAM,sCAAyCL,EAAO,mCAGtD+O,EAAO/O,GAAM4C,MAAMQ,KAG5B,QAASoB,GAAIxE,EAAMC,GAKjB,MAJqBG,UAAjB2O,EAAO/O,IACTH,EAAKQ,MAAM,sCAAyCL,EAAO,mCAGtD+O,EAAO/O,GAAMwE,IAAIvE,GAG1B,QAAS2E,GAAO5E,EAAMC,GAKpB,MAJqBG,UAAjB2O,EAAO/O,IACTH,EAAKQ,MAAM,yCAA4CL,EAAO,mCAGzD+O,EAAO/O,GAAM4E,OAAO3E,GAG7B,QAASgJ,GAAIjJ,GAKX,MAJqBI,UAAjB2O,EAAO/O,IACTH,EAAKQ,MAAM,6CAAgDL,EAAO,mCAG7D+O,EAAO/O,GAAMiJ,MAGtB,QAASkG,KACPpQ,QAAQ8C,QAAQkN,EAAQ,SAAS1M,GAC/BA,EAAQ8E,UAIZ,QAAS5C,GAAeoF,GAStB,GARgBvJ,SAAZuJ,GACF9J,EAAKQ,MAAM,0BAA4BsJ,GAGzC5K,QAAQ8C,QAAQ8H,EAAQuD,SAAU,SAAS5N,GACzCkH,EAAWlH,EAAKU,MAAM+E,MAAM8B,YAAYvH,GAAM,KAG5CP,QAAQiC,QAAQ2I,EAAQrK,MAAO,CACjC,GAAI8P,KAKJ,OAJArQ,SAAQ8C,QAAQ8H,EAAQrK,KAAM,SAASA,GACrC8P,EAAQlO,KAAKsF,EAAWlH,EAAKU,MAAM+E,MAAM8B,YAAYvH,GAAM,MAGtD8P,EAEP,MAAO5I,GAAWmD,EAAQrK,KAAKU,MAAM+E,MAAM8B,YAAY8C,EAAQrK,MAAM,GAxFzE,OACE8D,KAAMA,EACNoB,IAAKA,EACLI,OAAQA,EACRqE,IAAKA,EACLiG,WAAYA,EACZ1I,WAAYA,EACZ2I,SAAUA,EACV5K,eAAgBA,EAEhBuK,aAAcA,EACdE,eAAgBA,GAhBpB,GAAID,MACAE,IACJvP,MAAK2P,KAAOR,EjB40EZA,EAAexN,SAAW,OAAQ,yBiBl1EpCtC,QAAQC,OAAO,mBACdsQ,SAAS,WAAYV,MCJxB,WACE,YAEA7P,SAAQC,OAAO,mBACd+E,QAAA,eAAO,SAASwL,GACfA,EAAaC,cAAa","file":"angular-jsonapi.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi', ['uuid4'])\n  /* global pluralize: false */\n  .constant('pluralize', pluralize);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelValidatorService', AngularJsonAPIModelValidatorService);\n\n  function AngularJsonAPIModelValidatorService() {\n    var _this = this;\n    _this.validateForm = validateForm;\n    _this.validateField = validateField;\n\n    return this;\n\n    /**\n     * Validates form\n     * @param  {object} data Form data\n     * @return {object} Errors object indexed by keys\n     */\n    function validateForm(schema, data) {\n      var _this = this;\n\n      return {};\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(schema, key) {\n      var _this = this;\n\n      return [];\n    }\n\n    // function __validate(validator, attributeValue, attributeName) {\n    //   var errors = [];\n    //   if (angular.isArray(validator)) {\n    //     angular.forEach(validator, function(element) {\n    //       errors = errors.concat(__validate(element, attributeValue, attributeName));\n    //     });\n    //   } else if (angular.isFunction(validator)) {\n    //     var err = validator(attributeValue, attributeName);\n    //     if (angular.isArray(err)) {\n    //       errors.concat(err);\n    //     } else {\n    //       $log.error(\n    //         'Wrong validator type it should return array of errors instead of: ' +\n    //           err.toString()\n    //       );\n    //     }\n    //   } else if (angular.isString(validator)) {\n    //     if (validator === 'text' || validator === 'string') {\n    //       if (!angular.isString(attributeValue)) {\n    //         errors.push(attributeName + ' is not a string ');\n    //       }\n    //     } else if (validator === 'number' || validator === 'integer') {\n    //       if (parseInt(attributeValue).toString() !== attributeValue.toString()) {\n    //         errors.push(attributeName + ' is not a number');\n    //       }\n    //     } else if (validator === 'uuid4') {\n    //       if (!uuid4.validate(attributeValue)) {\n    //         errors.push(attributeName + ' is not a uuid4');\n    //       }\n    //     } else if (validator === 'required') {\n    //       if (attributeValue.toString().length === 0) {\n    //         errors.push(attributeName + ' is empty');\n    //       }\n    //     } else {\n    //       $log.error('Wrong validator type: ' + validator.toString());\n    //     }\n    //   } else if (angular.isObject(validator)) {\n    //     if (validator.maxlength !== undefined && attributeValue.length > validator.maxlength) {\n    //       errors.push(attributeName + ' is too long max ' + validator.maxlength);\n    //     }\n\n    //     if (validator.minlength !== undefined && attributeValue.length < validator.minlength) {\n    //       errors.push(attributeName + ' is too short min ' + validator.minlength);\n    //     }\n\n    //     if (validator.maxvalue !== undefined && parseInt(attributeValue) > validator.maxvalue) {\n    //       errors.push(attributeName + ' is too big max ' + validator.maxvalue);\n    //     }\n\n    //     if (validator.minvalue !== undefined && parseInt(attributeValue) < validator.minvalue) {\n    //       errors.push(attributeName + ' is too small min ' + validator.minvalue);\n    //     }\n    //   } else {\n    //     $log.error('Wrong validator type: ' + validator.toString());\n    //   }\n\n    //   return errors;\n    // }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelLinkerService', AngularJsonAPIModelLinkerService);\n\n  function AngularJsonAPIModelLinkerService($log) {\n    var _this = this;\n\n    _this.toLinkData = toLinkData;\n\n    _this.link = link;\n    _this.unlink = unlink;\n\n    return this;\n\n    /**\n     * Extracts data needed for relationship linking from object\n     * @param  {AngularJsonAPIModel} object Object\n     * @return {json}        Link data\n     */\n    function toLinkData(object) {\n      if (object === null) {\n        return null;\n      }\n\n      return {type: object.data.type, id: object.data.id};\n    }\n\n    /**\n     * Add target to object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be linked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function link(object, key, target, schema) {\n\n      if (target === undefined) {\n        $log.error('Can\\'t link non existing object', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (object === undefined) {\n        $log.error('Can\\'t add link to non existing object', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema === undefined) {\n        $log.error('Can\\'t add link not present in schema:', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (target !== null && schema.polymorphic === false && schema.model !== target.data.type) {\n        $log.error('This relation is not polymorphic, expected: ' + schema.model + ' instead of ' + target.data.type);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema.type === 'hasMany') {\n        return __addHasMany(object, key, target, schema);\n      } else if (schema.type === 'hasOne') {\n        return __addHasOne(object, key, target, schema);\n      }\n    }\n\n    /**\n     * Remove target from object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be unlinked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function unlink(object, key, target, schema) {\n      if (schema === undefined) {\n        $log.error('Can\\'t remove link not present in schema: ' + key);\n        return;\n      }\n\n      if (schema.type === 'hasMany') {\n        return __removeHasMany(object, key, target, schema);\n      } else if (schema.type === 'hasOne') {\n        return __removeHasOne(object, key, target, schema);\n      }\n    }\n\n    /////////////\n    // Private //\n    /////////////\n\n    function __addHasOne(object, key, target, schema) {\n      $log.debug('addHasOne', object, key, target, schema);\n\n      if (target !== null && object.relationships[key] === target) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is already linked to', object.data.type + ':' + object.data.id, 'as', key);\n        return false;\n      } else {\n        object.relationships[key] = target;\n        object.data.relationships[key].data = toLinkData(target);\n      }\n\n      return true;\n    }\n\n    function __addHasMany(object, key, target, schema) {\n      var linkData = toLinkData(target);\n      $log.debug('addHasMany', object, key, target, schema);\n\n      if (angular.isArray(object.relationships[key]) && object.relationships[key].indexOf(target) > -1) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is already linked to', object.data.type + ':' + object.data.id, 'as', key);\n        return false;\n      } else {\n        object.relationships[key] = object.relationships[key] || [];\n        object.relationships[key].push(target);\n        object.data.relationships[key].data = object.data.relationships[key].data || [];\n        object.data.relationships[key].data.push(linkData);\n      }\n\n      return true;\n    }\n\n    function __removeHasOne(object, key, target, schema) {\n      $log.debug('removeHasOne', object, key, target, schema);\n\n      if (target !== undefined && object.relationships[key] !== target) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is not linked to', object.data.type + ':' + object.data.id, 'as', key);\n        return false;\n      } else {\n        object.relationships[key] = null;\n        object.data.relationships[key].data = undefined;\n      }\n\n      return true;\n    }\n\n    function __removeHasMany(object, key, target, schema) {\n      $log.debug('removeHasMany', object, key, target, schema);\n\n      if (target === undefined) {\n        object.relationships[key] = [];\n        object.data.relationships[key].data = [];\n      } else if (object.relationships[key] === undefined) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is links with key', key, 'are undefined');\n        return;\n      } else {\n        var index = object.relationships[key].indexOf(target);\n\n        if (index === -1) {\n          // $log.warn(target.data.type + ':' + target.data.id, 'is not linked to', object.data.type + ':' + object.data.id, 'as', key);\n          return false;\n        } else {\n          object.relationships[key].splice(index, 1);\n          object.data.relationships[key].data.splice(index, 1);\n        }\n      }\n\n      return true;\n    }\n\n  }\n})();\n","!function(){\"use strict\";angular.module(\"angular-jsonapi\",[\"uuid4\"]).constant(\"pluralize\",pluralize)}(),function(){\"use strict\";function t(){function t(t,e){return{}}function e(t,e){return[]}var n=this;return n.validateForm=t,n.validateField=e,this}angular.module(\"angular-jsonapi\").service(\"AngularJsonAPIModelValidatorService\",t)}(),function(){\"use strict\";function t(t){function e(t){return null===t?null:{type:t.data.type,id:t.data.id}}function n(e,n,a,i){return void 0===a?(t.error(\"Can't link non existing object\",e,n,a,i),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):void 0===e?(t.error(\"Can't add link to non existing object\",e,n,a,i),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):void 0===i?(t.error(\"Can't add link not present in schema:\",e,n,a,i),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):null!==a&&i.polymorphic===!1&&i.model!==a.data.type?(t.error(\"This relation is not polymorphic, expected: \"+i.model+\" instead of \"+a.data.type),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",a.data.type,a),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):\"hasMany\"===i.type?o(e,n,a,i):\"hasOne\"===i.type?r(e,n,a,i):void 0}function a(e,n,a,r){return void 0===r?void t.error(\"Can't remove link not present in schema: \"+n):\"hasMany\"===r.type?s(e,n,a,r):\"hasOne\"===r.type?i(e,n,a,r):void 0}function r(n,a,r,o){return t.debug(\"addHasOne\",n,a,r,o),null!==r&&n.relationships[a]===r?!1:(n.relationships[a]=r,n.data.relationships[a].data=e(r),!0)}function o(n,a,r,o){var i=e(r);return t.debug(\"addHasMany\",n,a,r,o),angular.isArray(n.relationships[a])&&n.relationships[a].indexOf(r)>-1?!1:(n.relationships[a]=n.relationships[a]||[],n.relationships[a].push(r),n.data.relationships[a].data=n.data.relationships[a].data||[],n.data.relationships[a].data.push(i),!0)}function i(e,n,a,r){return t.debug(\"removeHasOne\",e,n,a,r),void 0!==a&&e.relationships[n]!==a?!1:(e.relationships[n]=null,e.data.relationships[n].data=void 0,!0)}function s(e,n,a,r){if(t.debug(\"removeHasMany\",e,n,a,r),void 0===a)e.relationships[n]=[],e.data.relationships[n].data=[];else{if(void 0===e.relationships[n])return;var o=e.relationships[n].indexOf(a);if(-1===o)return!1;e.relationships[n].splice(o,1),e.data.relationships[n].data.splice(o,1)}return!0}var c=this;return c.toLinkData=e,c.link=n,c.unlink=a,this}angular.module(\"angular-jsonapi\").service(\"AngularJsonAPIModelLinkerService\",t),t.$inject=[\"$log\"]}(),function(){\"use strict\";function t(t,e){function n(t){var e=this;e.data={id:t.data.id,type:t.data.type,attributes:{},relationships:{}},e.relationships={},e.parent=t,e.schema=t.schema,e.reset()}function a(){var t=this,e=angular.copy(t.data),n={};return angular.forEach(e.relationships,function(t,e){void 0!==t.data&&(n[e]=t)}),e.relationships=n,{data:e}}function r(){var t=this;return t.parent.save()}function o(){var t=this;angular.forEach(t.schema.attributes,function(e,n){t.data.attributes[n]=t.parent.data.attributes[n]||\"\"}),angular.forEach(t.schema.relationships,function(e,n){t.data.relationships[n]=t.parent.data.relationships[n]||{},t.relationships[n]=t.parent.relationships[n]}),t.errors={validation:{}}}function i(){var e,n=this;return e=t.validateForm(n.data),n.errors.validation=e,e}function s(e){var n,a=this;return n=t.validateField(a.data[e],e),a.errors.validation[e]=n,n}function c(t,n){var a=this,r=a.schema.relationships[t];return e.link(a,t,n,r)}function u(t,n){var a=this,r=a.schema.relationships[t];return e.unlink(a,t,n,r)}return n.prototype.save=r,n.prototype.reset=o,n.prototype.validate=i,n.prototype.validateField=s,n.prototype.link=c,n.prototype.unlink=u,n.prototype.toJson=a,n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIModelForm\",t),t.$inject=[\"AngularJsonAPIModelValidatorService\",\"AngularJsonAPIModelLinkerService\"]}(),function(){\"use strict\";function t(t,e,n,a,r,o,i){function s(e,n,a){var r=this;e.relationships=e.relationships||{},r.saved=void 0===n?!0:n,r.stable=void 0===a?!0:a,r[\"synchronized\"]=void 0===a?!0:a,r.removed=!1,r.loadingCount=0,r.data={relationships:{},attributes:{}},r.relationships={},angular.forEach(r.schema.relationships,function(t,e){r.relationships[e]=void 0}),r.errors={validation:{}},r.promises={},v(r,e),r.form=new t(r)}function c(){function t(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:save\",\"resolved\",r,t),r.update(r.form.data),r[\"synchronized\"]=!0,r.saved=!0,r.stable=!0,t.finish(),o.resolve(r)}function e(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:save\",\"rejected\",r,t),t.finish(),o.reject(t.errors)}function n(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:save\",\"notify\",r,t),o.notify(t.errors)}var r=this,o=i.defer(),s=!1,c={action:\"update\",object:r};r.saved===!1&&(c.action=\"add\");var u=r.form.validate();for(var l in u)u.hasOwnProperty(l)&&(s=!0);return s===!0?o.reject(u):r.synchronize(c).then(t,e,n),o.promise}function u(){var t=this;return t.form.reset()}function l(){function t(t){a.$emit(\"angularJsonAPI:\"+c.data.type+\":object:refresh\",\"resolved\",c,t),o.proccesResults(t.data),t.finish(),c[\"synchronized\"]=!0,c.stable=!0,s.resolve(t)}function e(t){a.$emit(\"angularJsonAPI:\"+c.data.type+\":object:refresh\",\"rejected\",c,t),t.finish(),s.reject(t)}function n(t){a.$emit(\"angularJsonAPI:\"+c.data.type+\":object:refresh\",\"notify\",c,t),s.notify(t)}var o=r.get(\"$jsonapi\"),s=i.defer(),c=this,u={action:\"refresh\",object:c,params:c.schema.params.get};return c.saved===!1?s.reject({errors:[{status:0,statusText:\"Can't refresh new object\"}]}):c.synchronize(u).then(t,e,n),s.promise}function d(){var t=this,e=angular.copy(t.data),n={};return angular.forEach(e.relationships,function(t,e){void 0!==t.data&&(n[e]=t)}),e.relationships=n,{data:e}}function h(){function t(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:remove\",\"resolved\",r,t),r.removed=!0,r.unlinkAll(),r.parentFactory.cache.clearRemoved(r.data.id),t.finish(),o.resolve(t)}function e(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:remove\",\"rejected\",r,t),r.parentFactory.cache.revertRemove(r.data.id),t.finish(),o.reject(t)}function n(t){a.$emit(\"angularJsonAPI:\"+r.data.type+\":object:remove\",\"notify\",r,t),o.notify(t)}var r=this,o=i.defer(),s={action:\"remove\",object:r};return r.parentFactory.cache.remove(r.data.id),r.saved===!1?o.resolve():r.synchronize(s).then(t,e,n),o.promise}function f(t){function n(t,e){var n=o.schema.relationships[e],a=n.reflection;angular.isArray(t)?angular.forEach(t,r.bind(void 0,a)):angular.isObject(t)&&r(a,t),\"hasOne\"===n.type?o.relationships[e]=null:\"hasMany\"===n.type&&(o.relationships[e]=[])}function r(t,n){function r(t){a.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"resolve\",o,t),t.finish(),s.resolve(o)}function i(t){a.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"rejected\",o,t),t.finish(),s.reject(t)}function c(t){a.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"notify\",o,t),t.finish(),s.notify(t)}var u=n.schema.relationships[t];e.unlink(n,t,o,u),n.synchronize({action:\"unlinkReflection\",object:n,target:o,key:t}).then(r,i,c)}var o=this,s=i.defer();return void 0===t?angular.forEach(o.relationships,n):n(o.relationships[t],t),s.promise}function p(t,n){function r(r){function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"resolve\",u,t),t.finish(),c.resolve(u)}function i(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"rejected\",u,t),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"notify\",u,t),t.finish(),c.notify(t)}var h=n.schema.relationships[d];a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"resolved\",u,r),e.link(u,t,n,l),e.link(n,d,u,h),u.stable=!0,r.finish(),n.synchronize({action:\"linkReflection\",schema:h,object:n,target:u,key:d}).then(o,i,s)}function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"rejected\",u,t),c.reject(t.errors),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"notify\",u,t),c.notify(t)}var c=i.defer(),u=this,l=u.schema.relationships[t],d=l.reflection,h={action:\"link\",object:u,schema:l,target:n,key:t};return void 0===n?c.reject({errors:[{status:0,statusText:\"Can't link undefined\"}]}):u.saved===!1?c.reject({errors:[{status:0,statusText:\"Can't link new object\"}]}):u.synchronize(h).then(r,o,s),c.promise}function y(t,n){function r(r){function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"resolve\",u,t),t.finish(),c.resolve(u)}function i(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"rejected\",u,t),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"notify\",u,t),t.finish(),c.notify(t)}var h=n.schema.relationships[d];a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"resolved\",u,r),e.unlink(u,t,n,l),e.unlink(n,d,u,h),u.stable=!0,r.finish(),n.synchronize({action:\"unlinkReflection\",object:n,target:u,schema:h,key:d}).then(o,i,s)}function o(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"rejected\",u,t),c.reject(t.errors),t.finish(),c.reject(t)}function s(t){a.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"notify\",u,t),c.notify(t)}var c=i.defer(),u=this,l=u.schema.relationships[t],d=l.reflection,h={action:\"unlink\",object:u,target:n,schema:l,key:t};return void 0===n?c.reject({errors:[{status:0,statusText:\"Can't unlink undefined\"}]}):u.saved===!1?c.reject({errors:[{status:0,statusText:\"Can't unlink new object\"}]}):u.synchronize(h).then(r,o,s),c.promise}function g(t){var e=this;return v(e,t)===!0?(e.reset(),e[\"synchronized\"]=!0,e.stable=!0,e.updatedAt=Date.now(),!0):!1}function v(t,a){function i(e,n){t.data.attributes[n]=a.attributes[n]}function s(e,n){var r=a.relationships[n];return void 0===r?void(t.data.relationships[n]={data:void 0}):(t.data.relationships[n]=t.data.relationships[n]||{},t.data.relationships[n].links=r.links,void(\"hasOne\"===e.type?c(t,n,e,r.data):\"hasMany\"===e.type&&(angular.isArray(r.data)&&0===r.data.length?(t.data.relationships[n].data=[],t.unlinkAll(n)):angular.forEach(r.data,c.bind(void 0,t,n,e)))))}function c(t,n,a,r){if(null===r)return void e.link(t,n,null,a);if(void 0!==r){var i=u.getFactory(r.type);if(void 0===i)return void o.error(\"Factory not found\",r.type,r);var s=i.cache.get(r.id),c=a.reflection,l=s.schema.relationships[c];e.link(t,n,s,a),c!==!1&&e.link(s,c,t,l)}}var u=r.get(\"$jsonapi\"),l=t.schema;return t.data.id=a.id,t.data.type=a.type,t.parentFactory.schema.type!==a.type?(o.error(\"Different type then factory\",t.parentFactory.schema.type,a),!1):n.validate(t.data.id)?(a.attributes=a.attributes||{},a.relationships=a.relationships||{},angular.forEach(l.attributes,i),angular.forEach(l.relationships,s),!0):(o.error(\"Invalid id\"),!1)}return s.prototype.refresh=l,s.prototype.remove=h,s.prototype.reset=u,s.prototype.save=c,s.prototype.update=g,s.prototype.link=p,s.prototype.unlink=y,s.prototype.unlinkAll=f,s.prototype.toJson=d,s}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIAbstractModel\",t),t.$inject=[\"AngularJsonAPIModelForm\",\"AngularJsonAPIModelLinkerService\",\"uuid4\",\"$rootScope\",\"$injector\",\"$log\",\"$q\"]}(),function(){\"use strict\";function t(t,e){function n(t){var e=this;e.factory=t,e.data={},e.removed={},e.size=0,e.indexIds=[]}function a(t,n){var a=this,r=t.id;return void 0===r?void e.error(\"Can't add data without id!\",t):(void 0===a.data[r]?(a.data[r]=new a.factory.Model(t,!0,n),a.size+=1):a.data[r].update(t),a.data[r])}function r(t){var e=this,n=angular.fromJson(t);angular.isObject(n)&&void 0!==n.data&&(e.updatedAt=n.updatedAt,e.indexIds=n.indexIds,angular.forEach(n.data,function(t){var n=t.data;e.addOrUpdate(n,!1)}))}function o(){var t=this,e={data:{},updatedAt:t.updatedAt,indexIds:t.indexIds};return angular.forEach(t.data,function(t,n){e.data[n]=t.toJson()}),angular.toJson(e)}function i(){var t=this;t.data={},t.removed={}}function s(t){var e=this;return void 0===e.data[t]&&(e.data[t]=new e.factory.Model({id:t,type:e.factory.Model.prototype.schema.type},!0,!1)),e.data[t]}function c(t){var e=this;return e.indexIds.map(e.get.bind(e))}function u(e){var n=this;n.indexIds=[],angular.forEach(e,function(e){angular.isString(e)&&t.validate(e)?n.indexIds.push(e):angular.isObject(e)&&t.validate(e.data.id)&&n.indexIds.push(e.data.id)})}function l(t){var e=this;return void 0!==e.data[t]&&(e.removed[t]=e.data[t],delete e.data[t],e.size-=1),e.removed[t]}function d(t){var e=this;return void 0!==e.removed[t]&&(e.data[t]=e.removed[t],delete e.removed[t],e.size+=1),e.data[t]}function h(t){var e=this;delete e.removed[t]}return n.prototype.get=s,n.prototype.index=c,n.prototype.setIndexIds=u,n.prototype.addOrUpdate=a,n.prototype.fromJson=r,n.prototype.toJson=o,n.prototype.clear=i,n.prototype.remove=l,n.prototype.revertRemove=d,n.prototype.clearRemoved=h,n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPICache\",t),t.$inject=[\"uuid4\",\"$log\"]}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").constant(\"lazyProperty\",function(t,e,n){var a,r;Object.defineProperty(t,e,{get:function(){return r||(r=!0,a=n.call(t)),a},enumerable:!0,configurable:!0})})}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").constant(\"toKebabCase\",function(t){return t.replace(/([a-z])([A-Z])/g,\"$1-$2\").toLowerCase()})}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").config([\"$provide\",function(t){t.decorator(\"$q\",[\"$delegate\",function(t){var e=t;return e.allSettled=e.allSettled||function(t,n,a){function r(t){return e.when(t).then(function(t){return angular.isFunction(n)&&n(t),{success:!0,value:t}},function(t){return angular.isFunction(a)&&a(t),{success:!1,reason:t}})}var o=angular.isArray(t)?[]:{};return angular.forEach(t,function(t,e){o.hasOwnProperty(e)||(o[e]=r(t))}),e.all(o)},e}])}])}(),function(){\"use strict\";function t(t,e,n){function a(e){var n=this;n.state={},t.call(n,e),angular.forEach(e,function(t){t.synchronizer=n})}function r(a){function r(t){d.notify({step:\"synchronization\",data:t})}function o(t){d.notify({step:\"synchronization\",errors:t})}function i(t){u.state[h]=u.state[h]||{},u.state[h].success=!0,angular.forEach(t,function(t){t.success===!1&&(u.state[h].success=!1)}),angular.forEach(u.synchronizations,function(e){angular.forEach(e.afterHooks[h],function(e){d.notify({step:\"after\",errors:e.call(u,a,t)})})});var e,n=[];angular.forEach(t,function(t){t.success===!0?e=t.value:n.push(t.reason)}),n.length>0?d.reject({data:e,finish:s,errors:n}):d.resolve({data:e,finish:s,errors:n})}function s(){angular.forEach(u.synchronizations,function(t){angular.forEach(t.finishHooks[h],function(t){d.notify({step:\"finish\",errors:t.call(u,a)})})})}function c(t){n.error(\"All settled rejected! Something went wrong\"),d.reject({finish:angular.noop,errors:t})}var u=this,l=[],d=e.defer(),h=a.action;return t.prototype.synchronize.call(u,a),angular.forEach(u.synchronizations,function(t){angular.forEach(t.beginHooks[h],function(t){d.notify({step:\"begin\",data:t.call(u,a)})})}),angular.forEach(u.synchronizations,function(t){angular.forEach(t.beforeHooks[h],function(t){d.notify({step:\"before\",data:t.call(u,a)})})}),angular.forEach(u.synchronizations,function(t){angular.forEach(t.synchronizationHooks[h],function(t){l.push(t.call(u,a))})}),e.allSettled(l,r,o).then(i,c),d.promise}return a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a.prototype.synchronize=r,a}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizerSimple\",t),t.$inject=[\"AngularJsonAPISynchronizerPrototype\",\"$q\",\"$log\"]}(),function(){\"use strict\";function t(t){function e(t){var e=this;e.synchronizations=t}function n(e){var n=this;t.debug(\"Synchro Collection\",n.factory.Model.prototype.schema.type,e),void 0===e.action&&t.error(\"Can't synchronize undefined action\",e)}return e.prototype.synchronize=n,e}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizerPrototype\",t),t.$inject=[\"$log\"]}(),function(){\"use strict\";function t(t,e,n,a,r){function o(n){function o(t){return r({method:\"GET\",headers:y,url:n,params:t.params||{}}).then(h,f)}function i(t){return r({method:\"GET\",headers:y,url:n+\"/\"+t.object.data.id,params:t.params||{}}).then(h,f)}function s(t){return r({method:\"DELETE\",headers:y,url:n+\"/\"+t.object.data.id}).then(h,f)}function c(t){var e=a.defer();return t.object.removed===!0?e.reject({errors:[{status:0,statusText:\"Object has been removed\"}]}):void 0!==t.target&&void 0===t.target.data.id?e.reject({errors:[{status:0,statusText:\"Can't unlink object without id through rest call\"}]}):\"hasOne\"===t.schema.type?r({method:\"DELETE\",headers:y,url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,f).then(e.resolve,e.reject):\"hasMany\"===t.schema.type&&(void 0===t.target?r({method:\"PUT\",headers:y,data:{data:[]},url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,f).then(e.resolve,e.reject):r({method:\"DELETE\",headers:y,url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key+\"/\"+t.target.data.id}).then(h,f).then(e.resolve,e.reject)),e.promise}function u(t){var o=a.defer();return t.object.removed===!0?o.reject({errors:[{status:0,statusText:\"Object has been removed\"}]}):void 0===t.target||void 0===t.target.data.id?o.reject({errors:[{status:0,statusText:\"Can't link object without id through rest call\"}]}):\"hasOne\"===t.schema.type?r({method:\"PUT\",headers:y,data:{data:e.toLinkData(t.target)},url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,f).then(o.resolve,o.reject):\"hasMany\"===t.schema.type&&r({method:\"POST\",headers:y,data:{data:[e.toLinkData(t.target)]},url:n+\"/\"+t.object.data.id+\"/relationships/\"+t.key}).then(h,f).then(o.resolve,o.reject),o.promise}function l(t){return r({method:\"PUT\",headers:y,url:n+\"/\"+t.object.data.id,data:t.object.form.toJson()}).then(h,f)}function d(t){return r({method:\"POST\",headers:y,url:n+\"/\",data:t.object.form.toJson()}).then(h,f)}function h(t){return a.resolve(t.data)}function f(t){function e(){o.reject({status:t.status,statusText:\"Server is offline\"})}function n(){o.reject({status:t.status,statusText:\"No internet connection\"})}var o=a.defer();return 0===t.status?r({method:\"GET\",url:\"https://status.cloud.google.com/incidents.schema.json\"}).then(e,n):o.reject({status:t.status,statusText:t.statusText}),o.promise}var p=this,y={Accept:\"application/vnd.api+json\",\"Content-Type\":\"application/vnd.api+json\"};t.call(p),p.synchronization(\"remove\",s),p.synchronization(\"unlink\",c),p.synchronization(\"link\",u),p.synchronization(\"update\",l),p.synchronization(\"add\",d),p.synchronization(\"all\",o),p.synchronization(\"get\",i),p.synchronization(\"refresh\",i)}return o.prototype=Object.create(t.prototype),o.prototype.constructor=o,o}angular.module(\"angular-jsonapi-rest\",[\"angular-jsonapi\"]).factory(\"AngularJsonAPISynchronizationRest\",t),t.$inject=[\"AngularJsonAPISynchronizationPrototype\",\"AngularJsonAPIModelLinkerService\",\"toKebabCase\",\"$q\",\"$http\"]}(),function(){\"use strict\";function t(){function t(){var t=this,e=[\"add\",\"init\",\"get\",\"all\",\"clear\",\"remove\",\"unlink\",\"unlinkReflection\",\"link\",\"linkReflection\",\"update\",\"refresh\"];t.state={},t.beginHooks={},t.beforeHooks={},t.synchronizationHooks={},t.afterHooks={},t.finishHooks={},t.options={},angular.forEach(e,function(e){t.beginHooks[e]=[],t.beforeHooks[e]=[],t.synchronizationHooks[e]=[],t.afterHooks[e]=[],t.finishHooks[e]=[],t.state[e]={loading:!1,success:!0}})}function e(t,e){var n=this;n.beginHooks[t].push(e)}function n(t,e){var n=this;n.finishHooks[t].push(e)}function a(t,e){var n=this;n.beforeHooks[t].push(e)}function r(t,e){var n=this;n.afterHooks[t].push(e)}function o(t,e){var n=this;n.synchronizationHooks[t].push(e)}return t.prototype.before=a,t.prototype.after=r,t.prototype.begin=e,t.prototype.finish=n,t.prototype.synchronization=o,t}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizationPrototype\",t)}(),function(){\"use strict\";function t(t,e,n){function a(a){function r(){var t=s.synchronizer.factory.schema.type;return n.when(e.localStorage.getItem(a+\".\"+t))}function o(){var t=s.synchronizer.factory.schema.type;e.localStorage.removeItem(a+\".\"+t)}function i(){var t=s.synchronizer.factory.schema.type,n=s.synchronizer.factory.cache;e.localStorage.setItem(a+\".\"+t,n.toJson())}var s=this;a=a||\"AngularJsonAPI\",s.__updateStorage=i,t.call(s),s.synchronization(\"init\",r),s.begin(\"clear\",o),s.begin(\"remove\",i),s.begin(\"refresh\",i),s.begin(\"unlink\",i),s.begin(\"unlinkReflection\",i),s.begin(\"link\",i),s.begin(\"linkReflection\",i),s.begin(\"update\",i),s.begin(\"add\",i),s.finish(\"get\",i),s.finish(\"all\",i),s.finish(\"init\",i),s.finish(\"clear\",i),s.finish(\"remove\",i),s.finish(\"refresh\",i),s.finish(\"unlink\",i),s.finish(\"unlinkReflection\",i),s.finish(\"link\",i),s.finish(\"linkReflection\",i),s.finish(\"update\",i),s.finish(\"add\",i),s.finish(\"get\",i),s.finish(\"all\",i)}return a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a}angular.module(\"angular-jsonapi-local\",[\"angular-jsonapi\"]).factory(\"AngularJsonAPISynchronizationLocal\",t),t.$inject=[\"AngularJsonAPISynchronizationPrototype\",\"$window\",\"$q\"]}(),function(){\"use strict\";function t(t,e,n){function a(t){var e=this,a=t.include||{};t.include=a,a.get=t.include.get||[],a.all=t.include.all||[],e.params={get:{},all:{}},angular.forEach(t.relationships,function(e,r){var o=new n(e,r,t.type);t.relationships[r]=o,o.included===!0&&(a.get.push(r),\"hasOne\"===o.type&&a.all.push(r))}),angular.extend(e,t),a.get.length>0&&(e.params.get.include=a.get.join(\",\")),a.all.length>0&&(e.params.all.include=a.all.join(\",\"))}return a}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISchema\",t),t.$inject=[\"$log\",\"pluralize\",\"AngularJsonAPISchemaLink\"]}(),function(){\"use strict\";function t(t,e){function n(n,a,r){var o=this;angular.isString(n)?(o.model=e.plural(a),o.type=n,o.polymorphic=!1,o.reflection=r):(void 0===n.type&&t.error(\"Schema of link without a type: \",n,a),\"hasMany\"!==n.type&&\"hasOne\"!==n.type&&t.error(\"Schema of link with wrong type: \",n.type,\"available: hasOne, hasMany\"),o.model=n.model||e.plural(a),o.type=n.type,o.polymorphic=n.polymorphic||!1,o.reflection=void 0===n.reflection?\"hasMany\"===o.type?e.singular(r):r:n.reflection,o.included=n.included||!1)}return n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISchemaLink\",t),t.$inject=[\"$log\",\"pluralize\"]}(),function(){\"use strict\";function t(t,e,n){function a(e,a){var r=function(e,a,r){var o=this;e.type!==o.schema.type&&n.error(\"Data type other then declared in schema: \",e.type,\" instead of \",o.schema.type),t.call(o,e,a,r),o.form.parent=o};return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.schema=e,r.prototype.parentFactory=a,r.prototype.synchronize=a.synchronizer.synchronize.bind(a.synchronizer),angular.forEach(e.functions,function(t,e){r.prototype[e]=function(){return t.apply(this,arguments)}}),r}return{model:a}}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIModel\",t),t.$inject=[\"AngularJsonAPIAbstractModel\",\"AngularJsonAPISchema\",\"$log\"]}(),function(){\"use strict\";function t(t,e,n,a,r,o,i,s){function c(a,r){function i(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"resolved\",t),u.cache.fromJson(t.data),u.initialized=!0,t.finish()}function s(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"rejected\",t),t.finish(),u.initialized=!0}function c(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"notify\",t)}var u=this,l={action:\"init\"};u.schema=new e(a),u.cache=new n(u),u.synchronizer=r,u.synchronizer.factory=u,u.Model=t.model(u.schema,u),u.initialized=!1,u.type=u.schema.type,r.factory=u,u.synchronizer.synchronize(l).then(i,s,c)}function u(t){var e=this;return r.validate(t)?e.cache.get(t).refresh():s.reject({errors:[{status:0,statusText:\"Invalid id not uuid4\"}]})}function l(t){var e=this;t=t||{};var n=new a(e,angular.extend(t,e.schema.params.all));return n.fetch(),n}function d(t){var e=this,n=e.cache.remove(t);return n.remove()}function h(t,e){var n=this,a={};if(void 0!==t&&void 0!==e){var o=n.schema[t];\"hasOne\"===o.type?a[t]={data:e.data.id}:\"hasMany\"===o.type&&i.warn(\"Initialize with relationship disallowed for hasMany relationships\")}var s={type:n.type,id:r.generate(),attributes:{},relationships:a},c=new n.Model(s,!1,!1);return c}function f(){function t(t){o.$emit(\"angularJsonAPI:\"+a.type+\":factory:clear\",\"resolved\",t),t.finish(),r.resolve(t)}function e(t){o.$emit(\"angularJsonAPI:\"+a.type+\":factory:clear\",\"resolved\",t),t.finish(),r.reject(t)}function n(t){o.$emit(\"angularJsonAPI:\"+a.type+\":factory:clear\",\"notify\",t),r.notify(t)}var a=this,r=s.defer(),i={action:\"clear\"};return a.cache.clear(),a.synchronizer.synchronize(i).then(t,e,n),r}return c.prototype.get=u,c.prototype.all=l,c.prototype.remove=d,c.prototype.initialize=h,c.prototype.clear=f,c}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIFactory\",t),t.$inject=[\"AngularJsonAPIModel\",\"AngularJsonAPISchema\",\"AngularJsonAPICache\",\"AngularJsonAPICollection\",\"uuid4\",\"$rootScope\",\"$log\",\"$q\"]}(),function(){\"use strict\";function t(t,e,n){function a(e,n){function a(t,e,n){var a;\"resolved\"===e&&(a=r.data.indexOf(n),a>-1&&(r.data.splice(a,1),r.factory.cache.setIndexIds(r.data)))}var r=this;r.factory=e,r.type=e.schema.type,r.params=n,r.errors={synchronization:{name:\"Synchronization\",description:\"Errors during synchronization\",errors:[]}},r.error=!1,r.data=r.factory.cache.index(r.params),r[\"synchronized\"]=!1,t.$on(\"angularJsonAPI:\"+r.type+\":object:remove\",a)}function r(t){var e=this;return e.factory.get(t)}function o(){function a(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"resolved\",i,e),i.errors.synchronization.errors=[],i.data=c.proccesResults(e.data),i.error=!1,i.updatedAt=Date.now(),i[\"synchronized\"]=!0,i.factory.cache.setIndexIds(i.data),e.finish(),s.resolve(i)}function r(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"rejected\",i,e),i.errors.synchronization.errors=e.errors,i.error=!0,e.finish(),s.reject(e)}function o(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"notify\",i,e),s.notify(e)}var i=this,s=n.defer(),c=e.get(\"$jsonapi\"),u={action:\"all\",params:i.params};return i.factory.synchronizer.synchronize(u).then(a,r,o),s.promise}return a.prototype.fetch=o,a.prototype.refresh=o,a.prototype.get=r,a}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPICollection\",t),t.$inject=[\"$rootScope\",\"$injector\",\"$q\"]}(),function(){\"use strict\";function t(){function t(t,a){function r(){return e}function o(){return n}function i(t,r){var o=new a(t,r);e[t.type]=o,n.push(t.type)}function s(t){return e[t]}function c(n){return void 0===e[n]&&t.error(\"Can\t add not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].saved.form}function u(n,a){return void 0===e[n]&&t.error(\"Can\t get not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].get(a)}function l(n,a){return void 0===e[n]&&t.error(\"Can\t remove not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].remove(a)}function d(n){return void 0===e[n]&&t.error(\"Can\t get all of not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].all()}function h(){angular.forEach(e,function(t){t.clear()})}function f(e){if(void 0===e&&t.error(\"Can't proccess results:\",e),angular.forEach(e.included,function(t){s(t.type).cache.addOrUpdate(t,!0)}),angular.isArray(e.data)){var n=[];return angular.forEach(e.data,function(t){n.push(s(t.type).cache.addOrUpdate(t,!0))}),n}return s(e.data.type).cache.addOrUpdate(e.data,!0)}return{form:c,get:u,remove:l,all:d,addFactory:i,getFactory:s,clearAll:h,proccesResults:f,allFactories:r,factoriesNames:o}}var e={},n=[];this.$get=t,t.$inject=[\"$log\",\"AngularJsonAPIFactory\"]}angular.module(\"angular-jsonapi\").provider(\"$jsonapi\",t)}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").config([\"$logProvider\",function(t){t.debugEnabled(!1)}])}();\n//# sourceMappingURL=angular-jsonapi.min.js.map","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModelForm', AngularJsonAPIModelFormWrapper);\n\n  function AngularJsonAPIModelFormWrapper(\n    AngularJsonAPIModelValidatorService,\n    AngularJsonAPIModelLinkerService\n  ) {\n\n    AngularJsonAPIModelForm.prototype.save = save;\n    AngularJsonAPIModelForm.prototype.reset = reset;\n    AngularJsonAPIModelForm.prototype.validate = validate;\n    AngularJsonAPIModelForm.prototype.validateField = validateField;\n\n    AngularJsonAPIModelForm.prototype.link = link;\n    AngularJsonAPIModelForm.prototype.unlink = unlink;\n\n    AngularJsonAPIModelForm.prototype.toJson = toJson;\n\n    return AngularJsonAPIModelForm;\n\n    function AngularJsonAPIModelForm(parent) {\n      var _this = this;\n\n      _this.data = {\n        id: parent.data.id,\n        type: parent.data.type,\n        attributes: {},\n        relationships: {}\n      };\n\n      _this.relationships = {};\n      _this.parent = parent;\n      _this.schema = parent.schema;\n      _this.reset();\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Saves form, shortcut to parent.save()\n     * @return {promise} Promise associated with synchronization\n     */\n    function save() {\n      var _this = this;\n\n      return _this.parent.save();\n    }\n\n    /**\n     * Resets form to state of a parent\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      angular.forEach(_this.schema.attributes, function(validator, key) {\n        _this.data.attributes[key] = _this.parent.data.attributes[key] || '';\n      });\n\n      angular.forEach(_this.schema.relationships, function(data, key) {\n        _this.data.relationships[key] = _this.parent.data.relationships[key] || {};\n        _this.relationships[key] = _this.parent.relationships[key];\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n    }\n\n    /**\n     * Validates form\n     * @return {objec} Errors object indexed by keys\n     */\n    function validate() {\n      var _this = this;\n      var errors;\n\n      errors = AngularJsonAPIModelValidatorService.validateForm(_this.data);\n\n      _this.errors.validation = errors;\n\n      return errors;\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(key) {\n      var _this = this;\n      var errors;\n      errors = AngularJsonAPIModelValidatorService.validateField(\n        _this.data[key],\n        key\n      );\n\n      _this.errors.validation[key] = errors;\n\n      return errors;\n    }\n\n    /**\n     * Adds link to a form without synchronization\n     * @param {string} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function link(key, target) {\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n\n      return AngularJsonAPIModelLinkerService.link(_this, key, target, schema);\n    }\n\n    /**\n     * Removes link from form without synchronization\n     * @param  {[type]} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function unlink(key, target) {\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n\n      return AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIAbstractModel', AngularJsonAPIAbstractModelWrapper);\n\n  function AngularJsonAPIAbstractModelWrapper(\n    AngularJsonAPIModelForm,\n    AngularJsonAPIModelLinkerService,\n    uuid4,\n    $rootScope,\n    $injector,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIAbstractModel.prototype.refresh = refresh;\n    AngularJsonAPIAbstractModel.prototype.remove = remove;\n    AngularJsonAPIAbstractModel.prototype.reset = reset;\n    AngularJsonAPIAbstractModel.prototype.save = save;\n\n    AngularJsonAPIAbstractModel.prototype.update = update;\n\n    AngularJsonAPIAbstractModel.prototype.link = link;\n    AngularJsonAPIAbstractModel.prototype.unlink = unlink;\n    AngularJsonAPIAbstractModel.prototype.unlinkAll = unlinkAll;\n\n    AngularJsonAPIAbstractModel.prototype.toJson = toJson;\n\n    return AngularJsonAPIAbstractModel;\n\n    /**\n     * Constructor\n     * @param {json}  data      Validated data used to create an object\n     * @param {Boolean} saved   Is object new (for form)\n     */\n    function AngularJsonAPIAbstractModel(data, saved, synchronized) {\n      var _this = this;\n\n      data.relationships = data.relationships || {};\n\n      /**\n       * Is not a new record\n       * @type {Boolean}\n       */\n      _this.saved = saved === undefined ? true : saved;\n\n      /**\n       * Is present on the server\n       * @type {Boolean}\n       */\n      _this.stable = synchronized === undefined ? true : synchronized;\n\n      /**\n       * Has been synchronized with the server\n       * @type {Boolean}\n       */\n      _this.synchronized = synchronized === undefined ? true : synchronized;\n\n      _this.removed = false;\n      _this.loadingCount = 0;\n\n      _this.data = {\n        relationships: {},\n        attributes: {}\n      };\n      _this.relationships = {};\n\n      angular.forEach(_this.schema.relationships, function(schema, name) {\n        _this.relationships[name] = undefined;\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n\n      _this.promises = {};\n\n      __setData(_this, data);\n\n      _this.form = new AngularJsonAPIModelForm(_this);\n    }\n\n    /**\n     * Saves model's form\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function save() {\n      var _this = this;\n      var deferred = $q.defer();\n      var hasErrors = false;\n      var config = {\n        action: _this.saved === false ? 'add' : 'update',\n        object: _this\n      };\n\n      var errors = _this.form.validate();\n\n      for (var error in errors) {\n        if (errors.hasOwnProperty(error)) {\n          hasErrors = true;\n        }\n      }\n\n      if (hasErrors === true) {\n        deferred.reject(errors);\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'resolved', _this, response);\n        _this.update(_this.form.data);\n\n        _this.synchronized = true;\n        _this.saved = true;\n        _this.stable = true;\n\n        response.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response.errors);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'notify', _this, response);\n\n        deferred.notify(response.errors);\n      }\n    }\n\n    /**\n     * Reset object form\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      return _this.form.reset();\n    }\n\n    /**\n     * Synchronize object with remote\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function refresh() {\n      var $jsonapi = $injector.get('$jsonapi');\n      var deferred = $q.defer();\n      var _this = this;\n      var config = {\n        action: 'refresh',\n        object: _this,\n        params: _this.schema.params.get\n      };\n\n      if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t refresh new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'resolved', _this, response);\n        $jsonapi.proccesResults(response.data);\n        response.finish();\n\n        _this.synchronized = true;\n        _this.stable = true;\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Remove object\n     * @return {promise} Promise associated with synchronization that resolves to nothing\n     */\n    function remove() {\n      var _this = this;\n      var deferred = $q.defer();\n\n      var config = {\n        action: 'remove',\n        object: _this\n      };\n\n      _this.parentFactory.cache.remove(_this.data.id);\n\n      if (_this.saved === false) {\n        deferred.resolve();\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'resolved', _this, response);\n        _this.removed = true;\n        _this.unlinkAll();\n        _this.parentFactory.cache.clearRemoved(_this.data.id);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'rejected', _this, response);\n        _this.parentFactory.cache.revertRemove(_this.data.id);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Unlink all reflection relationships of the object **without synchronization**\n     * @return {boolean} Result\n     */\n    function unlinkAll(key) {\n      var _this = this;\n      var deferred = $q.defer();\n\n      if (key === undefined) {\n        angular.forEach(_this.relationships, removeLink);\n      } else {\n        removeLink(_this.relationships[key], key);\n      }\n\n      return deferred.promise;\n\n      function removeLink(linksObj, key) {\n        var schema = _this.schema.relationships[key];\n        var reflectionKey = schema.reflection;\n\n        if (angular.isArray(linksObj)) {\n          angular.forEach(linksObj, removeReflectionLink.bind(undefined, reflectionKey));\n        } else if (angular.isObject(linksObj)) {\n          removeReflectionLink(reflectionKey, linksObj);\n        }\n\n        if (schema.type === 'hasOne') {\n          _this.relationships[key] = null;\n        } else if (schema.type === 'hasMany') {\n          _this.relationships[key] = [];\n        }\n      }\n\n      function removeReflectionLink(reflectionKey, target) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolve, reject, notify);\n\n        function resolve(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function reject(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notify(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n    }\n\n    /**\n     * Links object to relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be linked\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function link(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var config = {\n        action: 'link',\n        object: _this,\n        schema: schema,\n        target: target,\n        key: key\n      };\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link undefined'}]});\n      } else if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.link(_this, key, target, schema);\n        AngularJsonAPIModelLinkerService.link(target, reflectionKey, _this, reflectionSchema);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'linkReflection',\n          schema: reflectionSchema,\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Unlinks object from relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be unlinked if undefined unlinks all\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function unlink(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var config = {\n        action: 'unlink',\n        object: _this,\n        target: target,\n        schema: schema,\n        key: key\n      };\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink undefined'}]});\n      } else if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          schema: reflectionSchema,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Sets object state to data\n     * @param  {object} validatedData JsonAPI object with data\n     * @return {bool}               Result\n     */\n    function update(validatedData) {\n      var _this = this;\n\n      if (__setData(_this, validatedData) === true) {\n        _this.reset();\n        _this.synchronized = true;\n        _this.stable = true;\n        _this.updatedAt = Date.now();\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /////////////\n    // PRIVATE //\n    /////////////\n\n    /**\n     * Low level set data function, use only with validated data\n     * @param  {AngularJsonAPIModel} object        object to be modified\n     * @param  {object} validatedData Validated data\n     * @return {boolean}               Status\n     */\n    function __setData(object, validatedData) {\n\n      var $jsonapi = $injector.get('$jsonapi');\n      var schema = object.schema;\n\n      object.data.id = validatedData.id;\n      object.data.type = validatedData.type;\n\n      if (object.parentFactory.schema.type !== validatedData.type) {\n        $log.error('Different type then factory', object.parentFactory.schema.type, validatedData);\n        return false;\n      }\n\n      if (!uuid4.validate(object.data.id)) {\n        $log.error('Invalid id');\n        return false;\n      }\n\n      validatedData.attributes = validatedData.attributes || {};\n      validatedData.relationships = validatedData.relationships || {};\n\n      angular.forEach(schema.attributes, setAttributes);\n      angular.forEach(schema.relationships, setRelationships);\n\n      return true;\n\n      function setAttributes(validators, key) {\n        object.data.attributes[key] = validatedData.attributes[key];\n      }\n\n      function setRelationships(schema, key) {\n        var relationshipData = validatedData.relationships[key];\n\n        if (relationshipData === undefined) {\n          object.data.relationships[key] = {data: undefined};\n          return;\n        }\n\n        object.data.relationships[key] = object.data.relationships[key] || {};\n        object.data.relationships[key].links = relationshipData.links;\n\n        if (schema.type === 'hasOne') {\n          linkOne(object, key, schema, relationshipData.data);\n        } else if (schema.type === 'hasMany') {\n          if (angular.isArray(relationshipData.data) && relationshipData.data.length === 0) {\n            object.data.relationships[key].data = [];\n            object.unlinkAll(key);\n          } else {\n            angular.forEach(\n              relationshipData.data,\n              linkOne.bind(undefined, object, key, schema)\n            );\n          }\n        }\n      }\n\n      function linkOne(object, key, schema, data) {\n        if (data === null) {\n          AngularJsonAPIModelLinkerService.link(object, key, null, schema);\n          return;\n        }\n\n        if (data === undefined) {\n          return;\n        }\n\n        var factory = $jsonapi.getFactory(data.type);\n\n        if (factory === undefined) {\n          $log.error('Factory not found', data.type, data);\n          return;\n        }\n\n        var target = factory.cache.get(data.id);\n        var reflectionKey = schema.reflection;\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n\n        AngularJsonAPIModelLinkerService.link(object, key, target, schema);\n\n        if (reflectionKey !== false) {\n          AngularJsonAPIModelLinkerService.link(target, reflectionKey, object, reflectionSchema);\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICache', AngularJsonAPICacheWrapper);\n\n  function AngularJsonAPICacheWrapper(\n    uuid4,\n    $log\n  ) {\n\n    AngularJsonAPICache.prototype.get = get;\n    AngularJsonAPICache.prototype.index = index;\n    AngularJsonAPICache.prototype.setIndexIds = setIndexIds;\n    AngularJsonAPICache.prototype.addOrUpdate = addOrUpdate;\n\n    AngularJsonAPICache.prototype.fromJson = fromJson;\n    AngularJsonAPICache.prototype.toJson = toJson;\n    AngularJsonAPICache.prototype.clear = clear;\n\n    AngularJsonAPICache.prototype.remove = remove;\n    AngularJsonAPICache.prototype.revertRemove = revertRemove;\n    AngularJsonAPICache.prototype.clearRemoved = clearRemoved;\n\n    return AngularJsonAPICache;\n\n    /**\n     * Constructor\n     */\n    function AngularJsonAPICache(factory) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.data = {};\n      _this.removed = {};\n      _this.size = 0;\n\n      _this.indexIds = [];\n    }\n\n    /**\n     * Add new model or update existing with data\n     * @param {object} validatedData Data that are used to update or create an object, has to be valid\n     * @return {AngularJsonAPIModel} Created model\n     */\n    function addOrUpdate(validatedData, synchronized) {\n      var _this = this;\n      var id = validatedData.id;\n\n      if (id === undefined) {\n        $log.error('Can\\'t add data without id!', validatedData);\n        return;\n      }\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model(validatedData, true, synchronized);\n        _this.size += 1;\n      } else {\n        _this.data[id].update(validatedData);\n      }\n\n      return _this.data[id];\n    }\n\n\n    /**\n     * Recreate object structure from json data\n     * @param  {json} json Json data\n     * @return {undefined}\n     */\n    function fromJson(json) {\n      var _this = this;\n      var collection = angular.fromJson(json);\n\n      if (angular.isObject(collection) && collection.data !== undefined) {\n        _this.updatedAt = collection.updatedAt;\n        _this.indexIds = collection.indexIds;\n\n        angular.forEach(collection.data, function(objectData) {\n          var data = objectData.data;\n          _this.addOrUpdate(data, false);\n        });\n      }\n    }\n\n    /**\n     * Encodes memory into json format\n     * @return {json} Json encoded memory\n     */\n    function toJson() {\n      var _this = this;\n      var json = {\n        data: {},\n        updatedAt: _this.updatedAt,\n        indexIds: _this.indexIds\n      };\n\n      angular.forEach(_this.data, function(object, key) {\n        json.data[key] = object.toJson();\n      });\n\n      return angular.toJson(json);\n    }\n\n    /**\n     * Clear memory\n     * @return {undefined}\n     */\n    function clear() {\n      var _this = this;\n\n      _this.data = {};\n      _this.removed = {};\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function get(id) {\n      var _this = this;\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model({id: id, type: _this.factory.Model.prototype.schema.type}, true, false);\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {objec} params\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function index(params) {\n      var _this = this;\n\n      return _this.indexIds.map(_this.get.bind(_this));\n    }\n\n    /**\n     * Cache ids of objects returned by index request\n     * @param {ids array or AngularJsonAPIModel array} array Objects or ids to be cached\n     */\n    function setIndexIds(array) {\n      var _this = this;\n\n      _this.indexIds = [];\n\n      angular.forEach(array, function(element) {\n        if (angular.isString(element) && uuid4.validate(element)) {\n          _this.indexIds.push(element);\n        } else if (angular.isObject(element) && uuid4.validate(element.data.id)) {\n          _this.indexIds.push(element.data.id);\n        }\n      });\n    }\n\n    /**\n     * Remove object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function remove(id) {\n      var _this = this;\n\n      if (_this.data[id] !== undefined) {\n        _this.removed[id] = _this.data[id];\n        delete _this.data[id];\n        _this.size -= 1;\n      }\n\n      return _this.removed[id];\n    }\n\n    /**\n     * Revert removal of an object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function revertRemove(id) {\n      var _this = this;\n\n      if (_this.removed[id] !== undefined) {\n        _this.data[id] = _this.removed[id];\n        delete _this.removed[id];\n        _this.size += 1;\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Clear removed object from memory\n     * @param  {uuid} id\n     * @return {undefined}\n     */\n    function clearRemoved(id) {\n      var _this = this;\n\n      delete _this.removed[id];\n    }\n  }\n})();\n","// from https://www.sitepen.com/blog/2012/10/19/lazy-property-access/\n(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('lazyProperty', function(target, propertyName, callback) {\n      var result;\n      var done;\n      Object.defineProperty(target, propertyName, {\n        get: function() { // Define the getter\n          if (!done) {\n            // We cache the result and only compute once.\n            done = true;\n            result = callback.call(target);\n          }\n\n          return result;\n        },\n\n        // Keep it enumerable and configurable, certainly not necessary.\n        enumerable: true,\n        configurable: true\n      });\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('toKebabCase', function(str) {\n      return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi').config(['$provide', function($provide) {\n    $provide.decorator('$q', ['$delegate', function($delegate) {\n      var $q = $delegate;\n\n      $q.allSettled = $q.allSettled || function allSettled(promises, resolvedCallback, rejectedCallback) {\n        // Implementation of allSettled function from Kris Kowal's Q:\n        // https://github.com/kriskowal/q/wiki/API-Reference#promiseallsettled\n        // by Michael Kropat from http://stackoverflow.com/a/27114615/1400432 slightly modified\n\n        var wrapped = angular.isArray(promises) ? [] : {};\n\n        angular.forEach(promises, function(promise, key) {\n          if (!wrapped.hasOwnProperty(key)) {\n            wrapped[key] = wrap(promise);\n          }\n        });\n\n        return $q.all(wrapped);\n\n        function wrap(promise) {\n          return $q.when(promise)\n            .then(function(value) {\n              if (angular.isFunction(resolvedCallback)) {\n                resolvedCallback(value);\n              }\n\n              return { success: true, value: value };\n            },\n\n            function(reason) {\n              if (angular.isFunction(rejectedCallback)) {\n                rejectedCallback(reason);\n              }\n\n              return { success: false, reason: reason };\n            });\n        }\n      };\n\n      return $q;\n    }]);\n  }]);\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerSimple', AngularJsonAPISynchronizerSimpleWrapper);\n\n  function AngularJsonAPISynchronizerSimpleWrapper(AngularJsonAPISynchronizerPrototype, $q, $log) {\n\n    AngularJsonAPISynchronizerSimple.prototype = Object.create(AngularJsonAPISynchronizerPrototype.prototype);\n    AngularJsonAPISynchronizerSimple.prototype.constructor = AngularJsonAPISynchronizerSimple;\n\n    AngularJsonAPISynchronizerSimple.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerSimple;\n\n    function AngularJsonAPISynchronizerSimple(synchronizations) {\n      var _this = this;\n\n      _this.state = {};\n\n      AngularJsonAPISynchronizerPrototype.call(_this, synchronizations);\n\n      angular.forEach(synchronizations, function(synchronization) {\n        synchronization.synchronizer = _this;\n      });\n    }\n\n    function synchronize(config) {\n      var _this = this;\n      var promises = [];\n      var deferred = $q.defer();\n      var action = config.action;\n\n      AngularJsonAPISynchronizerPrototype.prototype.synchronize.call(_this, config);\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beginHooks[action], function(hook) {\n          deferred.notify({step: 'begin', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beforeHooks[action], function(hook) {\n          deferred.notify({step: 'before', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.synchronizationHooks[action], function(hook) {\n          promises.push(hook.call(_this, config));\n        });\n      });\n\n      $q.allSettled(promises, resolvedCallback, rejectedCallback).then(resolved, rejected);\n\n      function resolvedCallback(value) {\n        deferred.notify({step: 'synchronization', data: value});\n      }\n\n      function rejectedCallback(reason) {\n        deferred.notify({step: 'synchronization', errors: reason});\n      }\n\n      function resolved(results) {\n        _this.state[action] = _this.state[action] || {};\n        _this.state[action].success = true;\n\n        angular.forEach(results, function(result) {\n          if (result.success === false) {\n            _this.state[action].success = false;\n          }\n        });\n\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.afterHooks[action], function(hook) {\n            deferred.notify({step: 'after', errors: hook.call(_this, config, results)});\n          });\n        });\n\n        var data;\n        var errors = [];\n\n        angular.forEach(results, function(result) {\n          if (result.success === true) {\n            data = result.value;\n          } else {\n            errors.push(result.reason);\n          }\n        });\n\n        if (errors.length > 0) {\n          deferred.reject({data: data, finish: finish, errors: errors});\n        } else {\n          deferred.resolve({data: data, finish: finish, errors: errors});\n        }\n      }\n\n      function finish() {\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.finishHooks[action], function(hook) {\n            deferred.notify({step: 'finish', errors: hook.call(_this, config)});\n          });\n        });\n      }\n\n      function rejected(errors) {\n        $log.error('All settled rejected! Something went wrong');\n\n        deferred.reject({finish: angular.noop, errors: errors});\n      }\n\n      return deferred.promise;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerPrototype', AngularJsonAPISynchronizerPrototypeWrapper);\n\n  function AngularJsonAPISynchronizerPrototypeWrapper($log) {\n\n    AngularJsonAPISynchronizerPrototype.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerPrototype;\n\n    function AngularJsonAPISynchronizerPrototype(synchronizations) {\n      var _this = this;\n\n      _this.synchronizations = synchronizations;\n    }\n\n    function synchronize(config) {\n      var _this = this;\n\n      $log.debug('Synchro Collection', _this.factory.Model.prototype.schema.type, config);\n\n      if (config.action === undefined) {\n        $log.error('Can\\'t synchronize undefined action', config);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-rest', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationRest', AngularJsonAPISynchronizationRestWrapper);\n\n  function AngularJsonAPISynchronizationRestWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    AngularJsonAPIModelLinkerService,\n    toKebabCase,\n    $q,\n    $http\n  ) {\n\n    AngularJsonAPISynchronizationRest.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationRest.prototype.constructor = AngularJsonAPISynchronizationRest;\n\n    return AngularJsonAPISynchronizationRest;\n\n    function AngularJsonAPISynchronizationRest(url) {\n      var _this = this;\n      var headers = { // jscs:disable disallowQuotedKeysInObjects\n        'Accept': 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json'\n      }; // jscs:enable disallowQuotedKeysInObjects\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('remove', remove);\n      _this.synchronization('unlink', unlink);\n      _this.synchronization('link', link);\n      _this.synchronization('update', update);\n      _this.synchronization('add', add);\n      _this.synchronization('all', all);\n      _this.synchronization('get', get);\n      _this.synchronization('refresh', get);\n\n      function all(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function get(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function remove(config) {\n        return $http({\n          method: 'DELETE',\n          headers: headers,\n          url: url + '/' + config.object.data.id\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function unlink(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target !== undefined && config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink object without id through rest call'}]});\n        } else if (config.schema.type === 'hasOne') {\n          $http({\n            method: 'DELETE',\n            headers: headers,\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        } else if (config.schema.type === 'hasMany') {\n          if (config.target === undefined) {\n            $http({\n              method: 'PUT',\n              headers: headers,\n              data: {data: []},\n              url: url + '/' + config.object.data.id + '/relationships/' + config.key\n            }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n          } else {\n            $http({\n              method: 'DELETE',\n              headers: headers,\n              url: url + '/' + config.object.data.id + '/relationships/' + config.key + '/' + config.target.data.id\n            }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n          }\n        }\n\n        return deferred.promise;\n      }\n\n      function link(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target === undefined || config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link object without id through rest call'}]});\n        } else if (config.schema.type === 'hasOne') {\n          $http({\n            method: 'PUT',\n            headers: headers,\n            data: {data: AngularJsonAPIModelLinkerService.toLinkData(config.target)},\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        } else if (config.schema.type === 'hasMany') {\n          $http({\n            method: 'POST',\n            headers: headers,\n            data: {data: [AngularJsonAPIModelLinkerService.toLinkData(config.target)]},\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        }\n\n        return deferred.promise;\n      }\n\n      function update(config) {\n        return $http({\n          method: 'PUT',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function add(config) {\n        return $http({\n          method: 'POST',\n          headers: headers,\n          url: url + '/',\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function resolveHttp(response) {\n        return $q.resolve(response.data);\n      }\n\n      function rejectHttp(response) {\n        var deferred = $q.defer();\n\n        if (response.status === 0) {\n          $http({\n            method: 'GET',\n            url: 'https://status.cloud.google.com/incidents.schema.json'\n          }).then(rejectServerOffline, rejectNoConnection);\n        } else {\n          deferred.reject({status: response.status, statusText: response.statusText});\n        }\n\n        return deferred.promise;\n\n        function rejectServerOffline() {\n          deferred.reject({status: response.status, statusText: 'Server is offline'});\n        }\n\n        function rejectNoConnection() {\n          deferred.reject({status: response.status, statusText: 'No internet connection'});\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizationPrototype', AngularJsonAPISynchronizationPrototypeWrapper);\n\n  function AngularJsonAPISynchronizationPrototypeWrapper() {\n    AngularJsonAPISynchronizationPrototype.prototype.before = beforeSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.after = afterSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.begin = begin;\n    AngularJsonAPISynchronizationPrototype.prototype.finish = finish;\n    AngularJsonAPISynchronizationPrototype.prototype.synchronization = synchronization;\n\n    return AngularJsonAPISynchronizationPrototype;\n\n    function AngularJsonAPISynchronizationPrototype() {\n      var _this = this;\n      var allHooks = [\n        'add',\n        'init',\n        'get',\n        'all',\n        'clear',\n        'remove',\n        'unlink',\n        'unlinkReflection',\n        'link',\n        'linkReflection',\n        'update',\n        'refresh'\n      ];\n\n      _this.state = {};\n\n      _this.beginHooks = {};\n      _this.beforeHooks = {};\n      _this.synchronizationHooks = {};\n      _this.afterHooks = {};\n      _this.finishHooks = {};\n\n      _this.options = {};\n\n      angular.forEach(allHooks, function(hookName) {\n        _this.beginHooks[hookName] = [];\n        _this.beforeHooks[hookName] = [];\n        _this.synchronizationHooks[hookName] = [];\n        _this.afterHooks[hookName] = [];\n        _this.finishHooks[hookName] = [];\n        _this.state[hookName] = {\n          loading: false,\n          success: true\n        };\n      });\n    }\n\n    function begin(action, callback) {\n      var _this = this;\n\n      _this.beginHooks[action].push(callback);\n    }\n\n    function finish(action, callback) {\n      var _this = this;\n\n      _this.finishHooks[action].push(callback);\n    }\n\n    function beforeSynchro(action, callback) {\n      var _this = this;\n\n      _this.beforeHooks[action].push(callback);\n    }\n\n    function afterSynchro(action, callback) {\n      var _this = this;\n\n      _this.afterHooks[action].push(callback);\n    }\n\n    function synchronization(action, callback) {\n      var _this = this;\n\n      _this.synchronizationHooks[action].push(callback);\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-local', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationLocal', AngularJsonAPISynchronizationLocalWrapper);\n\n  function AngularJsonAPISynchronizationLocalWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    $window,\n    $q\n  ) {\n\n    AngularJsonAPISynchronizationLocal.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationLocal.prototype.constructor = AngularJsonAPISynchronizationLocal;\n\n    return AngularJsonAPISynchronizationLocal;\n\n    function AngularJsonAPISynchronizationLocal(prefix) {\n      var _this = this;\n\n      prefix = prefix || 'AngularJsonAPI';\n\n      _this.__updateStorage = updateStorage;\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('init', init);\n\n      _this.begin('clear', clear);\n      _this.begin('remove', updateStorage);\n      _this.begin('refresh', updateStorage);\n      _this.begin('unlink', updateStorage);\n      _this.begin('unlinkReflection', updateStorage);\n      _this.begin('link', updateStorage);\n      _this.begin('linkReflection', updateStorage);\n      _this.begin('update', updateStorage);\n      _this.begin('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      _this.finish('init', updateStorage);\n      _this.finish('clear', updateStorage);\n      _this.finish('remove', updateStorage);\n      _this.finish('refresh', updateStorage);\n      _this.finish('unlink', updateStorage);\n      _this.finish('unlinkReflection', updateStorage);\n      _this.finish('link', updateStorage);\n      _this.finish('linkReflection', updateStorage);\n      _this.finish('update', updateStorage);\n      _this.finish('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      function init() {\n        var type = _this.synchronizer.factory.schema.type;\n        return $q.when($window.localStorage.getItem(prefix + '.' + type));\n      }\n\n      function clear() {\n        var type = _this.synchronizer.factory.schema.type;\n        $window.localStorage.removeItem(prefix + '.' + type);\n      }\n\n      function updateStorage() {\n        var type = _this.synchronizer.factory.schema.type;\n        var cache = _this.synchronizer.factory.cache;\n        $window.localStorage.setItem(prefix + '.' + type, cache.toJson());\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchema', AngularJsonAPISchemaWrapper);\n\n  function AngularJsonAPISchemaWrapper($log, pluralize, AngularJsonAPISchemaLink) {\n\n    return AngularJsonAPISchema;\n\n    function AngularJsonAPISchema(schema) {\n      var _this = this;\n      var include = schema.include || {};\n      schema.include = include;\n      include.get = schema.include.get || [];\n      include.all = schema.include.all || [];\n\n      _this.params = {\n        get: {},\n        all: {}\n      };\n\n      angular.forEach(schema.relationships, function(linkSchema, linkName) {\n        var linkSchemaObj = new AngularJsonAPISchemaLink(linkSchema, linkName, schema.type);\n        schema.relationships[linkName] = linkSchemaObj;\n        if (linkSchemaObj.included === true) {\n          include.get.push(linkName);\n          if (linkSchemaObj.type === 'hasOne') {\n            include.all.push(linkName);\n          }\n        }\n      });\n\n      angular.extend(_this, schema);\n\n      if (include.get.length > 0) {\n        _this.params.get.include = include.get.join(',');\n      }\n\n      if (include.all.length > 0) {\n        _this.params.all.include = include.all.join(',');\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchemaLink', AngularJsonAPILinkSchrapperLink);\n\n  function AngularJsonAPILinkSchrapperLink($log, pluralize) {\n\n    return AngularJsonAPISchemaLink;\n\n    function AngularJsonAPISchemaLink(linkSchema, linkName, type) {\n      var _this = this;\n\n      if (angular.isString(linkSchema)) {\n        _this.model = pluralize.plural(linkName);\n        _this.type = linkSchema;\n        _this.polymorphic = false;\n        _this.reflection = type;\n      } else {\n        if (linkSchema.type === undefined) {\n          $log.error('Schema of link without a type: ', linkSchema, linkName);\n        }\n\n        if (linkSchema.type !== 'hasMany' && linkSchema.type !== 'hasOne') {\n          $log.error('Schema of link with wrong type: ', linkSchema.type, 'available: hasOne, hasMany');\n        }\n\n        _this.model = linkSchema.model || pluralize.plural(linkName);\n        _this.type = linkSchema.type;\n        _this.polymorphic = linkSchema.polymorphic || false;\n\n        if (linkSchema.reflection === undefined) {\n          _this.reflection = _this.type === 'hasMany' ? pluralize.singular(type) : type;\n        } else {\n          _this.reflection = linkSchema.reflection;\n        }\n\n        _this.included = linkSchema.included || false;\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModel', AngularJsonAPIModel);\n\n  function AngularJsonAPIModel(AngularJsonAPIAbstractModel, AngularJsonAPISchema, $log) {\n\n    return {\n      model: modelFactory\n    };\n\n    function modelFactory(schemaObj, parentFactory) {\n      var Model = function(data, updatedAt, saved) {\n        var _this = this;\n\n        if (data.type !== _this.schema.type) {\n          $log.error('Data type other then declared in schema: ', data.type, ' instead of ', _this.schema.type);\n        }\n\n        AngularJsonAPIAbstractModel.call(_this, data, updatedAt, saved);\n\n        _this.form.parent = _this;\n      };\n\n      Model.prototype = Object.create(AngularJsonAPIAbstractModel.prototype);\n      Model.prototype.constructor = Model;\n\n      Model.prototype.schema = schemaObj;\n      Model.prototype.parentFactory = parentFactory;\n      Model.prototype.synchronize = parentFactory.synchronizer.synchronize.bind(parentFactory.synchronizer);\n\n      angular.forEach(schemaObj.functions, function(metaFunction, metaFunctionName) {\n        Model.prototype[metaFunctionName] = function() {\n          return metaFunction.apply(this, arguments);\n        };\n      });\n\n      return Model;\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIFactory', AngularJsonAPIFactoryWrapper);\n\n  function AngularJsonAPIFactoryWrapper(\n    AngularJsonAPIModel,\n    AngularJsonAPISchema,\n    AngularJsonAPICache,\n    AngularJsonAPICollection,\n    uuid4,\n    $rootScope,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIFactory.prototype.get = get;\n    AngularJsonAPIFactory.prototype.all = all;\n    AngularJsonAPIFactory.prototype.remove = remove;\n    AngularJsonAPIFactory.prototype.initialize = initialize;\n\n    AngularJsonAPIFactory.prototype.clear = clear;\n\n    return AngularJsonAPIFactory;\n\n    /**\n     * AngularJsonAPIFactory constructor\n     * @param {json} schema       Schema object\n     * @param {AngularJsonAPISynchronizer} synchronizer Synchronizer for the factory\n     */\n    function AngularJsonAPIFactory(schema, synchronizer) {\n      var _this = this;\n      var config = {\n        action: 'init'\n      };\n\n      _this.schema = new AngularJsonAPISchema(schema);\n      _this.cache = new AngularJsonAPICache(_this);\n\n      _this.synchronizer = synchronizer;\n      _this.synchronizer.factory = _this;\n\n      _this.Model = AngularJsonAPIModel.model(\n        _this.schema,\n        _this\n      );\n\n      _this.initialized = false;\n      _this.type = _this.schema.type;\n\n      synchronizer.factory = _this;\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'resolved', response);\n        _this.cache.fromJson(response.data);\n        _this.initialized = true;\n\n        response.finish();\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'rejected', response);\n        response.finish();\n        _this.initialized = true;\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'notify', response);\n      }\n    }\n\n    /**\n     * Get request\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id, synchronized\n     */\n    function get(id) {\n      var _this = this;\n\n      if (!uuid4.validate(id)) {\n        return $q.reject({errors: [{status: 0, statusText: 'Invalid id not uuid4'}]});\n      }\n\n      return _this.cache.get(id).refresh();\n    }\n\n    /**\n     * All request\n     * @param  {object} params Object associated with params (for filters/pagination etc.)\n     * @return {AngularJsonAPICollection} Collection of AngularJsonAPIModel, synchronized\n     */\n    function all(params) {\n      var _this = this;\n      params = params || {};\n\n      var collection = new AngularJsonAPICollection(\n        _this,\n        angular.extend(params, _this.schema.params.all)\n      );\n\n      collection.fetch();\n\n      return collection;\n    }\n\n    /**\n     * Remove request\n     * @param  {uuid} id\n     * @return {promise} Promise associated with the synchronization, in case of\n     * fail object is reverted to previous state\n     */\n    function remove(id) {\n      var _this = this;\n      var object = _this.cache.remove(id);\n\n      return object.remove();\n    }\n\n    /**\n     * Initialize new AngularJsonAPIModel\n     * @return {AngularJsonAPIModel} New model\n     */\n    function initialize(key, target) {\n      var _this = this;\n      var relationships = {};\n\n      if (key !== undefined && target !== undefined) {\n        var schema = _this.schema[key];\n\n        if (schema.type === 'hasOne') {\n          relationships[key] = {\n            data: target.data.id\n          };\n        } else if (schema.type === 'hasMany') {\n          $log.warn('Initialize with relationship disallowed for hasMany relationships');\n        }\n      }\n\n      var data = {\n        type: _this.type,\n        id: uuid4.generate(),\n        attributes: {},\n        relationships: relationships\n      };\n\n      var model = new _this.Model(data, false, false);\n\n      return model;\n    }\n\n    /**\n     * Clears localy saved data\n     * @return {promise} Promise associated with the synchronization resolves to nothing\n     */\n    function clear() {\n      var _this = this;\n      var deferred = $q.defer();\n      var config = {\n        action: 'clear'\n      };\n\n      _this.cache.clear();\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'resolved', response);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'resolved', response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'notify', response);\n\n        deferred.notify(response);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICollection', AngularJsonAPICollectionWrapper);\n\n  function AngularJsonAPICollectionWrapper(\n    $rootScope,\n    $injector,\n    $q\n  ) {\n\n    AngularJsonAPICollection.prototype.fetch = fetch;\n    AngularJsonAPICollection.prototype.refresh = fetch;\n    AngularJsonAPICollection.prototype.get = get;\n\n    return AngularJsonAPICollection;\n\n    /**\n     * Constructor\n     * @param {AngularJsonAPIFactory} factory Factory associated with the collection\n     * @param {object} params  Params associated with this factory (such as filters)\n     */\n    function AngularJsonAPICollection(factory, params) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.type = factory.schema.type;\n      _this.params = params;\n\n      _this.errors = {\n        synchronization: {\n          name: 'Synchronization',\n          description: 'Errors during synchronization',\n          errors: []\n        }\n      };\n\n      _this.error = false;\n\n      _this.data = _this.factory.cache.index(_this.params);\n      _this.synchronized = false;\n\n      $rootScope.$on('angularJsonAPI:' + _this.type + ':object:remove', remove);\n\n      function remove(event, status, object) {\n        var index;\n\n        if (status === 'resolved') {\n\n          index = _this.data.indexOf(object);\n          if (index > -1) {\n            _this.data.splice(index, 1);\n            _this.factory.cache.setIndexIds(_this.data);\n          }\n        }\n      }\n    }\n\n    /**\n     * Shortcut to this.factory.get\n     * @param  {uuid4} id Id of object]\n     * @return {AngularJsonAPIModel}          Model with id\n     */\n    function get(id) {\n      var _this = this;\n\n      return _this.factory.get(id);\n    }\n\n    /**\n     * Synchronizes collection with the server\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function fetch() {\n      var _this = this;\n      var deferred = $q.defer();\n      var $jsonapi = $injector.get('$jsonapi');\n      var config = {\n        action: 'all',\n        params: _this.params\n      };\n\n      _this.factory.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred.promise;\n\n      function resolve(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'resolved', _this, results);\n\n        _this.errors.synchronization.errors = [];\n        _this.data = $jsonapi.proccesResults(results.data);\n        _this.error = false;\n\n        _this.updatedAt = Date.now();\n        _this.synchronized = true;\n\n        _this.factory.cache.setIndexIds(_this.data);\n\n        results.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'rejected', _this, results);\n\n        _this.errors.synchronization.errors = results.errors;\n        _this.error = true;\n\n        results.finish();\n\n        deferred.reject(results);\n      }\n\n      function notify(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'notify', _this, results);\n\n        deferred.notify(results);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .provider('$jsonapi', jsonapiProvider);\n\n  function jsonapiProvider() {\n    var memory = {};\n    var names = [];\n    this.$get = jsonapiFactory;\n\n    function jsonapiFactory($log, AngularJsonAPIFactory) {\n      return {\n        form: form,\n        get: get,\n        remove: remove,\n        all: all,\n        addFactory: addFactory,\n        getFactory: getFactory,\n        clearAll: clearAll,\n        proccesResults: proccesResults,\n\n        allFactories: allFactories,\n        factoriesNames: factoriesNames\n      };\n\n      function allFactories() {\n        return memory;\n      }\n\n      function factoriesNames() {\n        return names;\n      }\n\n      function addFactory(schema, synchronization) {\n        var factory = new AngularJsonAPIFactory(schema, synchronization);\n\n        memory[schema.type] = factory;\n        names.push(schema.type);\n      }\n\n      function getFactory(type) {\n        return memory[type];\n      }\n\n      function form(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t add not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].saved.form;\n      }\n\n      function get(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].get(id);\n      }\n\n      function remove(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t remove not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].remove(id);\n      }\n\n      function all(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get all of not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].all();\n      }\n\n      function clearAll() {\n        angular.forEach(memory, function(factory) {\n          factory.clear();\n        });\n      }\n\n      function proccesResults(results) {\n        if (results === undefined) {\n          $log.error('Can\\'t proccess results:', results);\n        }\n\n        angular.forEach(results.included, function(data) {\n          getFactory(data.type).cache.addOrUpdate(data, true);\n        });\n\n        if (angular.isArray(results.data)) {\n          var objects = [];\n          angular.forEach(results.data, function(data) {\n            objects.push(getFactory(data.type).cache.addOrUpdate(data, true));\n          });\n\n          return objects;\n        } else {\n          return getFactory(results.data.type).cache.addOrUpdate(results.data, true);\n        }\n      }\n    }\n  }\n\n})();\n\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .config(function($logProvider) {\n    $logProvider.debugEnabled(false);\n  });\n})();\n"],"sourceRoot":"/source/"}