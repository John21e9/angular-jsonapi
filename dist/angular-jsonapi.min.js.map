{"version":3,"sources":["/source/jsonapi.module.js","/source/model/model-validator/model-validator.js","/source/model/model-linker/model-linker.js","angular-jsonapi.min.js","/source/model/model-form/model-form.js","/source/model/abstract-model/abstract-model.js","/source/factory/factory-cache/factory-cache.factory.js","/source/utils/lazy-property.js","/source/utils/kebab-case.js","/source/utils/all-settled.js","/source/synchronizations/synchronization-rest.js","/source/synchronizations/synchronization-prototype.js","/source/synchronizations/synchronization-local.js","/source/synchronizers/synchronizer-simple.js","/source/synchronizers/synchronizer-prototype.js","/source/model/model.js","/source/schema/schema.js","/source/schema/schema-link.js","/source/factory/factory.js","/source/collection/collection.js","/source/jsonapi.provider.js","/source/jsonapi.config.js"],"names":["angular","module","constant","pluralize","AngularJsonAPIModelValidatorService","validateForm","schema","data","validateField","key","_this","this","service","AngularJsonAPIModelLinkerService","$log","toLinkData","object","type","id","link","target","undefined","error","polymorphic","model","__addHasMany","__addHasOne","unlink","__removeHasMany","__removeHasOne","debug","relationships","linkData","isArray","indexOf","push","index","splice","$inject","AngularJsonAPIModelFormWrapper","AngularJsonAPIModelForm","parent","attributes","reset","toJson","copy","forEach","value","save","validator","errors","validation","validate","prototype","factory","AngularJsonAPIAbstractModelWrapper","uuid4","$rootScope","$injector","$q","AngularJsonAPIAbstractModel","saved","stable","removed","loadingCount","name","promises","__setData","form","resolve","response","$emit","update","finish","deferred","reject","notify","defer","hasErrors","config","action","hasOwnProperty","synchronize","then","promise","refresh","$jsonapi","proccesResults","get","params","remove","unlinkAll","parentFactory","cache","clearRemoved","revertRemove","removeLink","linksObj","reflectionKey","reflection","removeReflectionLink","bind","isObject","reflectionSchema","resolveReflection","rejectReflection","notifyReflection","status","statusText","validatedData","updatedAt","Date","now","setAttributes","validators","setRelationships","relationshipData","links","linkOne","length","getFactory","AngularJsonAPICacheWrapper","AngularJsonAPICache","size","indexIds","addOrUpdate","Model","fromJson","json","collection","objectData","clear","map","setIndexIds","array","element","isString","propertyName","callback","result","done","Object","defineProperty","call","enumerable","configurable","str","replace","toLowerCase","$provide","decorator","$delegate","allSettled","resolvedCallback","rejectedCallback","wrap","when","isFunction","success","reason","wrapped","all","AngularJsonAPISynchronizationRestWrapper","AngularJsonAPISynchronizationPrototype","toKebabCase","$http","AngularJsonAPISynchronizationRest","url","method","headers","resolveHttp","rejectHttp","add","rejectServerOffline","rejectNoConnection","Accept","Content-Type","synchronization","create","constructor","AngularJsonAPISynchronizationPrototypeWrapper","allHooks","state","beginHooks","beforeHooks","synchronizationHooks","afterHooks","finishHooks","options","hookName","loading","begin","beforeSynchro","afterSynchro","before","after","AngularJsonAPISynchronizationLocalWrapper","$window","AngularJsonAPISynchronizationLocal","prefix","init","synchronizer","localStorage","getItem","removeItem","updateStorage","setItem","__updateStorage","AngularJsonAPISynchronizerSimpleWrapper","AngularJsonAPISynchronizerPrototype","AngularJsonAPISynchronizerSimple","synchronizations","step","resolved","results","hook","rejected","noop","AngularJsonAPISynchronizerPrototypeWrapper","AngularJsonAPIModel","AngularJsonAPISchema","modelFactory","schemaObj","functions","metaFunction","metaFunctionName","apply","arguments","AngularJsonAPISchemaWrapper","AngularJsonAPISchemaLink","include","linkSchema","linkName","linkSchemaObj","included","extend","join","AngularJsonAPILinkSchrapperLink","plural","singular","AngularJsonAPIFactoryWrapper","AngularJsonAPICollection","AngularJsonAPIFactory","initialized","fetch","initialize","generate","AngularJsonAPICollectionWrapper","event","description","$on","jsonapiProvider","jsonapiFactory","addFactory","memory","names","clearAll","objects","allFactories","factoriesNames","$get","provider","$logProvider","debugEnabled"],"mappings":"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","file":"angular-jsonapi.min.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi', ['uuid4'])\n  /* global pluralize: false */\n  .constant('pluralize', pluralize);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelValidatorService', AngularJsonAPIModelValidatorService);\n\n  function AngularJsonAPIModelValidatorService() {\n    var _this = this;\n    _this.validateForm = validateForm;\n    _this.validateField = validateField;\n\n    return this;\n\n    /**\n     * Validates form\n     * @param  {object} data Form data\n     * @return {object} Errors object indexed by keys\n     */\n    function validateForm(schema, data) {\n      var _this = this;\n\n      return {};\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(schema, key) {\n      var _this = this;\n\n      return [];\n    }\n\n    // function __validate(validator, attributeValue, attributeName) {\n    //   var errors = [];\n    //   if (angular.isArray(validator)) {\n    //     angular.forEach(validator, function(element) {\n    //       errors = errors.concat(__validate(element, attributeValue, attributeName));\n    //     });\n    //   } else if (angular.isFunction(validator)) {\n    //     var err = validator(attributeValue, attributeName);\n    //     if (angular.isArray(err)) {\n    //       errors.concat(err);\n    //     } else {\n    //       $log.error(\n    //         'Wrong validator type it should return array of errors instead of: ' +\n    //           err.toString()\n    //       );\n    //     }\n    //   } else if (angular.isString(validator)) {\n    //     if (validator === 'text' || validator === 'string') {\n    //       if (!angular.isString(attributeValue)) {\n    //         errors.push(attributeName + ' is not a string ');\n    //       }\n    //     } else if (validator === 'number' || validator === 'integer') {\n    //       if (parseInt(attributeValue).toString() !== attributeValue.toString()) {\n    //         errors.push(attributeName + ' is not a number');\n    //       }\n    //     } else if (validator === 'uuid4') {\n    //       if (!uuid4.validate(attributeValue)) {\n    //         errors.push(attributeName + ' is not a uuid4');\n    //       }\n    //     } else if (validator === 'required') {\n    //       if (attributeValue.toString().length === 0) {\n    //         errors.push(attributeName + ' is empty');\n    //       }\n    //     } else {\n    //       $log.error('Wrong validator type: ' + validator.toString());\n    //     }\n    //   } else if (angular.isObject(validator)) {\n    //     if (validator.maxlength !== undefined && attributeValue.length > validator.maxlength) {\n    //       errors.push(attributeName + ' is too long max ' + validator.maxlength);\n    //     }\n\n    //     if (validator.minlength !== undefined && attributeValue.length < validator.minlength) {\n    //       errors.push(attributeName + ' is too short min ' + validator.minlength);\n    //     }\n\n    //     if (validator.maxvalue !== undefined && parseInt(attributeValue) > validator.maxvalue) {\n    //       errors.push(attributeName + ' is too big max ' + validator.maxvalue);\n    //     }\n\n    //     if (validator.minvalue !== undefined && parseInt(attributeValue) < validator.minvalue) {\n    //       errors.push(attributeName + ' is too small min ' + validator.minvalue);\n    //     }\n    //   } else {\n    //     $log.error('Wrong validator type: ' + validator.toString());\n    //   }\n\n    //   return errors;\n    // }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelLinkerService', AngularJsonAPIModelLinkerService);\n\n  function AngularJsonAPIModelLinkerService($log) {\n    var _this = this;\n\n    _this.toLinkData = toLinkData;\n\n    _this.link = link;\n    _this.unlink = unlink;\n\n    return this;\n\n    /**\n     * Extracts data needed for relationship linking from object\n     * @param  {AngularJsonAPIModel} object Object\n     * @return {json}        Link data\n     */\n    function toLinkData(object) {\n      if (object === null) {\n        return null;\n      }\n\n      return {type: object.data.type, id: object.data.id};\n    }\n\n    /**\n     * Add target to object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be linked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function link(object, key, target, schema) {\n\n      if (target === undefined) {\n        $log.error('Can\\'t link non existing object', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (object === undefined) {\n        $log.error('Can\\'t add link to non existing object', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema === undefined) {\n        $log.error('Can\\'t add link not present in schema:', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (target !== null && schema.polymorphic === false && schema.model !== target.data.type) {\n        $log.error('This relation is not polymorphic, expected: ' + schema.model + ' instead of ' + target.data.type);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema.type === 'hasMany') {\n        return __addHasMany(object, key, target, schema);\n      } else if (schema.type === 'hasOne') {\n        return __addHasOne(object, key, target, schema);\n      }\n    }\n\n    /**\n     * Remove target from object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be unlinked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function unlink(object, key, target, schema) {\n      if (schema === undefined) {\n        $log.error('Can\\'t remove link not present in schema: ' + key);\n        return;\n      }\n\n      if (schema.type === 'hasMany') {\n        return __removeHasMany(object, key, target, schema);\n      } else if (schema.type === 'hasOne') {\n        return __removeHasOne(object, key, target, schema);\n      }\n    }\n\n    /////////////\n    // Private //\n    /////////////\n\n    function __addHasOne(object, key, target, schema) {\n      $log.debug('addHasOne', object, key, target, schema);\n\n      if (target !== null && object.relationships[key] === target) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is already linked to', object.data.type + ':' + object.data.id, 'as', key);\n        return false;\n      } else {\n        object.relationships[key] = target;\n        object.data.relationships[key].data = toLinkData(target);\n      }\n\n      return true;\n    }\n\n    function __addHasMany(object, key, target, schema) {\n      var linkData = toLinkData(target);\n      $log.debug('addHasMany', object, key, target, schema);\n\n      if (angular.isArray(object.relationships[key]) && object.relationships[key].indexOf(target) > -1) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is already linked to', object.data.type + ':' + object.data.id, 'as', key);\n        return false;\n      } else {\n        object.relationships[key] = object.relationships[key] || [];\n        object.relationships[key].push(target);\n        object.data.relationships[key].data = object.data.relationships[key].data || [];\n        object.data.relationships[key].data.push(linkData);\n      }\n\n      return true;\n    }\n\n    function __removeHasOne(object, key, target, schema) {\n      $log.debug('removeHasOne', object, key, target, schema);\n\n      if (target !== undefined && object.relationships[key] !== target) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is not linked to', object.data.type + ':' + object.data.id, 'as', key);\n        return false;\n      } else {\n        object.relationships[key] = null;\n        object.data.relationships[key].data = undefined;\n      }\n\n      return true;\n    }\n\n    function __removeHasMany(object, key, target, schema) {\n      $log.debug('removeHasMany', object, key, target, schema);\n\n      if (target === undefined) {\n        object.relationships[key] = [];\n        object.data.relationships[key].data = [];\n      } else if (object.relationships[key] === undefined) {\n        // $log.warn(target.data.type + ':' + target.data.id, 'is links with key', key, 'are undefined');\n        return;\n      } else {\n        var index = object.relationships[key].indexOf(target);\n\n        if (index === -1) {\n          // $log.warn(target.data.type + ':' + target.data.id, 'is not linked to', object.data.type + ':' + object.data.id, 'as', key);\n          return false;\n        } else {\n          object.relationships[key].splice(index, 1);\n          object.data.relationships[key].data.splice(index, 1);\n        }\n      }\n\n      return true;\n    }\n\n  }\n})();\n","!function(){\"use strict\";angular.module(\"angular-jsonapi\",[\"uuid4\"]).constant(\"pluralize\",pluralize)}(),function(){\"use strict\";function t(){function t(t,e){return{}}function e(t,e){return[]}var n=this;return n.validateForm=t,n.validateField=e,this}angular.module(\"angular-jsonapi\").service(\"AngularJsonAPIModelValidatorService\",t)}(),function(){\"use strict\";function t(t){function e(t){return null===t?null:{type:t.data.type,id:t.data.id}}function n(e,n,r,i){return void 0===r?(t.error(\"Can't link non existing object\",e,n,r,i),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",r.data.type,r),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):void 0===e?(t.error(\"Can't add link to non existing object\",e,n,r,i),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",r.data.type,r),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):void 0===i?(t.error(\"Can't add link not present in schema:\",e,n,r,i),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",r.data.type,r),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):null!==r&&i.polymorphic===!1&&i.model!==r.data.type?(t.error(\"This relation is not polymorphic, expected: \"+i.model+\" instead of \"+r.data.type),t.error(\"Object:\",e.data.type,e),t.error(\"Target:\",r.data.type,r),t.error(\"Key:\",n),t.error(\"Schema:\",i),!1):\"hasMany\"===i.type?o(e,n,r,i):\"hasOne\"===i.type?a(e,n,r,i):void 0}function r(e,n,r,a){return void 0===a?void t.error(\"Can't remove link not present in schema: \"+n):\"hasMany\"===a.type?s(e,n,r,a):\"hasOne\"===a.type?i(e,n,r,a):void 0}function a(n,r,a,o){return t.debug(\"addHasOne\",n,r,a,o),null!==a&&n.relationships[r]===a?!1:(n.relationships[r]=a,n.data.relationships[r].data=e(a),!0)}function o(n,r,a,o){var i=e(a);return t.debug(\"addHasMany\",n,r,a,o),angular.isArray(n.relationships[r])&&n.relationships[r].indexOf(a)>-1?!1:(n.relationships[r]=n.relationships[r]||[],n.relationships[r].push(a),n.data.relationships[r].data=n.data.relationships[r].data||[],n.data.relationships[r].data.push(i),!0)}function i(e,n,r,a){return t.debug(\"removeHasOne\",e,n,r,a),void 0!==r&&e.relationships[n]!==r?!1:(e.relationships[n]=null,e.data.relationships[n].data=void 0,!0)}function s(e,n,r,a){if(t.debug(\"removeHasMany\",e,n,r,a),void 0===r)e.relationships[n]=[],e.data.relationships[n].data=[];else{if(void 0===e.relationships[n])return;var o=e.relationships[n].indexOf(r);if(-1===o)return!1;e.relationships[n].splice(o,1),e.data.relationships[n].data.splice(o,1)}return!0}var c=this;return c.toLinkData=e,c.link=n,c.unlink=r,this}angular.module(\"angular-jsonapi\").service(\"AngularJsonAPIModelLinkerService\",t),t.$inject=[\"$log\"]}(),function(){\"use strict\";function t(t,e){function n(t){var e=this;e.data={id:t.data.id,type:t.data.type,attributes:{},relationships:{}},e.relationships={},e.parent=t,e.schema=t.schema,e.reset()}function r(){var t=this,e=angular.copy(t.data),n={};return angular.forEach(e.relationships,function(t,e){void 0!==t.data&&(n[e]=t)}),e.relationships=n,{data:e}}function a(){var t=this;return t.parent.save()}function o(){var t=this;angular.forEach(t.schema.attributes,function(e,n){t.data.attributes[n]=t.parent.data.attributes[n]||\"\"}),angular.forEach(t.schema.relationships,function(e,n){t.data.relationships[n]=t.parent.data.relationships[n]||{},t.relationships[n]=t.parent.relationships[n]}),t.errors={validation:{}}}function i(){var e,n=this;return e=t.validateForm(n.data),n.errors.validation=e,e}function s(e){var n,r=this;return n=t.validateField(r.data[e],e),r.errors.validation[e]=n,n}function c(t,n){var r=this,a=r.schema.relationships[t];return e.link(r,t,n,a)}function u(t,n){var r=this,a=r.schema.relationships[t];return e.unlink(r,t,n,a)}return n.prototype.save=a,n.prototype.reset=o,n.prototype.validate=i,n.prototype.validateField=s,n.prototype.link=c,n.prototype.unlink=u,n.prototype.toJson=r,n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIModelForm\",t),t.$inject=[\"AngularJsonAPIModelValidatorService\",\"AngularJsonAPIModelLinkerService\"]}(),function(){\"use strict\";function t(t,e,n,r,a,o,i){function s(e,n,r){var a=this;e.relationships=e.relationships||{},a.saved=n||!0,a.stable=r||!0,a[\"synchronized\"]=!1,a.removed=!1,a.loadingCount=0,a.data={relationships:{},attributes:{}},a.relationships={},angular.forEach(a.schema.relationships,function(t,e){a.relationships[e]=void 0}),a.errors={validation:{}},a.promises={},v(a,e),a.form=new t(a)}function c(){function t(t){r.$emit(\"angularJsonAPI:\"+a.data.type+\":object:save\",\"resolved\",a,t),a.update(a.form.data),t.finish(),o.resolve(a)}function e(t){r.$emit(\"angularJsonAPI:\"+a.data.type+\":object:save\",\"rejected\",a,t),t.finish(),o.reject(t.errors)}function n(t){r.$emit(\"angularJsonAPI:\"+a.data.type+\":object:save\",\"notify\",a,t),o.notify(t.errors)}var a=this,o=i.defer(),s=!1,c={action:\"update\",object:a};a.saved===!1&&(c.action=\"add\");var u=a.form.validate();for(var l in u)u.hasOwnProperty(l)&&(s=!0);return s===!0?o.reject(u):a.synchronize(c).then(t,e,n),o.promise}function u(){var t=this;return t.form.reset()}function l(){function t(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:refresh\",\"resolved\",u,t),s.proccesResults(t.data),t.finish(),u[\"synchronized\"]=!0,u.stable=!0,c.resolve(t)}function e(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:refresh\",\"rejected\",u,t),t.finish(),c.reject(t)}function n(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:refresh\",\"notify\",u,t),c.notify(t)}var s=a.get(\"$jsonapi\"),c=i.defer(),u=this,l={action:\"refresh\",object:u,params:u.schema.params.get};return u.saved===!1?(o.error(\"Can't refresh new object\"),c.reject(\"Can't refresh new object\")):u.synchronize(l).then(t,e,n),c.promise}function d(){var t=this,e=angular.copy(t.data),n={};return angular.forEach(e.relationships,function(t,e){void 0!==t.data&&(n[e]=t)}),e.relationships=n,{data:e}}function f(){function t(t){r.$emit(\"angularJsonAPI:\"+a.data.type+\":object:remove\",\"resolved\",a,t),a.removed=!0,a.unlinkAll(),a.parentFactory.cache.clearRemoved(a.data.id),t.finish(),o.resolve(t)}function e(t){r.$emit(\"angularJsonAPI:\"+a.data.type+\":object:remove\",\"rejected\",a,t),a.parentFactory.cache.revertRemove(a.data.id),t.finish(),o.reject(t)}function n(t){r.$emit(\"angularJsonAPI:\"+a.data.type+\":object:remove\",\"notify\",a,t),o.notify(t)}var a=this,o=i.defer(),s={action:\"remove\",object:a};return a.parentFactory.cache.remove(a.data.id),a.saved===!1?o.resolve():a.synchronize(s).then(t,e,n),o.promise}function h(t){function n(t,e){var n=o.schema.relationships[e],r=n.reflection;angular.isArray(t)?angular.forEach(t,a.bind(void 0,r)):angular.isObject(t)&&a(r,t),\"hasOne\"===n.type?o.relationships[e]=null:\"hasMany\"===n.type&&(o.relationships[e]=[])}function a(t,n){function a(t){r.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"resolve\",o,t),t.finish(),s.resolve(o)}function i(t){r.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"rejected\",o,t),t.finish(),s.reject(t)}function c(t){r.$emit(\"angularJsonAPI:\"+o.data.type+\":object:unlinkReflection\",\"notify\",o,t),t.finish(),s.notify(t)}var u=n.schema.relationships[t];e.unlink(n,t,o,u),n.synchronize({action:\"unlinkReflection\",object:n,target:o,key:t}).then(a,i,c)}var o=this,s=i.defer();return void 0===t?angular.forEach(o.relationships,n):n(o.relationships[t],t),s.promise}function p(t,n){function a(a){function o(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"resolve\",u,t),t.finish(),c.resolve(u)}function i(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"rejected\",u,t),t.finish(),c.reject(t)}function s(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:linkReflection\",\"notify\",u,t),t.finish(),c.notify(t)}r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"resolved\",u,a),e.link(u,t,n,l),e.link(n,d,u,f),u.stable=!0,a.finish(),n.synchronize({action:\"linkReflection\",object:n,target:u,key:d}).then(o,i,s)}function o(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"rejected\",u,t),c.reject(t.errors),t.finish(),c.reject(t)}function s(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:link\",\"notify\",u,t),c.notify(t)}var c=i.defer(),u=this,l=u.schema.relationships[t],d=l.reflection;if(void 0===n)return c.reject({errors:[{status:0,statusText:\"Can't link undefined\"}]}),c.promise;var f=n.schema.relationships[d];return u.synchronize({action:\"link\",object:u,target:n,key:t}).then(a,o,s),c.promise}function y(t,n){function a(a){function o(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"resolve\",u,t),t.finish(),c.resolve(u)}function i(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"rejected\",u,t),t.finish(),c.reject(t)}function s(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlinkReflection\",\"notify\",u,t),t.finish(),c.notify(t)}r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"resolved\",u,a),e.unlink(u,t,n,l),e.unlink(n,d,u,f),u.stable=!0,a.finish(),n.synchronize({action:\"unlinkReflection\",object:n,target:u,key:d}).then(o,i,s)}function o(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"rejected\",u,t),c.reject(t.errors),t.finish(),c.reject(t)}function s(t){r.$emit(\"angularJsonAPI:\"+u.data.type+\":object:unlink\",\"notify\",u,t),c.notify(t)}var c=i.defer(),u=this,l=u.schema.relationships[t],d=l.reflection;if(void 0===n)return c.reject({errors:[{status:0,statusText:\"Can't unlink undefined\"}]}),c.promise;var f=n.schema.relationships[d];return u.synchronize({action:\"unlink\",object:u,target:n,key:t}).then(a,o,s),c.promise}function g(t){var e=this;return v(e,t)===!0?(e.reset(),e[\"synchronized\"]=!0,e.updatedAt=Date.now(),!0):!1}function v(t,r){function i(e,n){t.data.attributes[n]=r.attributes[n]}function s(e,n){var a=r.relationships[n];return void 0===a?void(t.data.relationships[n]={data:void 0}):(t.data.relationships[n]=t.data.relationships[n]||{},t.data.relationships[n].links=a.links,void(\"hasOne\"===e.type?c(t,n,e,a.data):\"hasMany\"===e.type&&(angular.isArray(a.data)&&0===a.data.length?(t.data.relationships[n].data=[],t.unlinkAll(n)):angular.forEach(a.data,c.bind(void 0,t,n,e)))))}function c(t,n,r,a){if(null===a)return void e.link(t,n,null,r);if(void 0!==a){var o=u.getFactory(a.type),i=o.cache.get(a.id),s=r.reflection,c=i.schema.relationships[s];e.link(t,n,i,r),s!==!1&&e.link(i,s,t,c)}}var u=a.get(\"$jsonapi\"),l=t.schema;return t.data.id=r.id,t.data.type=r.type,t.parentFactory.schema.type!==r.type?(o.error(\"Different type then factory\",t.parentFactory.schema.type,r),!1):n.validate(t.data.id)?(r.attributes=r.attributes||{},r.relationships=r.relationships||{},angular.forEach(l.attributes,i),angular.forEach(l.relationships,s),!0):(o.error(\"Invalid id\"),!1)}return s.prototype.refresh=l,s.prototype.remove=f,s.prototype.reset=u,s.prototype.save=c,s.prototype.update=g,s.prototype.link=p,s.prototype.unlink=y,s.prototype.unlinkAll=h,s.prototype.toJson=d,s}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIAbstractModel\",t),t.$inject=[\"AngularJsonAPIModelForm\",\"AngularJsonAPIModelLinkerService\",\"uuid4\",\"$rootScope\",\"$injector\",\"$log\",\"$q\"]}(),function(){\"use strict\";function t(t,e){function n(t){var e=this;e.factory=t,e.data={},e.removed={},e.size=0,e.indexIds=[]}function r(t,n){var r=this,a=t.id;return void 0===a?void e.error(\"Can't add data without id!\",t):(void 0===r.data[a]?(r.data[a]=new r.factory.Model(t,!0,n),r.size+=1):r.data[a].update(t),r.data[a])}function a(t){var e=this,n=angular.fromJson(t);angular.isObject(n)&&void 0!==n.data&&(e.updatedAt=n.updatedAt,e.indexIds=n.indexIds,angular.forEach(n.data,function(t){var n=t.data;e.addOrUpdate(n,!1)}))}function o(){var t=this,e={data:{},updatedAt:t.updatedAt,indexIds:t.indexIds};return angular.forEach(t.data,function(t,n){e.data[n]=t.toJson()}),angular.toJson(e)}function i(){var t=this;t.data={},t.removed={}}function s(t){var e=this;return void 0===e.data[t]&&(e.data[t]=new e.factory.Model({id:t,type:e.factory.Model.prototype.schema.type},!0,!1)),e.data[t]}function c(t){var e=this;return e.indexIds.map(e.get.bind(e))}function u(e){var n=this;n.indexIds=[],angular.forEach(e,function(e){angular.isString(e)&&t.validate(e)?n.indexIds.push(e):angular.isObject(e)&&t.validate(e.data.id)&&n.indexIds.push(e.data.id)})}function l(t){var e=this;return void 0!==e.data[t]&&(e.removed[t]=e.data[t],delete e.data[t],e.size-=1),e.removed[t]}function d(t){var e=this;return void 0!==e.removed[t]&&(e.data[t]=e.removed[t],delete e.removed[t],e.size+=1),e.data[t]}function f(t){var e=this;delete e.removed[t]}return n.prototype.get=s,n.prototype.index=c,n.prototype.setIndexIds=u,n.prototype.addOrUpdate=r,n.prototype.fromJson=a,n.prototype.toJson=o,n.prototype.clear=i,n.prototype.remove=l,n.prototype.revertRemove=d,n.prototype.clearRemoved=f,n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPICache\",t),t.$inject=[\"uuid4\",\"$log\"]}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").constant(\"lazyProperty\",function(t,e,n){var r,a;Object.defineProperty(t,e,{get:function(){return a||(a=!0,r=n.call(t)),r},enumerable:!0,configurable:!0})})}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").constant(\"toKebabCase\",function(t){return t.replace(/([a-z])([A-Z])/g,\"$1-$2\").toLowerCase()})}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").config([\"$provide\",function(t){t.decorator(\"$q\",[\"$delegate\",function(t){var e=t;return e.allSettled=e.allSettled||function(t,n,r){function a(t){return e.when(t).then(function(t){return angular.isFunction(n)&&n(t),{success:!0,value:t}},function(t){return angular.isFunction(r)&&r(t),{success:!1,reason:t}})}var o=angular.isArray(t)?[]:{};return angular.forEach(t,function(t,e){o.hasOwnProperty(e)||(o[e]=a(t))}),e.all(o)},e}])}])}(),function(){\"use strict\";function t(t,e,n){function r(e){var n=this;n.state={},t.call(n,e),angular.forEach(e,function(t){t.synchronizer=n})}function a(r){function a(t){d.notify({step:\"synchronization\",data:t})}function o(t){d.notify({step:\"synchronization\",errors:t})}function i(t){u.state[f]=u.state[f]||{},u.state[f].success=!0,angular.forEach(t,function(t){t.success===!1&&(u.state[f].success=!1)}),angular.forEach(u.synchronizations,function(e){angular.forEach(e.afterHooks[f],function(e){d.notify({step:\"after\",errors:e.call(u,r,t)})})});var e,n=[];angular.forEach(t,function(t){t.success===!0?e=t.value:n.push(t.reason)}),n.length>0?d.reject({data:e,finish:s,errors:n}):d.resolve({data:e,finish:s,errors:n})}function s(){angular.forEach(u.synchronizations,function(t){angular.forEach(t.finishHooks[f],function(t){d.notify({step:\"finish\",errors:t.call(u,r)})})})}function c(t){n.error(\"All settled rejected! Something went wrong\"),d.reject({finish:angular.noop,errors:t})}var u=this,l=[],d=e.defer(),f=r.action;return t.prototype.synchronize.call(u,r),angular.forEach(u.synchronizations,function(t){angular.forEach(t.beginHooks[f],function(t){d.notify({step:\"begin\",data:t.call(u,r)})})}),angular.forEach(u.synchronizations,function(t){angular.forEach(t.beforeHooks[f],function(t){d.notify({step:\"before\",data:t.call(u,r)})})}),angular.forEach(u.synchronizations,function(t){angular.forEach(t.synchronizationHooks[f],function(t){l.push(t.call(u,r))})}),e.allSettled(l,a,o).then(i,c),d.promise}return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r.prototype.synchronize=a,r}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizerSimple\",t),t.$inject=[\"AngularJsonAPISynchronizerPrototype\",\"$q\",\"$log\"]}(),function(){\"use strict\";function t(t){function e(t){var e=this;e.synchronizations=t}function n(e){var n=this;t.debug(\"Synchro Collection\",n.factory.Model.prototype.schema.type,e),void 0===e.action&&t.error(\"Can't synchronize undefined action\",e)}return e.prototype.synchronize=n,e}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizerPrototype\",t),t.$inject=[\"$log\"]}(),function(){\"use strict\";function t(t,e,n,r,a){function o(o){function i(t){return a({method:\"GET\",headers:g,url:o,params:t.params||{}}).then(h,p)}function s(t){return a({method:\"GET\",headers:g,url:o+\"/\"+t.object.data.id,params:t.params||{}}).then(h,p)}function c(t){return a({method:\"DELETE\",headers:g,url:o+\"/\"+t.object.data.id}).then(h,p)}function u(t){var e=r.defer();return t.object.removed===!0?e.reject({errors:[{status:0,statusText:\"Object has been removed\"}]}):void 0!==t.target&&void 0===t.target.data.id?e.reject({errors:[{status:0,statusText:\"Can't unlink object without id through rest call\"}]}):void 0===t.target?a({method:\"PUT\",headers:g,data:{data:[]},url:o+\"/\"+t.object.data.id+\"/relationships/\"+n(t.key)}).then(h,p).then(e.resolve,e.reject):a({method:\"DELETE\",headers:g,url:o+\"/\"+t.object.data.id+\"/relationships/\"+n(t.key)+\"/\"+t.target.data.id}).then(h,p).then(e.resolve,e.reject),e.promise}function l(t){var i=r.defer();return t.object.removed===!0?i.reject({errors:[{status:0,statusText:\"Object has been removed\"}]}):void 0===t.target||void 0===t.target.data.id?i.reject({errors:[{status:0,statusText:\"Can't link object without id through rest call\"}]}):a({method:\"POST\",headers:g,url:o+\"/\"+t.object.data.id+\"/relationships/\"+n(t.key),data:{data:[e.toLinkData(t.target)]}}).then(h,p).then(i.resolve,i.reject),i.promise}function d(t){return a({method:\"PUT\",headers:g,url:o+\"/\"+t.object.data.id,data:t.object.form.toJson()}).then(h,p)}function f(t){return a({method:\"POST\",headers:g,url:o+\"/\",data:t.object.form.toJson()}).then(h,p)}function h(t){return r.resolve(t.data)}function p(t){function e(){o.reject({status:t.status,statusText:\"Server is offline\"})}function n(){o.reject({status:t.status,statusText:\"No internet connection\"})}var o=r.defer();return 0===t.status?a({method:\"GET\",url:\"https://status.cloud.google.com/incidents.schema.json\"}).then(e,n):o.reject({status:t.status,statusText:t.statusText}),o.promise}var y=this,g={Accept:\"application/vnd.api+json\",\"Content-Type\":\"application/vnd.api+json\"};t.call(y),y.synchronization(\"remove\",c),y.synchronization(\"unlink\",u),y.synchronization(\"link\",l),y.synchronization(\"update\",d),y.synchronization(\"add\",f),y.synchronization(\"all\",i),y.synchronization(\"get\",s),y.synchronization(\"refresh\",s)}return o.prototype=Object.create(t.prototype),o.prototype.constructor=o,o}angular.module(\"angular-jsonapi-rest\",[\"angular-jsonapi\"]).factory(\"AngularJsonAPISynchronizationRest\",t),t.$inject=[\"AngularJsonAPISynchronizationPrototype\",\"AngularJsonAPIModelLinkerService\",\"toKebabCase\",\"$q\",\"$http\"]}(),function(){\"use strict\";function t(){function t(){var t=this,e=[\"add\",\"init\",\"get\",\"all\",\"clear\",\"remove\",\"unlink\",\"unlinkReflection\",\"link\",\"linkReflection\",\"update\",\"refresh\"];t.state={},t.beginHooks={},t.beforeHooks={},t.synchronizationHooks={},t.afterHooks={},t.finishHooks={},t.options={},angular.forEach(e,function(e){t.beginHooks[e]=[],t.beforeHooks[e]=[],t.synchronizationHooks[e]=[],t.afterHooks[e]=[],t.finishHooks[e]=[],t.state[e]={loading:!1,success:!0}})}function e(t,e){var n=this;n.beginHooks[t].push(e)}function n(t,e){var n=this;n.finishHooks[t].push(e)}function r(t,e){var n=this;n.beforeHooks[t].push(e)}function a(t,e){var n=this;n.afterHooks[t].push(e)}function o(t,e){var n=this;n.synchronizationHooks[t].push(e)}return t.prototype.before=r,t.prototype.after=a,t.prototype.begin=e,t.prototype.finish=n,t.prototype.synchronization=o,t}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISynchronizationPrototype\",t)}(),function(){\"use strict\";function t(t,e,n){function r(r){function a(){var t=s.synchronizer.factory.schema.type;return n.when(e.localStorage.getItem(r+\".\"+t))}function o(){var t=s.synchronizer.factory.schema.type;e.localStorage.removeItem(r+\".\"+t)}function i(){var t=s.synchronizer.factory.schema.type,n=s.synchronizer.factory.cache;e.localStorage.setItem(r+\".\"+t,n.toJson())}var s=this;r=r||\"AngularJsonAPI\",s.__updateStorage=i,t.call(s),s.synchronization(\"init\",a),s.begin(\"clear\",o),s.begin(\"remove\",i),s.begin(\"refresh\",i),s.begin(\"unlink\",i),s.begin(\"unlinkReflection\",i),s.begin(\"link\",i),s.begin(\"linkReflection\",i),s.begin(\"update\",i),s.begin(\"add\",i),s.finish(\"get\",i),s.finish(\"all\",i),s.finish(\"init\",i),s.finish(\"clear\",i),s.finish(\"remove\",i),s.finish(\"refresh\",i),s.finish(\"unlink\",i),s.finish(\"unlinkReflection\",i),s.finish(\"link\",i),s.finish(\"linkReflection\",i),s.finish(\"update\",i),s.finish(\"add\",i),s.finish(\"get\",i),s.finish(\"all\",i)}return r.prototype=Object.create(t.prototype),r.prototype.constructor=r,r}angular.module(\"angular-jsonapi-local\",[\"angular-jsonapi\"]).factory(\"AngularJsonAPISynchronizationLocal\",t),t.$inject=[\"AngularJsonAPISynchronizationPrototype\",\"$window\",\"$q\"]}(),function(){\"use strict\";function t(t,e,n){function r(t){var e=this,r=t.include||{};t.include=r,r.get=t.include.get||[],r.all=t.include.all||[],e.params={get:{},all:{}},angular.forEach(t.relationships,function(e,a){var o=new n(e,a,t.type);t.relationships[a]=o,o.included===!0&&(r.get.push(a),\"hasOne\"===o.type&&r.all.push(a))}),angular.extend(e,t),r.get.length>0&&(e.params.get.include=r.get.join(\",\")),r.all.length>0&&(e.params.all.include=r.all.join(\",\"))}return r}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISchema\",t),t.$inject=[\"$log\",\"pluralize\",\"AngularJsonAPISchemaLink\"]}(),function(){\"use strict\";function t(t,e){function n(n,r,a){var o=this;angular.isString(n)?(o.model=e.plural(r),o.type=n,o.polymorphic=!1,o.reflection=a):(void 0===n.type&&t.error(\"Schema of link without a type: \",n,r),\"hasMany\"!==n.type&&\"hasOne\"!==n.type&&t.error(\"Schema of link with wrong type: \",n.type,\"available: hasOne, hasMany\"),o.model=n.model||e.plural(r),o.type=n.type,o.polymorphic=n.polymorphic||!1,o.reflection=void 0===n.reflection?\"hasMany\"===o.type?e.singular(a):a:n.reflection,o.included=n.included||!1)}return n}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPISchemaLink\",t),t.$inject=[\"$log\",\"pluralize\"]}(),function(){\"use strict\";function t(t,e,n){function r(e,r){var a=function(e,r,a){var o=this;e.type!==o.schema.type&&n.error(\"Data type other then declared in schema: \",e.type,\" instead of \",o.schema.type),t.call(o,e,r,a),o.form.parent=o};return a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a.prototype.schema=e,a.prototype.parentFactory=r,a.prototype.synchronize=r.synchronizer.synchronize.bind(r.synchronizer),angular.forEach(e.functions,function(t,e){a.prototype[e]=function(){return t.apply(this,arguments)}}),a}return{model:r}}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIModel\",t),t.$inject=[\"AngularJsonAPIAbstractModel\",\"AngularJsonAPISchema\",\"$log\"]}(),function(){\"use strict\";function t(t,e,n,r,a,o,i){function s(r,a){function i(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"resolved\",t),u.cache.fromJson(t.data),u.initialized=!0,t.finish()}function s(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"rejected\",t),t.finish(),u.initialized=!0}function c(t){o.$emit(\"angularJsonAPI:\"+u.type+\":factory:init\",\"notify\",t)}var u=this,l={action:\"init\"};u.schema=new e(r),u.cache=new n(u),u.synchronizer=a,u.synchronizer.factory=u,u.Model=t.model(u.schema,u),u.initialized=!1,u.type=u.schema.type,a.factory=u,u.synchronizer.synchronize(l).then(i,s,c)}function c(t){var e=this;return a.validate(t)?e.cache.get(t).refresh():i.reject({errors:[{status:0,statusText:\"Invalid id not uuid4\"}]})}function u(t){var e=this;t=t||{};var n=new r(e,angular.extend(t,e.schema.params.all));return n.fetch(),n}function l(t){var e=this,n=e.cache.remove(t);return n.remove()}function d(){var t=this,e={type:t.type,id:a.generate(),attributes:{},relationships:{}},n=new t.Model(e,!1,!1);return n}function f(){function t(t){o.$emit(\"angularJsonAPI:\"+r.type+\":factory:clear\",\"resolved\",t),t.finish(),a.resolve(t)}function e(t){o.$emit(\"angularJsonAPI:\"+r.type+\":factory:clear\",\"resolved\",t),t.finish(),a.reject(t)}function n(t){o.$emit(\"angularJsonAPI:\"+r.type+\":factory:clear\",\"notify\",t),a.notify(t)}var r=this,a=i.defer(),s={action:\"clear\"};return r.cache.clear(),r.synchronizer.synchronize(s).then(t,e,n),a}return s.prototype.get=c,s.prototype.all=u,s.prototype.remove=l,s.prototype.initialize=d,s.prototype.clear=f,s}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPIFactory\",t),t.$inject=[\"AngularJsonAPIModel\",\"AngularJsonAPISchema\",\"AngularJsonAPICache\",\"AngularJsonAPICollection\",\"uuid4\",\"$rootScope\",\"$q\"]}(),function(){\"use strict\";function t(t,e,n){function r(e,n){function r(t,e,n){var r;\"resolved\"===e&&(r=a.data.indexOf(n),r>-1&&a.data.splice(r,1))}var a=this;a.factory=e,a.type=e.schema.type,a.params=n,a.errors={synchronization:{name:\"Synchronization\",description:\"Errors during synchronization\",errors:[]}},a.error=!1,a.data=a.factory.cache.index(a.params),a[\"synchronized\"]=!1,t.$on(\"angularJsonAPI:\"+a.type+\":object:remove\",r)}function a(t){var e=this;return e.factory.get(t)}function o(){function r(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"resolved\",i,e),i.errors.synchronization.errors=[],i.data=c.proccesResults(e.data),i.error=!1,i.updatedAt=Date.now(),i[\"synchronized\"]=!0,i.factory.cache.setIndexIds(i.data),e.finish(),s.resolve(i)}function a(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"rejected\",i,e),i.errors.synchronization.errors=e.errors,i.error=!0,e.finish(),s.reject(e)}function o(e){t.$emit(\"angularJsonAPI:\"+i.type+\":collection:fetch\",\"notify\",i,e),s.notify(e)}var i=this,s=n.defer(),c=e.get(\"$jsonapi\"),u={action:\"all\",params:i.params};return i.factory.synchronizer.synchronize(u).then(r,a,o),s.promise}return r.prototype.fetch=o,r.prototype.refresh=o,r.prototype.get=a,r}angular.module(\"angular-jsonapi\").factory(\"AngularJsonAPICollection\",t),t.$inject=[\"$rootScope\",\"$injector\",\"$q\"]}(),function(){\"use strict\";function t(){function t(t,r){function a(t,a){var o=new r(t,a);e[t.type]=o,n.push(t.type)}function o(t){return e[t]}function i(n){return void 0===e[n]&&t.error(\"Can\t add not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].saved.form}function s(n,r){return void 0===e[n]&&t.error(\"Can\t get not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].get(r)}function c(n,r){return void 0===e[n]&&t.error(\"Can\t remove not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].remove(r)}function u(n){return void 0===e[n]&&t.error(\"Can\t get all of not existing object type: \"+n+\". Use initialize(Model, datas).\"),e[n].all()}function l(){angular.forEach(e,function(t){t.clear()})}function d(e){if(void 0===e&&t.error(\"Can't proccess results:\",e),angular.forEach(e.included,function(t){o(t.type).cache.addOrUpdate(t,!0)}),angular.isArray(e.data)){var n=[];return angular.forEach(e.data,function(t){n.push(o(t.type).cache.addOrUpdate(t,!0))}),n}return o(e.data.type).cache.addOrUpdate(e.data,!0)}return{form:i,get:s,remove:c,all:u,addFactory:a,getFactory:o,clearAll:l,proccesResults:d,allFactories:e,factoriesNames:n}}var e={},n=[];this.$get=t,t.$inject=[\"$log\",\"AngularJsonAPIFactory\"]}angular.module(\"angular-jsonapi\").provider(\"$jsonapi\",t)}(),function(){\"use strict\";angular.module(\"angular-jsonapi\").config([\"$logProvider\",function(t){t.debugEnabled(!1)}])}();\n//# sourceMappingURL=angular-jsonapi.min.js.map","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModelForm', AngularJsonAPIModelFormWrapper);\n\n  function AngularJsonAPIModelFormWrapper(\n    AngularJsonAPIModelValidatorService,\n    AngularJsonAPIModelLinkerService\n  ) {\n\n    AngularJsonAPIModelForm.prototype.save = save;\n    AngularJsonAPIModelForm.prototype.reset = reset;\n    AngularJsonAPIModelForm.prototype.validate = validate;\n    AngularJsonAPIModelForm.prototype.validateField = validateField;\n\n    AngularJsonAPIModelForm.prototype.link = link;\n    AngularJsonAPIModelForm.prototype.unlink = unlink;\n\n    AngularJsonAPIModelForm.prototype.toJson = toJson;\n\n    return AngularJsonAPIModelForm;\n\n    function AngularJsonAPIModelForm(parent) {\n      var _this = this;\n\n      _this.data = {\n        id: parent.data.id,\n        type: parent.data.type,\n        attributes: {},\n        relationships: {}\n      };\n\n      _this.relationships = {};\n      _this.parent = parent;\n      _this.schema = parent.schema;\n      _this.reset();\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Saves form, shortcut to parent.save()\n     * @return {promise} Promise associated with synchronization\n     */\n    function save() {\n      var _this = this;\n\n      return _this.parent.save();\n    }\n\n    /**\n     * Resets form to state of a parent\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      angular.forEach(_this.schema.attributes, function(validator, key) {\n        _this.data.attributes[key] = _this.parent.data.attributes[key] || '';\n      });\n\n      angular.forEach(_this.schema.relationships, function(data, key) {\n        _this.data.relationships[key] = _this.parent.data.relationships[key] || {};\n        _this.relationships[key] = _this.parent.relationships[key];\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n    }\n\n    /**\n     * Validates form\n     * @return {objec} Errors object indexed by keys\n     */\n    function validate() {\n      var _this = this;\n      var errors;\n\n      errors = AngularJsonAPIModelValidatorService.validateForm(_this.data);\n\n      _this.errors.validation = errors;\n\n      return errors;\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(key) {\n      var _this = this;\n      var errors;\n      errors = AngularJsonAPIModelValidatorService.validateField(\n        _this.data[key],\n        key\n      );\n\n      _this.errors.validation[key] = errors;\n\n      return errors;\n    }\n\n    /**\n     * Adds link to a form without synchronization\n     * @param {string} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function link(key, target) {\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n\n      return AngularJsonAPIModelLinkerService.link(_this, key, target, schema);\n    }\n\n    /**\n     * Removes link from form without synchronization\n     * @param  {[type]} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function unlink(key, target) {\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n\n      return AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIAbstractModel', AngularJsonAPIAbstractModelWrapper);\n\n  function AngularJsonAPIAbstractModelWrapper(\n    AngularJsonAPIModelForm,\n    AngularJsonAPIModelLinkerService,\n    uuid4,\n    $rootScope,\n    $injector,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIAbstractModel.prototype.refresh = refresh;\n    AngularJsonAPIAbstractModel.prototype.remove = remove;\n    AngularJsonAPIAbstractModel.prototype.reset = reset;\n    AngularJsonAPIAbstractModel.prototype.save = save;\n\n    AngularJsonAPIAbstractModel.prototype.update = update;\n\n    AngularJsonAPIAbstractModel.prototype.link = link;\n    AngularJsonAPIAbstractModel.prototype.unlink = unlink;\n    AngularJsonAPIAbstractModel.prototype.unlinkAll = unlinkAll;\n\n    AngularJsonAPIAbstractModel.prototype.toJson = toJson;\n\n    return AngularJsonAPIAbstractModel;\n\n    /**\n     * Constructor\n     * @param {json}  data      Validated data used to create an object\n     * @param {Boolean} saved   Is object new (for form)\n     */\n    function AngularJsonAPIAbstractModel(data, saved, stable) {\n      var _this = this;\n\n      data.relationships = data.relationships || {};\n\n      _this.saved = saved || true;\n      _this.stable = stable || true;\n      _this.synchronized = false;\n\n      _this.removed = false;\n      _this.loadingCount = 0;\n\n      _this.data = {\n        relationships: {},\n        attributes: {}\n      };\n      _this.relationships = {};\n\n      angular.forEach(_this.schema.relationships, function(schema, name) {\n        _this.relationships[name] = undefined;\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n\n      _this.promises = {};\n\n      __setData(_this, data);\n\n      _this.form = new AngularJsonAPIModelForm(_this);\n    }\n\n    /**\n     * Saves model's form\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function save() {\n      var _this = this;\n      var deferred = $q.defer();\n      var hasErrors = false;\n      var config = {\n        action: 'update',\n        object: _this\n      };\n\n      if (_this.saved === false) {\n        config.action = 'add';\n      }\n\n      var errors = _this.form.validate();\n\n      for (var error in errors) {\n        if (errors.hasOwnProperty(error)) {\n          hasErrors = true;\n        }\n      }\n\n      if (hasErrors === true) {\n        deferred.reject(errors);\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'resolved', _this, response);\n        _this.update(_this.form.data);\n\n        response.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response.errors);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'notify', _this, response);\n\n        deferred.notify(response.errors);\n      }\n    }\n\n    /**\n     * Reset object form\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      return _this.form.reset();\n    }\n\n    /**\n     * Synchronize object with remote\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function refresh() {\n      var $jsonapi = $injector.get('$jsonapi');\n      var deferred = $q.defer();\n      var _this = this;\n      var config = {\n        action: 'refresh',\n        object: _this,\n        params: _this.schema.params.get\n      };\n\n      if (_this.saved === false) {\n        $log.error('Can\\'t refresh new object');\n        deferred.reject('Can\\'t refresh new object');\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'resolved', _this, response);\n        $jsonapi.proccesResults(response.data);\n        response.finish();\n\n        _this.synchronized = true;\n        _this.stable = true;\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Remove object\n     * @return {promise} Promise associated with synchronization that resolves to nothing\n     */\n    function remove() {\n      var _this = this;\n      var deferred = $q.defer();\n\n      var config = {\n        action: 'remove',\n        object: _this\n      };\n\n      _this.parentFactory.cache.remove(_this.data.id);\n\n      if (_this.saved === false) {\n        deferred.resolve();\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'resolved', _this, response);\n        _this.removed = true;\n        _this.unlinkAll();\n        _this.parentFactory.cache.clearRemoved(_this.data.id);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'rejected', _this, response);\n        _this.parentFactory.cache.revertRemove(_this.data.id);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Unlink all reflection relationships of the object **without synchronization**\n     * @return {boolean} Result\n     */\n    function unlinkAll(key) {\n      var _this = this;\n      var deferred = $q.defer();\n\n      if (key === undefined) {\n        angular.forEach(_this.relationships, removeLink);\n      } else {\n        removeLink(_this.relationships[key], key);\n      }\n\n      return deferred.promise;\n\n      function removeLink(linksObj, key) {\n        var schema = _this.schema.relationships[key];\n        var reflectionKey = schema.reflection;\n\n        if (angular.isArray(linksObj)) {\n          angular.forEach(linksObj, removeReflectionLink.bind(undefined, reflectionKey));\n        } else if (angular.isObject(linksObj)) {\n          removeReflectionLink(reflectionKey, linksObj);\n        }\n\n        if (schema.type === 'hasOne') {\n          _this.relationships[key] = null;\n        } else if (schema.type === 'hasMany') {\n          _this.relationships[key] = [];\n        }\n      }\n\n      function removeReflectionLink(reflectionKey, target) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolve, reject, notify);\n\n        function resolve(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function reject(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notify(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n    }\n\n    /**\n     * Links object to relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be linked\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function link(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link undefined'}]});\n        return deferred.promise;\n      }\n\n      var reflectionSchema = target.schema.relationships[reflectionKey];\n\n      _this.synchronize({\n        action: 'link',\n        object: _this,\n        target: target,\n        key: key\n      }).then(resolve, reject, notify);\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.link(_this, key, target, schema);\n        AngularJsonAPIModelLinkerService.link(target, reflectionKey, _this, reflectionSchema);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'linkReflection',\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Unlinks object from relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be unlinked if undefined unlinks all\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function unlink(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink undefined'}]});\n        return deferred.promise;\n      }\n\n      var reflectionSchema = target.schema.relationships[reflectionKey];\n\n      _this.synchronize({\n        action: 'unlink',\n        object: _this,\n        target: target,\n        key: key\n      }).then(resolve, reject, notify);\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Sets object state to data\n     * @param  {object} validatedData JsonAPI object with data\n     * @return {bool}               Result\n     */\n    function update(validatedData) {\n      var _this = this;\n\n      if (__setData(_this, validatedData) === true) {\n        _this.reset();\n        _this.synchronized = true;\n        _this.updatedAt = Date.now();\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /////////////\n    // PRIVATE //\n    /////////////\n\n    /**\n     * Low level set data function, use only with validated data\n     * @param  {AngularJsonAPIModel} object        object to be modified\n     * @param  {object} validatedData Validated data\n     * @return {boolean}               Status\n     */\n    function __setData(object, validatedData) {\n\n      var $jsonapi = $injector.get('$jsonapi');\n      var schema = object.schema;\n\n      object.data.id = validatedData.id;\n      object.data.type = validatedData.type;\n\n      if (object.parentFactory.schema.type !== validatedData.type) {\n        $log.error('Different type then factory', object.parentFactory.schema.type, validatedData);\n        return false;\n      }\n\n      if (!uuid4.validate(object.data.id)) {\n        $log.error('Invalid id');\n        return false;\n      }\n\n      validatedData.attributes = validatedData.attributes || {};\n      validatedData.relationships = validatedData.relationships || {};\n\n      angular.forEach(schema.attributes, setAttributes);\n      angular.forEach(schema.relationships, setRelationships);\n\n      return true;\n\n      function setAttributes(validators, key) {\n        object.data.attributes[key] = validatedData.attributes[key];\n      }\n\n      function setRelationships(schema, key) {\n        var relationshipData = validatedData.relationships[key];\n\n        if (relationshipData === undefined) {\n          object.data.relationships[key] = {data: undefined};\n          return;\n        }\n\n        object.data.relationships[key] = object.data.relationships[key] || {};\n        object.data.relationships[key].links = relationshipData.links;\n\n        if (schema.type === 'hasOne') {\n          linkOne(object, key, schema, relationshipData.data);\n        } else if (schema.type === 'hasMany') {\n          if (angular.isArray(relationshipData.data) && relationshipData.data.length === 0) {\n            object.data.relationships[key].data = [];\n            object.unlinkAll(key);\n          } else {\n            angular.forEach(\n              relationshipData.data,\n              linkOne.bind(undefined, object, key, schema)\n            );\n          }\n        }\n      }\n\n      function linkOne(object, key, schema, data) {\n        if (data === null) {\n          AngularJsonAPIModelLinkerService.link(object, key, null, schema);\n          return;\n        }\n\n        if (data === undefined) {\n          return;\n        }\n\n        var factory = $jsonapi.getFactory(data.type);\n        var target = factory.cache.get(data.id);\n        var reflectionKey = schema.reflection;\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n\n        AngularJsonAPIModelLinkerService.link(object, key, target, schema);\n\n        if (reflectionKey !== false) {\n          AngularJsonAPIModelLinkerService.link(target, reflectionKey, object, reflectionSchema);\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICache', AngularJsonAPICacheWrapper);\n\n  function AngularJsonAPICacheWrapper(\n    uuid4,\n    $log\n  ) {\n\n    AngularJsonAPICache.prototype.get = get;\n    AngularJsonAPICache.prototype.index = index;\n    AngularJsonAPICache.prototype.setIndexIds = setIndexIds;\n    AngularJsonAPICache.prototype.addOrUpdate = addOrUpdate;\n\n    AngularJsonAPICache.prototype.fromJson = fromJson;\n    AngularJsonAPICache.prototype.toJson = toJson;\n    AngularJsonAPICache.prototype.clear = clear;\n\n    AngularJsonAPICache.prototype.remove = remove;\n    AngularJsonAPICache.prototype.revertRemove = revertRemove;\n    AngularJsonAPICache.prototype.clearRemoved = clearRemoved;\n\n    return AngularJsonAPICache;\n\n    /**\n     * Constructor\n     */\n    function AngularJsonAPICache(factory) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.data = {};\n      _this.removed = {};\n      _this.size = 0;\n\n      _this.indexIds = [];\n    }\n\n    /**\n     * Add new model or update existing with data\n     * @param {object} validatedData Data that are used to update or create an object, has to be valid\n     * @return {AngularJsonAPIModel} Created model\n     */\n    function addOrUpdate(validatedData, stable) {\n      var _this = this;\n      var id = validatedData.id;\n\n      if (id === undefined) {\n        $log.error('Can\\'t add data without id!', validatedData);\n        return;\n      }\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model(validatedData, true, stable);\n        _this.size += 1;\n      } else {\n        _this.data[id].update(validatedData);\n      }\n\n      return _this.data[id];\n    }\n\n\n    /**\n     * Recreate object structure from json data\n     * @param  {json} json Json data\n     * @return {undefined}\n     */\n    function fromJson(json) {\n      var _this = this;\n      var collection = angular.fromJson(json);\n\n      if (angular.isObject(collection) && collection.data !== undefined) {\n        _this.updatedAt = collection.updatedAt;\n        _this.indexIds = collection.indexIds;\n\n        angular.forEach(collection.data, function(objectData) {\n          var data = objectData.data;\n          _this.addOrUpdate(data, false);\n        });\n      }\n    }\n\n    /**\n     * Encodes memory into json format\n     * @return {json} Json encoded memory\n     */\n    function toJson() {\n      var _this = this;\n      var json = {\n        data: {},\n        updatedAt: _this.updatedAt,\n        indexIds: _this.indexIds\n      };\n\n      angular.forEach(_this.data, function(object, key) {\n        json.data[key] = object.toJson();\n      });\n\n      return angular.toJson(json);\n    }\n\n    /**\n     * Clear memory\n     * @return {undefined}\n     */\n    function clear() {\n      var _this = this;\n\n      _this.data = {};\n      _this.removed = {};\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function get(id) {\n      var _this = this;\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model({id: id, type: _this.factory.Model.prototype.schema.type}, true, false);\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {objec} params\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function index(params) {\n      var _this = this;\n\n      return _this.indexIds.map(_this.get.bind(_this));\n    }\n\n    /**\n     * Cache ids of objects returned by index request\n     * @param {ids array or AngularJsonAPIModel array} array Objects or ids to be cached\n     */\n    function setIndexIds(array) {\n      var _this = this;\n\n      _this.indexIds = [];\n\n      angular.forEach(array, function(element) {\n        if (angular.isString(element) && uuid4.validate(element)) {\n          _this.indexIds.push(element);\n        } else if (angular.isObject(element) && uuid4.validate(element.data.id)) {\n          _this.indexIds.push(element.data.id);\n        }\n      });\n    }\n\n    /**\n     * Remove object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function remove(id) {\n      var _this = this;\n\n      if (_this.data[id] !== undefined) {\n        _this.removed[id] = _this.data[id];\n        delete _this.data[id];\n        _this.size -= 1;\n      }\n\n      return _this.removed[id];\n    }\n\n    /**\n     * Revert removal of an object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function revertRemove(id) {\n      var _this = this;\n\n      if (_this.removed[id] !== undefined) {\n        _this.data[id] = _this.removed[id];\n        delete _this.removed[id];\n        _this.size += 1;\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Clear removed object from memory\n     * @param  {uuid} id\n     * @return {undefined}\n     */\n    function clearRemoved(id) {\n      var _this = this;\n\n      delete _this.removed[id];\n    }\n  }\n})();\n","// from https://www.sitepen.com/blog/2012/10/19/lazy-property-access/\n(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('lazyProperty', function(target, propertyName, callback) {\n      var result;\n      var done;\n      Object.defineProperty(target, propertyName, {\n        get: function() { // Define the getter\n          if (!done) {\n            // We cache the result and only compute once.\n            done = true;\n            result = callback.call(target);\n          }\n\n          return result;\n        },\n\n        // Keep it enumerable and configurable, certainly not necessary.\n        enumerable: true,\n        configurable: true\n      });\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('toKebabCase', function(str) {\n      return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi').config(['$provide', function($provide) {\n    $provide.decorator('$q', ['$delegate', function($delegate) {\n      var $q = $delegate;\n\n      $q.allSettled = $q.allSettled || function allSettled(promises, resolvedCallback, rejectedCallback) {\n        // Implementation of allSettled function from Kris Kowal's Q:\n        // https://github.com/kriskowal/q/wiki/API-Reference#promiseallsettled\n        // by Michael Kropat from http://stackoverflow.com/a/27114615/1400432 slightly modified\n\n        var wrapped = angular.isArray(promises) ? [] : {};\n\n        angular.forEach(promises, function(promise, key) {\n          if (!wrapped.hasOwnProperty(key)) {\n            wrapped[key] = wrap(promise);\n          }\n        });\n\n        return $q.all(wrapped);\n\n        function wrap(promise) {\n          return $q.when(promise)\n            .then(function(value) {\n              if (angular.isFunction(resolvedCallback)) {\n                resolvedCallback(value);\n              }\n\n              return { success: true, value: value };\n            },\n\n            function(reason) {\n              if (angular.isFunction(rejectedCallback)) {\n                rejectedCallback(reason);\n              }\n\n              return { success: false, reason: reason };\n            });\n        }\n      };\n\n      return $q;\n    }]);\n  }]);\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-rest', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationRest', AngularJsonAPISynchronizationRestWrapper);\n\n  function AngularJsonAPISynchronizationRestWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    AngularJsonAPIModelLinkerService,\n    toKebabCase,\n    $q,\n    $http\n  ) {\n\n    AngularJsonAPISynchronizationRest.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationRest.prototype.constructor = AngularJsonAPISynchronizationRest;\n\n    return AngularJsonAPISynchronizationRest;\n\n    function AngularJsonAPISynchronizationRest(url) {\n      var _this = this;\n      var headers = { // jscs:disable disallowQuotedKeysInObjects\n        'Accept': 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json'\n      }; // jscs:enable disallowQuotedKeysInObjects\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('remove', remove);\n      _this.synchronization('unlink', unlink);\n      _this.synchronization('link', link);\n      _this.synchronization('update', update);\n      _this.synchronization('add', add);\n      _this.synchronization('all', all);\n      _this.synchronization('get', get);\n      _this.synchronization('refresh', get);\n\n      function all(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function get(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function remove(config) {\n        return $http({\n          method: 'DELETE',\n          headers: headers,\n          url: url + '/' + config.object.data.id\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function unlink(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target !== undefined && config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink object without id through rest call'}]});\n        } else if (config.target === undefined) {\n          $http({\n            method: 'PUT',\n            headers: headers,\n            data: {data: []},\n            url: url + '/' + config.object.data.id + '/relationships/' + toKebabCase(config.key)\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        } else {\n          $http({\n            method: 'DELETE',\n            headers: headers,\n            url: url + '/' + config.object.data.id + '/relationships/' + toKebabCase(config.key) + '/' + config.target.data.id\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        }\n\n        return deferred.promise;\n      }\n\n      function link(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target === undefined || config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link object without id through rest call'}]});\n        } else {\n          $http({\n            method: 'POST',\n            headers: headers,\n            url: url + '/' + config.object.data.id + '/relationships/' + toKebabCase(config.key),\n            data: {data: [AngularJsonAPIModelLinkerService.toLinkData(config.target)]}\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        }\n\n        return deferred.promise;\n      }\n\n      function update(config) {\n        return $http({\n          method: 'PUT',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function add(config) {\n        return $http({\n          method: 'POST',\n          headers: headers,\n          url: url + '/',\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function resolveHttp(response) {\n        return $q.resolve(response.data);\n      }\n\n      function rejectHttp(response) {\n        var deferred = $q.defer();\n\n        if (response.status === 0) {\n          $http({\n            method: 'GET',\n            url: 'https://status.cloud.google.com/incidents.schema.json'\n          }).then(rejectServerOffline, rejectNoConnection);\n        } else {\n          deferred.reject({status: response.status, statusText: response.statusText});\n        }\n\n        return deferred.promise;\n\n        function rejectServerOffline() {\n          deferred.reject({status: response.status, statusText: 'Server is offline'});\n        }\n\n        function rejectNoConnection() {\n          deferred.reject({status: response.status, statusText: 'No internet connection'});\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizationPrototype', AngularJsonAPISynchronizationPrototypeWrapper);\n\n  function AngularJsonAPISynchronizationPrototypeWrapper() {\n    AngularJsonAPISynchronizationPrototype.prototype.before = beforeSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.after = afterSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.begin = begin;\n    AngularJsonAPISynchronizationPrototype.prototype.finish = finish;\n    AngularJsonAPISynchronizationPrototype.prototype.synchronization = synchronization;\n\n    return AngularJsonAPISynchronizationPrototype;\n\n    function AngularJsonAPISynchronizationPrototype() {\n      var _this = this;\n      var allHooks = [\n        'add',\n        'init',\n        'get',\n        'all',\n        'clear',\n        'remove',\n        'unlink',\n        'unlinkReflection',\n        'link',\n        'linkReflection',\n        'update',\n        'refresh'\n      ];\n\n      _this.state = {};\n\n      _this.beginHooks = {};\n      _this.beforeHooks = {};\n      _this.synchronizationHooks = {};\n      _this.afterHooks = {};\n      _this.finishHooks = {};\n\n      _this.options = {};\n\n      angular.forEach(allHooks, function(hookName) {\n        _this.beginHooks[hookName] = [];\n        _this.beforeHooks[hookName] = [];\n        _this.synchronizationHooks[hookName] = [];\n        _this.afterHooks[hookName] = [];\n        _this.finishHooks[hookName] = [];\n        _this.state[hookName] = {\n          loading: false,\n          success: true\n        };\n      });\n    }\n\n    function begin(action, callback) {\n      var _this = this;\n\n      _this.beginHooks[action].push(callback);\n    }\n\n    function finish(action, callback) {\n      var _this = this;\n\n      _this.finishHooks[action].push(callback);\n    }\n\n    function beforeSynchro(action, callback) {\n      var _this = this;\n\n      _this.beforeHooks[action].push(callback);\n    }\n\n    function afterSynchro(action, callback) {\n      var _this = this;\n\n      _this.afterHooks[action].push(callback);\n    }\n\n    function synchronization(action, callback) {\n      var _this = this;\n\n      _this.synchronizationHooks[action].push(callback);\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-local', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationLocal', AngularJsonAPISynchronizationLocalWrapper);\n\n  function AngularJsonAPISynchronizationLocalWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    $window,\n    $q\n  ) {\n\n    AngularJsonAPISynchronizationLocal.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationLocal.prototype.constructor = AngularJsonAPISynchronizationLocal;\n\n    return AngularJsonAPISynchronizationLocal;\n\n    function AngularJsonAPISynchronizationLocal(prefix) {\n      var _this = this;\n\n      prefix = prefix || 'AngularJsonAPI';\n\n      _this.__updateStorage = updateStorage;\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('init', init);\n\n      _this.begin('clear', clear);\n      _this.begin('remove', updateStorage);\n      _this.begin('refresh', updateStorage);\n      _this.begin('unlink', updateStorage);\n      _this.begin('unlinkReflection', updateStorage);\n      _this.begin('link', updateStorage);\n      _this.begin('linkReflection', updateStorage);\n      _this.begin('update', updateStorage);\n      _this.begin('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      _this.finish('init', updateStorage);\n      _this.finish('clear', updateStorage);\n      _this.finish('remove', updateStorage);\n      _this.finish('refresh', updateStorage);\n      _this.finish('unlink', updateStorage);\n      _this.finish('unlinkReflection', updateStorage);\n      _this.finish('link', updateStorage);\n      _this.finish('linkReflection', updateStorage);\n      _this.finish('update', updateStorage);\n      _this.finish('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      function init() {\n        var type = _this.synchronizer.factory.schema.type;\n        return $q.when($window.localStorage.getItem(prefix + '.' + type));\n      }\n\n      function clear() {\n        var type = _this.synchronizer.factory.schema.type;\n        $window.localStorage.removeItem(prefix + '.' + type);\n      }\n\n      function updateStorage() {\n        var type = _this.synchronizer.factory.schema.type;\n        var cache = _this.synchronizer.factory.cache;\n        $window.localStorage.setItem(prefix + '.' + type, cache.toJson());\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerSimple', AngularJsonAPISynchronizerSimpleWrapper);\n\n  function AngularJsonAPISynchronizerSimpleWrapper(AngularJsonAPISynchronizerPrototype, $q, $log) {\n\n    AngularJsonAPISynchronizerSimple.prototype = Object.create(AngularJsonAPISynchronizerPrototype.prototype);\n    AngularJsonAPISynchronizerSimple.prototype.constructor = AngularJsonAPISynchronizerSimple;\n\n    AngularJsonAPISynchronizerSimple.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerSimple;\n\n    function AngularJsonAPISynchronizerSimple(synchronizations) {\n      var _this = this;\n\n      _this.state = {};\n\n      AngularJsonAPISynchronizerPrototype.call(_this, synchronizations);\n\n      angular.forEach(synchronizations, function(synchronization) {\n        synchronization.synchronizer = _this;\n      });\n    }\n\n    function synchronize(config) {\n      var _this = this;\n      var promises = [];\n      var deferred = $q.defer();\n      var action = config.action;\n\n      AngularJsonAPISynchronizerPrototype.prototype.synchronize.call(_this, config);\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beginHooks[action], function(hook) {\n          deferred.notify({step: 'begin', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beforeHooks[action], function(hook) {\n          deferred.notify({step: 'before', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.synchronizationHooks[action], function(hook) {\n          promises.push(hook.call(_this, config));\n        });\n      });\n\n      $q.allSettled(promises, resolvedCallback, rejectedCallback).then(resolved, rejected);\n\n      function resolvedCallback(value) {\n        deferred.notify({step: 'synchronization', data: value});\n      }\n\n      function rejectedCallback(reason) {\n        deferred.notify({step: 'synchronization', errors: reason});\n      }\n\n      function resolved(results) {\n        _this.state[action] = _this.state[action] || {};\n        _this.state[action].success = true;\n\n        angular.forEach(results, function(result) {\n          if (result.success === false) {\n            _this.state[action].success = false;\n          }\n        });\n\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.afterHooks[action], function(hook) {\n            deferred.notify({step: 'after', errors: hook.call(_this, config, results)});\n          });\n        });\n\n        var data;\n        var errors = [];\n\n        angular.forEach(results, function(result) {\n          if (result.success === true) {\n            data = result.value;\n          } else {\n            errors.push(result.reason);\n          }\n        });\n\n        if (errors.length > 0) {\n          deferred.reject({data: data, finish: finish, errors: errors});\n        } else {\n          deferred.resolve({data: data, finish: finish, errors: errors});\n        }\n      }\n\n      function finish() {\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.finishHooks[action], function(hook) {\n            deferred.notify({step: 'finish', errors: hook.call(_this, config)});\n          });\n        });\n      }\n\n      function rejected(errors) {\n        $log.error('All settled rejected! Something went wrong');\n\n        deferred.reject({finish: angular.noop, errors: errors});\n      }\n\n      return deferred.promise;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerPrototype', AngularJsonAPISynchronizerPrototypeWrapper);\n\n  function AngularJsonAPISynchronizerPrototypeWrapper($log) {\n\n    AngularJsonAPISynchronizerPrototype.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerPrototype;\n\n    function AngularJsonAPISynchronizerPrototype(synchronizations) {\n      var _this = this;\n\n      _this.synchronizations = synchronizations;\n    }\n\n    function synchronize(config) {\n      var _this = this;\n\n      $log.debug('Synchro Collection', _this.factory.Model.prototype.schema.type, config);\n\n      if (config.action === undefined) {\n        $log.error('Can\\'t synchronize undefined action', config);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModel', AngularJsonAPIModel);\n\n  function AngularJsonAPIModel(AngularJsonAPIAbstractModel, AngularJsonAPISchema, $log) {\n\n    return {\n      model: modelFactory\n    };\n\n    function modelFactory(schemaObj, parentFactory) {\n      var Model = function(data, updatedAt, saved) {\n        var _this = this;\n\n        if (data.type !== _this.schema.type) {\n          $log.error('Data type other then declared in schema: ', data.type, ' instead of ', _this.schema.type);\n        }\n\n        AngularJsonAPIAbstractModel.call(_this, data, updatedAt, saved);\n\n        _this.form.parent = _this;\n      };\n\n      Model.prototype = Object.create(AngularJsonAPIAbstractModel.prototype);\n      Model.prototype.constructor = Model;\n\n      Model.prototype.schema = schemaObj;\n      Model.prototype.parentFactory = parentFactory;\n      Model.prototype.synchronize = parentFactory.synchronizer.synchronize.bind(parentFactory.synchronizer);\n\n      angular.forEach(schemaObj.functions, function(metaFunction, metaFunctionName) {\n        Model.prototype[metaFunctionName] = function() {\n          return metaFunction.apply(this, arguments);\n        };\n      });\n\n      return Model;\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchema', AngularJsonAPISchemaWrapper);\n\n  function AngularJsonAPISchemaWrapper($log, pluralize, AngularJsonAPISchemaLink) {\n\n    return AngularJsonAPISchema;\n\n    function AngularJsonAPISchema(schema) {\n      var _this = this;\n      var include = schema.include || {};\n      schema.include = include;\n      include.get = schema.include.get || [];\n      include.all = schema.include.all || [];\n\n      _this.params = {\n        get: {},\n        all: {}\n      };\n\n      angular.forEach(schema.relationships, function(linkSchema, linkName) {\n        var linkSchemaObj = new AngularJsonAPISchemaLink(linkSchema, linkName, schema.type);\n        schema.relationships[linkName] = linkSchemaObj;\n        if (linkSchemaObj.included === true) {\n          include.get.push(linkName);\n          if (linkSchemaObj.type === 'hasOne') {\n            include.all.push(linkName);\n          }\n        }\n      });\n\n      angular.extend(_this, schema);\n\n      if (include.get.length > 0) {\n        _this.params.get.include = include.get.join(',');\n      }\n\n      if (include.all.length > 0) {\n        _this.params.all.include = include.all.join(',');\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchemaLink', AngularJsonAPILinkSchrapperLink);\n\n  function AngularJsonAPILinkSchrapperLink($log, pluralize) {\n\n    return AngularJsonAPISchemaLink;\n\n    function AngularJsonAPISchemaLink(linkSchema, linkName, type) {\n      var _this = this;\n\n      if (angular.isString(linkSchema)) {\n        _this.model = pluralize.plural(linkName);\n        _this.type = linkSchema;\n        _this.polymorphic = false;\n        _this.reflection = type;\n      } else {\n        if (linkSchema.type === undefined) {\n          $log.error('Schema of link without a type: ', linkSchema, linkName);\n        }\n\n        if (linkSchema.type !== 'hasMany' && linkSchema.type !== 'hasOne') {\n          $log.error('Schema of link with wrong type: ', linkSchema.type, 'available: hasOne, hasMany');\n        }\n\n        _this.model = linkSchema.model || pluralize.plural(linkName);\n        _this.type = linkSchema.type;\n        _this.polymorphic = linkSchema.polymorphic || false;\n\n        if (linkSchema.reflection === undefined) {\n          _this.reflection = _this.type === 'hasMany' ? pluralize.singular(type) : type;\n        } else {\n          _this.reflection = linkSchema.reflection;\n        }\n\n        _this.included = linkSchema.included || false;\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIFactory', AngularJsonAPIFactoryWrapper);\n\n  function AngularJsonAPIFactoryWrapper(\n    AngularJsonAPIModel,\n    AngularJsonAPISchema,\n    AngularJsonAPICache,\n    AngularJsonAPICollection,\n    uuid4,\n    $rootScope,\n    $q\n  ) {\n    AngularJsonAPIFactory.prototype.get = get;\n    AngularJsonAPIFactory.prototype.all = all;\n    AngularJsonAPIFactory.prototype.remove = remove;\n    AngularJsonAPIFactory.prototype.initialize = initialize;\n\n    AngularJsonAPIFactory.prototype.clear = clear;\n\n    return AngularJsonAPIFactory;\n\n    /**\n     * AngularJsonAPIFactory constructor\n     * @param {json} schema       Schema object\n     * @param {AngularJsonAPISynchronizer} synchronizer Synchronizer for the factory\n     */\n    function AngularJsonAPIFactory(schema, synchronizer) {\n      var _this = this;\n      var config = {\n        action: 'init'\n      };\n\n      _this.schema = new AngularJsonAPISchema(schema);\n      _this.cache = new AngularJsonAPICache(_this);\n\n      _this.synchronizer = synchronizer;\n      _this.synchronizer.factory = _this;\n\n      _this.Model = AngularJsonAPIModel.model(\n        _this.schema,\n        _this\n      );\n\n      _this.initialized = false;\n      _this.type = _this.schema.type;\n\n      synchronizer.factory = _this;\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'resolved', response);\n        _this.cache.fromJson(response.data);\n        _this.initialized = true;\n\n        response.finish();\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'rejected', response);\n        response.finish();\n        _this.initialized = true;\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'notify', response);\n      }\n    }\n\n    /**\n     * Get request\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id, synchronized\n     */\n    function get(id) {\n      var _this = this;\n\n      if (!uuid4.validate(id)) {\n        return $q.reject({errors: [{status: 0, statusText: 'Invalid id not uuid4'}]});\n      }\n\n      return _this.cache.get(id).refresh();\n    }\n\n    /**\n     * All request\n     * @param  {object} params Object associated with params (for filters/pagination etc.)\n     * @return {AngularJsonAPICollection} Collection of AngularJsonAPIModel, synchronized\n     */\n    function all(params) {\n      var _this = this;\n      params = params || {};\n\n      var collection = new AngularJsonAPICollection(\n        _this,\n        angular.extend(params, _this.schema.params.all)\n      );\n\n      collection.fetch();\n\n      return collection;\n    }\n\n    /**\n     * Remove request\n     * @param  {uuid} id\n     * @return {promise} Promise associated with the synchronization, in case of\n     * fail object is reverted to previous state\n     */\n    function remove(id) {\n      var _this = this;\n      var object = _this.cache.remove(id);\n\n      return object.remove();\n    }\n\n    /**\n     * Initialize new AngularJsonAPIModel\n     * @return {AngularJsonAPIModel} New model\n     */\n    function initialize() {\n      var _this = this;\n\n      var data = {\n        type: _this.type,\n        id: uuid4.generate(),\n        attributes: {},\n        relationships: {}\n      };\n\n      var model = new _this.Model(data, false, false);\n\n      return model;\n    }\n\n    /**\n     * Clears localy saved data\n     * @return {promise} Promise associated with the synchronization resolves to nothing\n     */\n    function clear() {\n      var _this = this;\n      var deferred = $q.defer();\n      var config = {\n        action: 'clear'\n      };\n\n      _this.cache.clear();\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'resolved', response);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'resolved', response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clear', 'notify', response);\n\n        deferred.notify(response);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICollection', AngularJsonAPICollectionWrapper);\n\n  function AngularJsonAPICollectionWrapper(\n    $rootScope,\n    $injector,\n    $q\n  ) {\n\n    AngularJsonAPICollection.prototype.fetch = fetch;\n    AngularJsonAPICollection.prototype.refresh = fetch;\n    AngularJsonAPICollection.prototype.get = get;\n\n    return AngularJsonAPICollection;\n\n    /**\n     * Constructor\n     * @param {AngularJsonAPIFactory} factory Factory associated with the collection\n     * @param {object} params  Params associated with this factory (such as filters)\n     */\n    function AngularJsonAPICollection(factory, params) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.type = factory.schema.type;\n      _this.params = params;\n\n      _this.errors = {\n        synchronization: {\n          name: 'Synchronization',\n          description: 'Errors during synchronization',\n          errors: []\n        }\n      };\n\n      _this.error = false;\n\n      _this.data = _this.factory.cache.index(_this.params);\n      _this.synchronized = false;\n\n      $rootScope.$on('angularJsonAPI:' + _this.type + ':object:remove', remove);\n\n      function remove(event, status, object) {\n        var index;\n\n        if (status === 'resolved') {\n\n          index = _this.data.indexOf(object);\n          if (index > -1) {\n            _this.data.splice(index, 1);\n            _this.factory.cache.setIndexIds(_this.data);\n          }\n        }\n      }\n    }\n\n    /**\n     * Shortcut to this.factory.get\n     * @param  {uuid4} id Id of object]\n     * @return {AngularJsonAPIModel}          Model with id\n     */\n    function get(id) {\n      var _this = this;\n\n      return _this.factory.get(id);\n    }\n\n    /**\n     * Synchronizes collection with the server\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function fetch() {\n      var _this = this;\n      var deferred = $q.defer();\n      var $jsonapi = $injector.get('$jsonapi');\n      var config = {\n        action: 'all',\n        params: _this.params\n      };\n\n      _this.factory.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred.promise;\n\n      function resolve(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'resolved', _this, results);\n\n        _this.errors.synchronization.errors = [];\n        _this.data = $jsonapi.proccesResults(results.data);\n        _this.error = false;\n\n        _this.updatedAt = Date.now();\n        _this.synchronized = true;\n\n        _this.factory.cache.setIndexIds(_this.data);\n\n        results.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'rejected', _this, results);\n\n        _this.errors.synchronization.errors = results.errors;\n        _this.error = true;\n\n        results.finish();\n\n        deferred.reject(results);\n      }\n\n      function notify(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'notify', _this, results);\n\n        deferred.notify(results);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .provider('$jsonapi', jsonapiProvider);\n\n  function jsonapiProvider() {\n    var memory = {};\n    var names = [];\n    this.$get = jsonapiFactory;\n\n    function jsonapiFactory($log, AngularJsonAPIFactory) {\n      return {\n        form: form,\n        get: get,\n        remove: remove,\n        all: all,\n        addFactory: addFactory,\n        getFactory: getFactory,\n        clearAll: clearAll,\n        proccesResults: proccesResults,\n\n        allFactories: memory,\n        factoriesNames: names\n      };\n\n      function addFactory(schema, synchronization) {\n        var factory = new AngularJsonAPIFactory(schema, synchronization);\n\n        memory[schema.type] = factory;\n        names.push(schema.type);\n      }\n\n      function getFactory(type) {\n        return memory[type];\n      }\n\n      function form(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t add not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].saved.form;\n      }\n\n      function get(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].get(id);\n      }\n\n      function remove(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t remove not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].remove(id);\n      }\n\n      function all(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get all of not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].all();\n      }\n\n      function clearAll() {\n        angular.forEach(memory, function(factory) {\n          factory.clear();\n        });\n      }\n\n      function proccesResults(results) {\n        if (results === undefined) {\n          $log.error('Can\\'t proccess results:', results);\n        }\n\n        angular.forEach(results.included, function(data) {\n          getFactory(data.type).cache.addOrUpdate(data, true);\n        });\n\n        if (angular.isArray(results.data)) {\n          var objects = [];\n          angular.forEach(results.data, function(data) {\n            objects.push(getFactory(data.type).cache.addOrUpdate(data, true));\n          });\n\n          return objects;\n        } else {\n          return getFactory(results.data.type).cache.addOrUpdate(results.data, true);\n        }\n      }\n    }\n  }\n\n})();\n\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .config(function($logProvider) {\n    $logProvider.debugEnabled(false);\n  });\n})();\n"],"sourceRoot":"/source/"}