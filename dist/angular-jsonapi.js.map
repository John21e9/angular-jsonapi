{"version":3,"sources":["jsonapi.module.js","model/model-validator/model-validator.js","model/model-linker/model-linker.js","model/model-form/model-form.js","model/abstract-model/abstract-model.js","factory/factory-cache/factory-cache.factory.js","utils/lazy-property.js","utils/kebab-case.js","utils/all-settled.js","synchronizers/synchronizer-simple.js","synchronizers/synchronizer-prototype.js","synchronizations/synchronization-rest.js","synchronizations/synchronization-prototype.js","synchronizations/synchronization-local.js","schema/schema.js","schema/schema-link.js","model/model.js","factory/factory.js","collection/collection.js","jsonapi.provider.js","jsonapi.config.js"],"names":[],"mappings":"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","file":"angular-jsonapi.js","sourcesContent":["(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi', ['uuid4'])\n  /* global pluralize: false */\n  .constant('pluralize', pluralize);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelValidatorService', AngularJsonAPIModelValidatorService);\n\n  function AngularJsonAPIModelValidatorService(\n    $q\n  ) {\n    var _this = this;\n    _this.validateForm = validateForm;\n    _this.validateField = validateField;\n\n    return this;\n\n    /**\n     * Validates form\n     * @param  {object} data Form data\n     * @return {object} Errors object indexed by keys\n     */\n    function validateForm(schema, data) {\n      var _this = this;\n\n      return $q.resolve({});\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {array}     Errors array\n     */\n    function validateField(schema, key) {\n      var _this = this;\n\n      return $q.resolve([]);\n    }\n\n    // function __validate(validator, attributeValue, attributeName) {\n    //   var errors = [];\n    //   if (angular.isArray(validator)) {\n    //     angular.forEach(validator, function(element) {\n    //       errors = errors.concat(__validate(element, attributeValue, attributeName));\n    //     });\n    //   } else if (angular.isFunction(validator)) {\n    //     var err = validator(attributeValue, attributeName);\n    //     if (angular.isArray(err)) {\n    //       errors.concat(err);\n    //     } else {\n    //       $log.error(\n    //         'Wrong validator type it should return array of errors instead of: ' +\n    //           err.toString()\n    //       );\n    //     }\n    //   } else if (angular.isString(validator)) {\n    //     if (validator === 'text' || validator === 'string') {\n    //       if (!angular.isString(attributeValue)) {\n    //         errors.push(attributeName + ' is not a string ');\n    //       }\n    //     } else if (validator === 'number' || validator === 'integer') {\n    //       if (parseInt(attributeValue).toString() !== attributeValue.toString()) {\n    //         errors.push(attributeName + ' is not a number');\n    //       }\n    //     } else if (validator === 'uuid4') {\n    //       if (!uuid4.validate(attributeValue)) {\n    //         errors.push(attributeName + ' is not a uuid4');\n    //       }\n    //     } else if (validator === 'required') {\n    //       if (attributeValue.toString().length === 0) {\n    //         errors.push(attributeName + ' is empty');\n    //       }\n    //     } else {\n    //       $log.error('Wrong validator type: ' + validator.toString());\n    //     }\n    //   } else if (angular.isObject(validator)) {\n    //     if (validator.maxlength !== undefined && attributeValue.length > validator.maxlength) {\n    //       errors.push(attributeName + ' is too long max ' + validator.maxlength);\n    //     }\n\n    //     if (validator.minlength !== undefined && attributeValue.length < validator.minlength) {\n    //       errors.push(attributeName + ' is too short min ' + validator.minlength);\n    //     }\n\n    //     if (validator.maxvalue !== undefined && parseInt(attributeValue) > validator.maxvalue) {\n    //       errors.push(attributeName + ' is too big max ' + validator.maxvalue);\n    //     }\n\n    //     if (validator.minvalue !== undefined && parseInt(attributeValue) < validator.minvalue) {\n    //       errors.push(attributeName + ' is too small min ' + validator.minvalue);\n    //     }\n    //   } else {\n    //     $log.error('Wrong validator type: ' + validator.toString());\n    //   }\n\n    //   return errors;\n    // }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .service('AngularJsonAPIModelLinkerService', AngularJsonAPIModelLinkerService);\n\n  function AngularJsonAPIModelLinkerService($log) {\n    var _this = this;\n\n    _this.toLinkData = toLinkData;\n\n    _this.link = link;\n    _this.unlink = unlink;\n\n    return this;\n\n    /**\n     * Extracts data needed for relationship linking from object\n     * @param  {AngularJsonAPIModel} object Object\n     * @return {json}        Link data\n     */\n    function toLinkData(object) {\n      if (object === null) {\n        return null;\n      }\n\n      return {type: object.data.type, id: object.data.id};\n    }\n\n    /**\n     * Add target to object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be linked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function link(object, key, target, oneWay) {\n      var schema;\n\n      console.log(object, key, target, oneWay);\n\n      if (object === undefined) {\n        $log.error('Can\\'t add link to non existing object', object, key, target);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        return false;\n      }\n\n      schema = object.schema.relationships[key];\n\n      if (target === undefined) {\n        $log.error('Can\\'t link non existing object', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema === undefined) {\n        $log.error('Can\\'t add link not present in schema:', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (target !== null && schema.polymorphic === false && schema.model !== target.data.type) {\n        $log.error('This relation is not polymorphic, expected: ' + schema.model + ' instead of ' + target.data.type);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (schema.type === 'hasMany') {\n        if (oneWay === true) {\n          return __addHasMany(object, key, target, false);\n        } else {\n          return __processAddHasMany(object, key, target);\n        }\n      } else if (schema.type === 'hasOne') {\n        if (oneWay === true) {\n          return __addHasOne(object, key, target, false);\n        } else {\n          return __processAddHasOne(object, key, target);\n        }\n      }\n    }\n\n    /**\n     * Remove target from object relationships and data.relationships\n     * @param {AngularJsonAPIModel} object     Object to be modified\n     * @param {string} key        Relationship name\n     * @param {AngularJsonAPIModel} target     Object to be unlinked\n     * @param {AngularJsonAPISchema} schema     Relationship schema\n     */\n    function unlink(object, key, target, oneWay) {\n      var schema;\n\n      if (object === undefined) {\n        $log.error('Can\\'t remove link from non existing object', object, key, target);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        return false;\n      }\n\n      schema = object.schema.relationships[key];\n\n      if (schema === undefined) {\n        $log.error('Can\\'t remove link not present in schema:', object, key, target, schema);\n        $log.error('Object:', object.data.type, object);\n        $log.error('Target:', target.data.type, target);\n        $log.error('Key:', key);\n        $log.error('Schema:', schema);\n        return false;\n      }\n\n      if (oneWay === true) {\n        return __removeHasMany(object, key, target, false);\n      } else {\n        return __processRemove(object, key, target);\n      }\n    }\n\n    /////////////\n    // Private //\n    /////////////\n\n    function __processAddHasMany(object, key, target) {\n      var reflectionKey = object.schema.relationships[key].reflection;\n      var reflectionSchema;\n\n      if (reflectionKey === false) {\n        return __addHasMany(object, key, target);\n      }\n\n      reflectionSchema = target.schema.relationships[reflectionKey];\n\n      if (reflectionSchema.type === 'hasOne') {\n        __processAddHasOne(target, reflectionKey, object);\n      } else if (reflectionSchema.type === 'hasMany') {\n        __addHasMany(object, key, target);\n        __addHasMany(target, reflectionKey, object);\n      }\n    }\n\n    function __processAddHasOne(object, key, target) {\n      var reflectionKey = object.schema.relationships[key].reflection;\n      var oldReflection = object.relationships[key];\n      var reflectionSchema;\n      var oldReflectionSchema;\n\n      __addHasOne(object, key, target);\n\n      if (oldReflection !== undefined && oldReflection !== null) {\n        oldReflectionSchema = oldReflection.schema.relationships[reflectionKey];\n\n        if (oldReflectionSchema.type === 'hasOne') {\n          __removeHasOne(oldReflection, reflectionKey, object);\n        } else if (oldReflectionSchema.type === 'hasMany') {\n          __removeHasMany(oldReflection, reflectionKey, object);\n        }\n      }\n\n      if (target !== undefined && target !== null && reflectionKey !== false) {\n        reflectionSchema = target.schema.relationships[reflectionKey];\n\n        if (reflectionSchema.type === 'hasOne') {\n          __addHasOne(target, reflectionKey, object);\n        } else if (reflectionSchema.type === 'hasMany') {\n          __addHasMany(target, reflectionKey, object);\n        }\n      }\n    }\n\n    function __processRemove(object, key, target) {\n      var schema = object.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var reflectionSchema;\n\n      if (schema.type === 'hasMany') {\n        __removeHasMany(object, key, target);\n      } else if (schema.type === 'hasOne') {\n        __removeHasOne(object, key, target);\n      }\n\n      if (reflectionKey === false) {\n        return;\n      }\n\n      reflectionSchema = target.schema.relationships[reflectionKey];\n\n      if (reflectionSchema.type === 'hasOne') {\n        __removeHasOne(target, reflectionKey, object);\n      } else if (reflectionSchema.type === 'hasMany') {\n        __removeHasMany(target, reflectionKey, object);\n      }\n    }\n\n    function __addHasOne(object, key, target, reset) {\n      $log.debug('addHasOne', object, key, target);\n\n      object.relationships[key] = target;\n      object.data.relationships[key].data = toLinkData(target);\n      if (reset !== false) {\n        object.reset(true);\n      }\n\n      return true;\n    }\n\n    function __addHasMany(object, key, target, reset) {\n      var linkData = toLinkData(target);\n      $log.debug('addHasMany', object, key, target);\n\n      if (angular.isArray(object.relationships[key]) && object.relationships[key].indexOf(target) > -1) {\n        return false;\n      }\n\n      object.relationships[key] = object.relationships[key] || [];\n      object.data.relationships[key].data = object.data.relationships[key].data || [];\n\n      object.relationships[key].push(target);\n      object.data.relationships[key].data.push(linkData);\n      if (reset !== false) {\n        object.reset(true);\n      }\n\n      return true;\n    }\n\n    function __removeHasOne(object, key, target, reset) {\n      $log.debug('removeHasOne', object, key, target);\n\n      if (target !== undefined && object.relationships[key] !== target) {\n        return false;\n      }\n\n      object.relationships[key] = null;\n      object.data.relationships[key].data = undefined;\n      if (reset !== false) {\n        object.reset(true);\n      }\n\n      return true;\n    }\n\n    function __removeHasMany(object, key, target, reset) {\n      $log.debug('removeHasMany', object, key, target);\n\n      if (object.relationships[key] === undefined) {\n        return;\n      }\n\n      if (target === undefined) {\n        object.relationships[key] = [];\n        object.data.relationships[key].data = [];\n        if (reset !== false) {\n          object.reset(true);\n        }\n\n        return true;\n      }\n\n      var index = object.relationships[key].indexOf(target);\n\n      if (index === -1) {\n        return false;\n      }\n\n      object.relationships[key].splice(index, 1);\n      object.data.relationships[key].data.splice(index, 1);\n      if (reset !== false) {\n        object.reset(true);\n      }\n\n      return true;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModelForm', AngularJsonAPIModelFormWrapper);\n\n  function AngularJsonAPIModelFormWrapper(\n    AngularJsonAPIModelValidatorService,\n    AngularJsonAPIModelLinkerService,\n    $q\n  ) {\n\n    AngularJsonAPIModelForm.prototype.save = save;\n    AngularJsonAPIModelForm.prototype.reset = reset;\n    AngularJsonAPIModelForm.prototype.validate = validate;\n    AngularJsonAPIModelForm.prototype.validateField = validateField;\n\n    AngularJsonAPIModelForm.prototype.link = link;\n    AngularJsonAPIModelForm.prototype.unlink = unlink;\n\n    AngularJsonAPIModelForm.prototype.toJson = toJson;\n\n    return AngularJsonAPIModelForm;\n\n    function AngularJsonAPIModelForm(parent) {\n      var _this = this;\n\n      _this.data = {\n        id: parent.data.id,\n        type: parent.data.type,\n        attributes: {},\n        relationships: {}\n      };\n\n      _this.relationships = {};\n      _this.parent = parent;\n      _this.schema = parent.schema;\n      _this.reset();\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Saves form, shortcut to parent.save()\n     * @return {promise} Promise associated with synchronization\n     */\n    function save() {\n      var _this = this;\n\n      return _this.parent.save();\n    }\n\n    /**\n     * Resets form to state of a parent\n     * @return {undefined}\n     */\n    function reset(auto) {\n      var _this = this;\n\n      angular.forEach(_this.schema.relationships, function(data, key) {\n        _this.data.relationships[key] = angular.copy(_this.parent.data.relationships[key]) || {};\n        if (angular.isArray(_this.relationships[key])) {\n          _this.relationships[key] = _this.parent.relationships[key].slice();\n        } else {\n          _this.relationships[key] = _this.parent.relationships[key];\n        }\n      });\n\n      if (auto === true && _this.parent.synchronized === true) {\n        return;\n      }\n\n      angular.forEach(_this.schema.attributes, function(validator, key) {\n        _this.data.attributes[key] = angular.copy(_this.parent.data.attributes[key]) || '';\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n    }\n\n    /**\n     * Validates form\n     * @return {promise} Promise rejected to errors object indexed by keys\n     */\n    function validate() {\n      var _this = this;\n      var deferred = $q.defer();\n\n      AngularJsonAPIModelValidatorService.validateForm(_this.data).then(deferred.resolve, reject);\n\n      function reject(erorrs) {\n        _this.errors.validation = erorrs;\n\n        deferred.reject(erorrs);\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Validates single field\n     * @param  {string} key Field key\n     * @return {promise} Promise rejected to errors array\n     */\n    function validateField(key) {\n      var _this = this;\n      var deferred = $q.defer();\n\n      AngularJsonAPIModelValidatorService.validateForm(_this.data[key], key).then(deferred.resolve, reject);\n\n      function reject(erorrs) {\n        _this.errors.validation[key] = erorrs;\n\n        deferred.reject(erorrs);\n      }\n\n      return deferred.promise;\n    }\n\n    /**\n     * Adds link to a form without synchronization\n     * @param {string} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function link(key, target) {\n      var _this = this;\n\n      return $q.resolve(AngularJsonAPIModelLinkerService.link(_this, key, target, true));\n    }\n\n    /**\n     * Removes link from form without synchronization\n     * @param  {[type]} key    Relationship name\n     * @param {AngularJsonAPIModel} target Object to be linked\n     * @return {Boolean}        Status\n     */\n    function unlink(key, target) {\n      var _this = this;\n\n      return $q.resolve(AngularJsonAPIModelLinkerService.unlink(_this, key, target, true));\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIAbstractModel', AngularJsonAPIAbstractModelWrapper);\n\n  function AngularJsonAPIAbstractModelWrapper(\n    AngularJsonAPIModelForm,\n    AngularJsonAPIModelLinkerService,\n    uuid4,\n    $rootScope,\n    $injector,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIAbstractModel.prototype.refresh = refresh;\n    AngularJsonAPIAbstractModel.prototype.remove = remove;\n    AngularJsonAPIAbstractModel.prototype.reset = reset;\n    AngularJsonAPIAbstractModel.prototype.save = save;\n\n    AngularJsonAPIAbstractModel.prototype.update = update;\n\n    AngularJsonAPIAbstractModel.prototype.link = link;\n    AngularJsonAPIAbstractModel.prototype.unlink = unlink;\n    AngularJsonAPIAbstractModel.prototype.unlinkAll = unlinkAll;\n\n    AngularJsonAPIAbstractModel.prototype.toJson = toJson;\n\n    return AngularJsonAPIAbstractModel;\n\n    /**\n     * Constructor\n     * @param {json}  data      Validated data used to create an object\n     * @param {Boolean} saved   Is object new (for form)\n     */\n    function AngularJsonAPIAbstractModel(data, saved, synchronized) {\n      var _this = this;\n\n      data.relationships = data.relationships || {};\n\n      /**\n       * Is not a new record\n       * @type {Boolean}\n       */\n      _this.saved = saved === undefined ? true : saved;\n\n      /**\n       * Is present on the server\n       * @type {Boolean}\n       */\n      _this.stable = synchronized === undefined ? true : synchronized;\n\n      /**\n       * Has been synchronized with the server\n       * @type {Boolean}\n       */\n      _this.synchronized = synchronized === undefined ? true : synchronized;\n\n      _this.removed = false;\n      _this.loadingCount = 0;\n      _this.updatedAt = Date.now();\n\n      _this.data = {\n        relationships: {},\n        attributes: {}\n      };\n      _this.relationships = {};\n\n      angular.forEach(_this.schema.relationships, function(schema, name) {\n        _this.relationships[name] = undefined;\n      });\n\n      _this.errors = {\n        validation: {}\n      };\n\n      _this.promises = {};\n\n      __setData(_this, data);\n\n      _this.form = new AngularJsonAPIModelForm(_this);\n    }\n\n    /**\n     * Saves model's form\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function save() {\n      var _this = this;\n      var deferred = $q.defer();\n      var config = {\n        action: _this.saved === false ? 'add' : 'update',\n        object: _this\n      };\n\n      _this.form.validate().then(\n        _this.synchronize(config).then(resolve, reject, notify),\n        deferred.reject\n      );\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'resolved', _this, response);\n        _this.update(_this.form.data);\n\n        _this.synchronized = true;\n        _this.saved = true;\n        _this.stable = true;\n\n        response.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response.errors);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:save', 'notify', _this, response);\n\n        deferred.notify(response.errors);\n      }\n    }\n\n    /**\n     * Reset object form\n     * @return {undefined}\n     */\n    function reset() {\n      var _this = this;\n\n      if (_this.form !== undefined) {\n        _this.form.reset();\n      }\n    }\n\n    /**\n     * Synchronize object with remote\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function refresh() {\n      var $jsonapi = $injector.get('$jsonapi');\n      var deferred = $q.defer();\n      var _this = this;\n      var config = {\n        action: 'refresh',\n        object: _this,\n        params: _this.schema.params.get\n      };\n\n      if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t refresh new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'resolved', _this, response);\n        $jsonapi.proccesResults(response.data);\n        response.finish();\n\n        _this.synchronized = true;\n        _this.stable = true;\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'rejected', _this, response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:refresh', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Encodes object into json\n     * @return {json} Json object\n     */\n    function toJson() {\n      var _this = this;\n      var data = angular.copy(_this.data);\n      var relationships = {};\n\n      angular.forEach(data.relationships, function(value, key) {\n        if (value.data !== undefined) {\n          relationships[key] = value;\n        }\n      });\n\n      data.relationships = relationships;\n\n      return {\n        data: data\n      };\n    }\n\n    /**\n     * Remove object\n     * @return {promise} Promise associated with synchronization that resolves to nothing\n     */\n    function remove() {\n      var _this = this;\n      var deferred = $q.defer();\n\n      var config = {\n        action: 'remove',\n        object: _this\n      };\n\n      _this.parentFactory.cache.remove(_this.data.id);\n\n      if (_this.saved === false) {\n        deferred.resolve();\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'resolved', _this, response);\n        _this.removed = true;\n        _this.unlinkAll();\n        _this.parentFactory.cache.clearRemoved(_this.data.id);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'rejected', _this, response);\n        _this.parentFactory.cache.revertRemove(_this.data.id);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:remove', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Unlink all reflection relationships of the object **without synchronization**\n     * @return {boolean} Result\n     */\n    function unlinkAll(key) {\n      var _this = this;\n      var deferred = $q.defer();\n\n      if (key === undefined) {\n        angular.forEach(_this.relationships, removeLink);\n      } else {\n        removeLink(_this.relationships[key], key);\n      }\n\n      return deferred.promise;\n\n      function removeLink(linksObj, key) {\n        var schema = _this.schema.relationships[key];\n        var reflectionKey = schema.reflection;\n\n        if (angular.isArray(linksObj)) {\n          angular.forEach(linksObj, removeReflectionLink.bind(undefined, reflectionKey));\n        } else if (angular.isObject(linksObj)) {\n          removeReflectionLink(reflectionKey, linksObj);\n        }\n\n        if (schema.type === 'hasOne') {\n          _this.relationships[key] = null;\n        } else if (schema.type === 'hasMany') {\n          _this.relationships[key] = [];\n        }\n      }\n\n      function removeReflectionLink(reflectionKey, target) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n        AngularJsonAPIModelLinkerService.unlink(target, reflectionKey, _this, reflectionSchema);\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolve, reject, notify);\n\n        function resolve(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function reject(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notify(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n    }\n\n    /**\n     * Links object to relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be linked\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function link(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var config = {\n        action: 'link',\n        object: _this,\n        schema: schema,\n        target: target,\n        key: key\n      };\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link undefined'}]});\n      } else if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.link(_this, key, target);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'linkReflection',\n          schema: reflectionSchema,\n          object: target,\n          target: _this,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:linkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:link', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Unlinks object from relationship with the key\n     * @param  {string} key    Relationship name\n     * @param  {AngularJsonAPIModel} target Object to be unlinked if undefined unlinks all\n     * @return {promise}        Promise associated with synchronizations\n     */\n    function unlink(key, target) {\n      var deferred = $q.defer();\n      var _this = this;\n      var schema = _this.schema.relationships[key];\n      var reflectionKey = schema.reflection;\n      var config = {\n        action: 'unlink',\n        object: _this,\n        target: target,\n        schema: schema,\n        key: key\n      };\n\n      if (target === undefined) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink undefined'}]});\n      } else if (_this.saved === false) {\n        deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink new object'}]});\n      } else {\n        _this.synchronize(config).then(resolve, reject, notify);\n      }\n\n      return deferred.promise;\n\n      function resolve(response) {\n        var reflectionSchema = target.schema.relationships[reflectionKey];\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'resolved', _this, response);\n\n        AngularJsonAPIModelLinkerService.unlink(_this, key, target, schema);\n\n        _this.stable = true;\n        response.finish();\n\n        target.synchronize({\n          action: 'unlinkReflection',\n          object: target,\n          target: _this,\n          schema: reflectionSchema,\n          key: reflectionKey\n        }).then(resolveReflection, rejectReflection, notifyReflection);\n\n        function resolveReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'resolve', _this, response);\n\n          response.finish();\n          deferred.resolve(_this);\n        }\n\n        function rejectReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'rejected', _this, response);\n\n          response.finish();\n          deferred.reject(response);\n        }\n\n        function notifyReflection(response) {\n          $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlinkReflection', 'notify', _this, response);\n\n          response.finish();\n          deferred.notify(response);\n        }\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'rejected', _this, response);\n\n        deferred.reject(response.errors);\n        response.finish();\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.data.type + ':object:unlink', 'notify', _this, response);\n\n        deferred.notify(response);\n      }\n    }\n\n    /**\n     * Sets object state to data\n     * @param  {object} validatedData JsonAPI object with data\n     * @return {bool}               Result\n     */\n    function update(validatedData, auto, initialization) {\n      var _this = this;\n\n      if (__setData(_this, validatedData) === true) {\n        _this.reset(auto);\n        _this.synchronized = initialization === true ? false : true;\n        _this.stable = initialization === true ? false : true;\n        _this.updatedAt = Date.now();\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    /////////////\n    // PRIVATE //\n    /////////////\n\n    /**\n     * Low level set data function, use only with validated data\n     * @param  {AngularJsonAPIModel} object        object to be modified\n     * @param  {object} validatedData Validated data\n     * @return {boolean}               Status\n     */\n    function __setData(object, validatedData) {\n\n      var $jsonapi = $injector.get('$jsonapi');\n      var schema = object.schema;\n\n      object.data.id = validatedData.id;\n      object.data.type = validatedData.type;\n\n      if (object.parentFactory.schema.type !== validatedData.type) {\n        $log.error('Different type then factory', object.parentFactory.schema.type, validatedData);\n        return false;\n      }\n\n      if (!uuid4.validate(object.data.id)) {\n        $log.error('Invalid id');\n        return false;\n      }\n\n      validatedData.attributes = validatedData.attributes || {};\n      validatedData.relationships = validatedData.relationships || {};\n\n      angular.forEach(schema.attributes, setAttributes);\n      angular.forEach(schema.relationships, setRelationships);\n\n      return true;\n\n      function setAttributes(validators, key) {\n        object.data.attributes[key] = validatedData.attributes[key];\n      }\n\n      function setRelationships(schema, key) {\n        var relationshipData = validatedData.relationships[key];\n\n        if (relationshipData === undefined) {\n          object.data.relationships[key] = {data: undefined};\n          return;\n        }\n\n        object.data.relationships[key] = object.data.relationships[key] || {};\n        object.data.relationships[key].links = relationshipData.links;\n\n        if (schema.type === 'hasOne') {\n          linkOne(object, key, relationshipData.data);\n        } else if (schema.type === 'hasMany') {\n          if (angular.isArray(relationshipData.data)) {\n            if (relationshipData.data.length === 0) {\n              object.data.relationships[key].data = [];\n              object.unlinkAll(key);\n            } else {\n              angular.forEach(\n                object.relationships[key],\n                unlinkOne.bind(undefined, object, key, relationshipData.data)\n              );\n              angular.forEach(\n                relationshipData.data,\n                linkOne.bind(undefined, object, key)\n              );\n            }\n          }\n        }\n      }\n\n      function linkOne(object, key, data) {\n        var factory;\n\n        if (data === null) {\n          AngularJsonAPIModelLinkerService.link(object, key, null);\n          return;\n        }\n\n        if (data === undefined) {\n          return;\n        }\n\n        factory = $jsonapi.getFactory(data.type);\n\n        if (factory === undefined) {\n          $log.error('Factory not found', data.type, data);\n          return;\n        }\n\n        var target = factory.cache.get(data.id);\n\n        AngularJsonAPIModelLinkerService.link(object, key, target);\n      }\n\n      function unlinkOne(object, key, relationshipData, target) {\n        if (relationshipData.indexOf(target.data.id) > -1) {\n          return;\n        }\n\n        AngularJsonAPIModelLinkerService.unlink(object, key, target);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICache', AngularJsonAPICacheWrapper);\n\n  function AngularJsonAPICacheWrapper(\n    uuid4,\n    $log\n  ) {\n\n    AngularJsonAPICache.prototype.get = get;\n    AngularJsonAPICache.prototype.index = index;\n    AngularJsonAPICache.prototype.setIndexIds = setIndexIds;\n    AngularJsonAPICache.prototype.addOrUpdate = addOrUpdate;\n\n    AngularJsonAPICache.prototype.fromJson = fromJson;\n    AngularJsonAPICache.prototype.toJson = toJson;\n    AngularJsonAPICache.prototype.clear = clear;\n\n    AngularJsonAPICache.prototype.remove = remove;\n    AngularJsonAPICache.prototype.revertRemove = revertRemove;\n    AngularJsonAPICache.prototype.clearRemoved = clearRemoved;\n\n    return AngularJsonAPICache;\n\n    /**\n     * Constructor\n     */\n    function AngularJsonAPICache(factory) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.data = {};\n      _this.removed = {};\n      _this.size = 0;\n\n      _this.indexIds = undefined;\n    }\n\n    /**\n     * Add new model or update existing with data\n     * @param {object} validatedData Data that are used to update or create an object, has to be valid\n     * @return {AngularJsonAPIModel} Created model\n     */\n    function addOrUpdate(validatedData, config) {\n      var _this = this;\n      var id = validatedData.id;\n\n      if (id === undefined) {\n        $log.error('Can\\'t add data without id!', validatedData);\n        return;\n      }\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model(validatedData, config.saved, config.synchronized);\n        _this.size += 1;\n      } else {\n        _this.data[id].update(validatedData, config.saved, config.initialization);\n      }\n\n      return _this.data[id];\n    }\n\n\n    /**\n     * Recreate object structure from json data\n     * @param  {json} json Json data\n     * @return {undefined}\n     */\n    function fromJson(json) {\n      var _this = this;\n      var collection = angular.fromJson(json);\n\n      var config = {\n        saved: true,\n        synchronized: false,\n        initialization: true\n      };\n\n      if (angular.isObject(collection) && collection.data !== undefined) {\n        _this.updatedAt = collection.updatedAt;\n        _this.indexIds = collection.indexIds;\n\n        angular.forEach(collection.data, function(objectData) {\n          var data = objectData.data;\n          console.log('fromJson', data.id);\n          _this.addOrUpdate(data, config);\n        });\n      }\n    }\n\n    /**\n     * Encodes memory into json format\n     * @return {json} Json encoded memory\n     */\n    function toJson() {\n      var _this = this;\n      var json = {\n        data: {},\n        updatedAt: _this.updatedAt,\n        indexIds: _this.indexIds\n      };\n\n      angular.forEach(_this.data, function(object, key) {\n        json.data[key] = object.toJson();\n      });\n\n      return angular.toJson(json);\n    }\n\n    /**\n     * Clear memory\n     * @return {undefined}\n     */\n    function clear() {\n      var _this = this;\n\n      _this.indexIds = undefined;\n      _this.data = {};\n      _this.removed = {};\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function get(id) {\n      var _this = this;\n\n      if (_this.data[id] === undefined) {\n        _this.data[id] = new _this.factory.Model({id: id, type: _this.factory.Model.prototype.schema.type}, true, false);\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Low level get used internally, does not run any synchronization\n     * @param  {objec} params\n     * @return {AngularJsonAPIModel} Model associated with id\n     */\n    function index(params) {\n      var _this = this;\n\n      $log.warn('Unused params', params);\n\n      if (_this.indexIds === undefined) {\n        return _this.indexIds;\n      }\n\n      return _this.indexIds.map(_this.get.bind(_this));\n    }\n\n    /**\n     * Cache ids of objects returned by index request\n     * @param {ids array or AngularJsonAPIModel array} array Objects or ids to be cached\n     */\n    function setIndexIds(array) {\n      var _this = this;\n\n      _this.indexIds = [];\n\n      angular.forEach(array, function(element) {\n        if (angular.isString(element) && uuid4.validate(element)) {\n          _this.indexIds.push(element);\n        } else if (angular.isObject(element) && uuid4.validate(element.data.id)) {\n          _this.indexIds.push(element.data.id);\n        }\n      });\n    }\n\n    /**\n     * Remove object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function remove(id) {\n      var _this = this;\n\n      if (_this.data[id] !== undefined) {\n        _this.removed[id] = _this.data[id];\n        delete _this.data[id];\n        _this.size -= 1;\n      }\n\n      return _this.removed[id];\n    }\n\n    /**\n     * Revert removal of an object with given id from cache\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel / undefined}    Removed object, undefined if\n     * object does not exist\n     */\n    function revertRemove(id) {\n      var _this = this;\n\n      if (_this.removed[id] !== undefined) {\n        _this.data[id] = _this.removed[id];\n        delete _this.removed[id];\n        _this.size += 1;\n      }\n\n      return _this.data[id];\n    }\n\n    /**\n     * Clear removed object from memory\n     * @param  {uuid} id\n     * @return {undefined}\n     */\n    function clearRemoved(id) {\n      var _this = this;\n\n      delete _this.removed[id];\n    }\n  }\n})();\n","// from https://www.sitepen.com/blog/2012/10/19/lazy-property-access/\n(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('lazyProperty', function(target, propertyName, callback) {\n      var result;\n      var done;\n      Object.defineProperty(target, propertyName, {\n        get: function() { // Define the getter\n          if (!done) {\n            // We cache the result and only compute once.\n            done = true;\n            result = callback.call(target);\n          }\n\n          return result;\n        },\n\n        // Keep it enumerable and configurable, certainly not necessary.\n        enumerable: true,\n        configurable: true\n      });\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n    .constant('toKebabCase', function(str) {\n      return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n    });\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi').config(['$provide', function($provide) {\n    $provide.decorator('$q', ['$delegate', function($delegate) {\n      var $q = $delegate;\n\n      $q.allSettled = $q.allSettled || function allSettled(promises, resolvedCallback, rejectedCallback) {\n        // Implementation of allSettled function from Kris Kowal's Q:\n        // https://github.com/kriskowal/q/wiki/API-Reference#promiseallsettled\n        // by Michael Kropat from http://stackoverflow.com/a/27114615/1400432 slightly modified\n\n        var wrapped = angular.isArray(promises) ? [] : {};\n\n        angular.forEach(promises, function(promise, key) {\n          if (!wrapped.hasOwnProperty(key)) {\n            wrapped[key] = wrap(promise);\n          }\n        });\n\n        return $q.all(wrapped);\n\n        function wrap(promise) {\n          return $q.resolve(promise)\n            .then(function(value) {\n              if (angular.isFunction(resolvedCallback)) {\n                resolvedCallback(value);\n              }\n\n              return { success: true, value: value };\n            },\n\n            function(reason) {\n              if (angular.isFunction(rejectedCallback)) {\n                rejectedCallback(reason);\n              }\n\n              return { success: false, reason: reason };\n            });\n        }\n      };\n\n      return $q;\n    }]);\n  }]);\n\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerSimple', AngularJsonAPISynchronizerSimpleWrapper);\n\n  function AngularJsonAPISynchronizerSimpleWrapper(AngularJsonAPISynchronizerPrototype, $q, $log) {\n\n    AngularJsonAPISynchronizerSimple.prototype = Object.create(AngularJsonAPISynchronizerPrototype.prototype);\n    AngularJsonAPISynchronizerSimple.prototype.constructor = AngularJsonAPISynchronizerSimple;\n\n    AngularJsonAPISynchronizerSimple.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerSimple;\n\n    function AngularJsonAPISynchronizerSimple(synchronizations) {\n      var _this = this;\n\n      _this.state = {};\n\n      AngularJsonAPISynchronizerPrototype.call(_this, synchronizations);\n\n      angular.forEach(synchronizations, function(synchronization) {\n        synchronization.synchronizer = _this;\n      });\n    }\n\n    function synchronize(config) {\n      var _this = this;\n      var promises = [];\n      var deferred = $q.defer();\n      var action = config.action;\n\n      AngularJsonAPISynchronizerPrototype.prototype.synchronize.call(_this, config);\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beginHooks[action], function(hook) {\n          deferred.notify({step: 'begin', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.beforeHooks[action], function(hook) {\n          deferred.notify({step: 'before', data: hook.call(_this, config)});\n        });\n      });\n\n      angular.forEach(_this.synchronizations, function(synchronization) {\n        angular.forEach(synchronization.synchronizationHooks[action], function(hook) {\n          promises.push(hook.call(_this, config));\n        });\n      });\n\n      $q.allSettled(promises, resolvedCallback, rejectedCallback).then(resolved, rejected);\n\n      function resolvedCallback(value) {\n        deferred.notify({step: 'synchronization', data: value});\n      }\n\n      function rejectedCallback(reason) {\n        deferred.notify({step: 'synchronization', errors: reason});\n      }\n\n      function resolved(results) {\n        _this.state[action] = _this.state[action] || {};\n        _this.state[action].success = true;\n\n        angular.forEach(results, function(result) {\n          if (result.success === false) {\n            _this.state[action].success = false;\n          }\n        });\n\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.afterHooks[action], function(hook) {\n            deferred.notify({step: 'after', errors: hook.call(_this, config, results)});\n          });\n        });\n\n        var data;\n        var errors = [];\n\n        angular.forEach(results, function(result) {\n          if (result.success === true) {\n            data = result.value;\n          } else {\n            errors.push(result.reason);\n          }\n        });\n\n        if (errors.length > 0) {\n          deferred.reject({data: data, finish: finish, errors: errors});\n        } else {\n          deferred.resolve({data: data, finish: finish, errors: errors});\n        }\n      }\n\n      function finish() {\n        angular.forEach(_this.synchronizations, function(synchronization) {\n          angular.forEach(synchronization.finishHooks[action], function(hook) {\n            deferred.notify({step: 'finish', errors: hook.call(_this, config)});\n          });\n        });\n      }\n\n      function rejected(errors) {\n        $log.error('All settled rejected! Something went wrong');\n\n        deferred.reject({finish: angular.noop, errors: errors});\n      }\n\n      return deferred.promise;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizerPrototype', AngularJsonAPISynchronizerPrototypeWrapper);\n\n  function AngularJsonAPISynchronizerPrototypeWrapper($log) {\n\n    AngularJsonAPISynchronizerPrototype.prototype.synchronize = synchronize;\n\n    return AngularJsonAPISynchronizerPrototype;\n\n    function AngularJsonAPISynchronizerPrototype(synchronizations) {\n      var _this = this;\n\n      _this.synchronizations = synchronizations;\n    }\n\n    function synchronize(config) {\n      var _this = this;\n\n      $log.debug('Synchro Collection', _this.factory.Model.prototype.schema.type, config);\n\n      if (config.action === undefined) {\n        $log.error('Can\\'t synchronize undefined action', config);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-rest', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationRest', AngularJsonAPISynchronizationRestWrapper);\n\n  function AngularJsonAPISynchronizationRestWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    AngularJsonAPIModelLinkerService,\n    toKebabCase,\n    $q,\n    $http\n  ) {\n\n    AngularJsonAPISynchronizationRest.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationRest.prototype.constructor = AngularJsonAPISynchronizationRest;\n\n    return AngularJsonAPISynchronizationRest;\n\n    function AngularJsonAPISynchronizationRest(url) {\n      var _this = this;\n      var headers = { // jscs:disable disallowQuotedKeysInObjects\n        'Accept': 'application/vnd.api+json',\n        'Content-Type': 'application/vnd.api+json'\n      }; // jscs:enable disallowQuotedKeysInObjects\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('remove', remove);\n      _this.synchronization('unlink', unlink);\n      _this.synchronization('link', link);\n      _this.synchronization('update', update);\n      _this.synchronization('add', add);\n      _this.synchronization('all', all);\n      _this.synchronization('get', get);\n      _this.synchronization('refresh', get);\n\n      function all(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function get(config) {\n        return $http({\n          method: 'GET',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          params: config.params || {}\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function remove(config) {\n        return $http({\n          method: 'DELETE',\n          headers: headers,\n          url: url + '/' + config.object.data.id\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function unlink(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target !== undefined && config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t unlink object without id through rest call'}]});\n        } else if (config.schema.type === 'hasOne') {\n          $http({\n            method: 'DELETE',\n            headers: headers,\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        } else if (config.schema.type === 'hasMany') {\n          if (config.target === undefined) {\n            $http({\n              method: 'PUT',\n              headers: headers,\n              data: {data: []},\n              url: url + '/' + config.object.data.id + '/relationships/' + config.key\n            }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n          } else {\n            $http({\n              method: 'DELETE',\n              headers: headers,\n              url: url + '/' + config.object.data.id + '/relationships/' + config.key + '/' + config.target.data.id\n            }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n          }\n        }\n\n        return deferred.promise;\n      }\n\n      function link(config) {\n        var deferred = $q.defer();\n\n        if (config.object.removed === true) {\n          deferred.reject({errors: [{status: 0, statusText: 'Object has been removed'}]});\n        } else if (config.target === undefined || config.target.data.id === undefined) {\n          deferred.reject({errors: [{status: 0, statusText: 'Can\\'t link object without id through rest call'}]});\n        } else if (config.schema.type === 'hasOne') {\n          $http({\n            method: 'PUT',\n            headers: headers,\n            data: {data: AngularJsonAPIModelLinkerService.toLinkData(config.target)},\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        } else if (config.schema.type === 'hasMany') {\n          $http({\n            method: 'POST',\n            headers: headers,\n            data: {data: [AngularJsonAPIModelLinkerService.toLinkData(config.target)]},\n            url: url + '/' + config.object.data.id + '/relationships/' + config.key\n          }).then(resolveHttp, rejectHttp).then(deferred.resolve, deferred.reject);\n        }\n\n        return deferred.promise;\n      }\n\n      function update(config) {\n        return $http({\n          method: 'PUT',\n          headers: headers,\n          url: url + '/' + config.object.data.id,\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function add(config) {\n        return $http({\n          method: 'POST',\n          headers: headers,\n          url: url + '/',\n          data: config.object.form.toJson()\n        }).then(resolveHttp, rejectHttp);\n      }\n\n      function resolveHttp(response) {\n        return $q.resolve(response.data);\n      }\n\n      function rejectHttp(response) {\n        var deferred = $q.defer();\n\n        if (response.status === 0) {\n          $http({\n            method: 'GET',\n            url: 'https://status.cloud.google.com/incidents.schema.json'\n          }).then(rejectServerOffline, rejectNoConnection);\n        } else {\n          deferred.reject({status: response.status, statusText: response.statusText});\n        }\n\n        return deferred.promise;\n\n        function rejectServerOffline() {\n          deferred.reject({status: response.status, statusText: 'Server is offline'});\n        }\n\n        function rejectNoConnection() {\n          deferred.reject({status: response.status, statusText: 'No internet connection'});\n        }\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISynchronizationPrototype', AngularJsonAPISynchronizationPrototypeWrapper);\n\n  function AngularJsonAPISynchronizationPrototypeWrapper() {\n    AngularJsonAPISynchronizationPrototype.prototype.before = beforeSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.after = afterSynchro;\n    AngularJsonAPISynchronizationPrototype.prototype.begin = begin;\n    AngularJsonAPISynchronizationPrototype.prototype.finish = finish;\n    AngularJsonAPISynchronizationPrototype.prototype.synchronization = synchronization;\n\n    return AngularJsonAPISynchronizationPrototype;\n\n    function AngularJsonAPISynchronizationPrototype() {\n      var _this = this;\n      var allHooks = [\n        'add',\n        'init',\n        'get',\n        'all',\n        'clearCache',\n        'remove',\n        'unlink',\n        'unlinkReflection',\n        'link',\n        'linkReflection',\n        'update',\n        'refresh'\n      ];\n\n      _this.state = {};\n\n      _this.beginHooks = {};\n      _this.beforeHooks = {};\n      _this.synchronizationHooks = {};\n      _this.afterHooks = {};\n      _this.finishHooks = {};\n\n      _this.options = {};\n\n      angular.forEach(allHooks, function(hookName) {\n        _this.beginHooks[hookName] = [];\n        _this.beforeHooks[hookName] = [];\n        _this.synchronizationHooks[hookName] = [];\n        _this.afterHooks[hookName] = [];\n        _this.finishHooks[hookName] = [];\n        _this.state[hookName] = {\n          loading: false,\n          success: true\n        };\n      });\n    }\n\n    function begin(action, callback) {\n      var _this = this;\n\n      _this.beginHooks[action].push(callback);\n    }\n\n    function finish(action, callback) {\n      var _this = this;\n\n      _this.finishHooks[action].push(callback);\n    }\n\n    function beforeSynchro(action, callback) {\n      var _this = this;\n\n      _this.beforeHooks[action].push(callback);\n    }\n\n    function afterSynchro(action, callback) {\n      var _this = this;\n\n      _this.afterHooks[action].push(callback);\n    }\n\n    function synchronization(action, callback) {\n      var _this = this;\n\n      _this.synchronizationHooks[action].push(callback);\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi-local', ['angular-jsonapi'])\n  .factory('AngularJsonAPISynchronizationLocal', AngularJsonAPISynchronizationLocalWrapper);\n\n  function AngularJsonAPISynchronizationLocalWrapper(\n    AngularJsonAPISynchronizationPrototype,\n    $window,\n    $q\n  ) {\n\n    AngularJsonAPISynchronizationLocal.prototype = Object.create(AngularJsonAPISynchronizationPrototype.prototype);\n    AngularJsonAPISynchronizationLocal.prototype.constructor = AngularJsonAPISynchronizationLocal;\n\n    return AngularJsonAPISynchronizationLocal;\n\n    function AngularJsonAPISynchronizationLocal(prefix) {\n      var _this = this;\n\n      prefix = prefix || 'AngularJsonAPI';\n\n      _this.__updateStorage = updateStorage;\n\n      AngularJsonAPISynchronizationPrototype.call(_this);\n\n      _this.synchronization('init', init);\n\n      _this.begin('clearCache', clear);\n      _this.begin('remove', updateStorage);\n      _this.begin('refresh', updateStorage);\n      _this.begin('unlink', updateStorage);\n      _this.begin('unlinkReflection', updateStorage);\n      _this.begin('link', updateStorage);\n      _this.begin('linkReflection', updateStorage);\n      _this.begin('update', updateStorage);\n      _this.begin('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      _this.finish('init', updateStorage);\n      _this.finish('clearCache', updateStorage);\n      _this.finish('remove', updateStorage);\n      _this.finish('refresh', updateStorage);\n      _this.finish('unlink', updateStorage);\n      _this.finish('unlinkReflection', updateStorage);\n      _this.finish('link', updateStorage);\n      _this.finish('linkReflection', updateStorage);\n      _this.finish('update', updateStorage);\n      _this.finish('add', updateStorage);\n      _this.finish('get', updateStorage);\n      _this.finish('all', updateStorage);\n\n      function init() {\n        var type = _this.synchronizer.factory.schema.type;\n        return $q.resolve($window.localStorage.getItem(prefix + '.' + type));\n      }\n\n      function clear() {\n        var type = _this.synchronizer.factory.schema.type;\n        $window.localStorage.removeItem(prefix + '.' + type);\n      }\n\n      function updateStorage() {\n        var type = _this.synchronizer.factory.schema.type;\n        var cache = _this.synchronizer.factory.cache;\n        $window.localStorage.setItem(prefix + '.' + type, cache.toJson());\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchema', AngularJsonAPISchemaWrapper);\n\n  function AngularJsonAPISchemaWrapper($log, pluralize, AngularJsonAPISchemaLink) {\n\n    return AngularJsonAPISchema;\n\n    function AngularJsonAPISchema(schema) {\n      var _this = this;\n      var include = schema.include || {};\n      schema.include = include;\n      include.get = schema.include.get || [];\n      include.all = schema.include.all || [];\n\n      _this.params = {\n        get: {},\n        all: {}\n      };\n\n      angular.forEach(schema.relationships, function(linkSchema, linkName) {\n        var linkSchemaObj = new AngularJsonAPISchemaLink(linkSchema, linkName, schema.type);\n        schema.relationships[linkName] = linkSchemaObj;\n        if (linkSchemaObj.included === true) {\n          include.get.push(linkName);\n          if (linkSchemaObj.type === 'hasOne') {\n            include.all.push(linkName);\n          }\n        }\n      });\n\n      angular.extend(_this, schema);\n\n      if (include.get.length > 0) {\n        _this.params.get.include = include.get.join(',');\n      }\n\n      if (include.all.length > 0) {\n        _this.params.all.include = include.all.join(',');\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPISchemaLink', AngularJsonAPILinkSchrapperLink);\n\n  function AngularJsonAPILinkSchrapperLink($log, pluralize) {\n\n    return AngularJsonAPISchemaLink;\n\n    function AngularJsonAPISchemaLink(linkSchema, linkName, type) {\n      var _this = this;\n\n      if (angular.isString(linkSchema)) {\n        _this.model = pluralize.plural(linkName);\n        _this.type = linkSchema;\n        _this.polymorphic = false;\n        _this.reflection = type;\n      } else {\n        if (linkSchema.type === undefined) {\n          $log.error('Schema of link without a type: ', linkSchema, linkName);\n        }\n\n        if (linkSchema.type !== 'hasMany' && linkSchema.type !== 'hasOne') {\n          $log.error('Schema of link with wrong type: ', linkSchema.type, 'available: hasOne, hasMany');\n        }\n\n        _this.model = linkSchema.model || pluralize.plural(linkName);\n        _this.type = linkSchema.type;\n        _this.polymorphic = linkSchema.polymorphic || false;\n\n        if (linkSchema.reflection === undefined) {\n          _this.reflection = _this.type === 'hasMany' ? pluralize.singular(type) : type;\n        } else {\n          _this.reflection = linkSchema.reflection;\n        }\n\n        _this.included = linkSchema.included || false;\n      }\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIModel', AngularJsonAPIModel);\n\n  function AngularJsonAPIModel(AngularJsonAPIAbstractModel, AngularJsonAPISchema, $log) {\n\n    return {\n      model: modelFactory\n    };\n\n    function modelFactory(schemaObj, parentFactory) {\n      var Model = function(data, updatedAt, saved) {\n        var _this = this;\n\n        if (data.type !== _this.schema.type) {\n          $log.error('Data type other then declared in schema: ', data.type, ' instead of ', _this.schema.type);\n        }\n\n        AngularJsonAPIAbstractModel.call(_this, data, updatedAt, saved);\n\n        _this.form.parent = _this;\n      };\n\n      Model.prototype = Object.create(AngularJsonAPIAbstractModel.prototype);\n      Model.prototype.constructor = Model;\n\n      Model.prototype.schema = schemaObj;\n      Model.prototype.parentFactory = parentFactory;\n      Model.prototype.synchronize = parentFactory.synchronizer.synchronize.bind(parentFactory.synchronizer);\n\n      angular.forEach(schemaObj.functions, function(metaFunction, metaFunctionName) {\n        Model.prototype[metaFunctionName] = function() {\n          return metaFunction.apply(this, arguments);\n        };\n      });\n\n      return Model;\n    }\n\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPIFactory', AngularJsonAPIFactoryWrapper);\n\n  function AngularJsonAPIFactoryWrapper(\n    AngularJsonAPIModel,\n    AngularJsonAPISchema,\n    AngularJsonAPICache,\n    AngularJsonAPICollection,\n    uuid4,\n    $rootScope,\n    $log,\n    $q\n  ) {\n    AngularJsonAPIFactory.prototype.get = get;\n    AngularJsonAPIFactory.prototype.all = all;\n    AngularJsonAPIFactory.prototype.remove = remove;\n    AngularJsonAPIFactory.prototype.initialize = initialize;\n\n    AngularJsonAPIFactory.prototype.clearCache = clearCache;\n\n    return AngularJsonAPIFactory;\n\n    /**\n     * AngularJsonAPIFactory constructor\n     * @param {json} schema       Schema object\n     * @param {AngularJsonAPISynchronizer} synchronizer Synchronizer for the factory\n     */\n    function AngularJsonAPIFactory(schema, synchronizer) {\n      var _this = this;\n      var config = {\n        action: 'init'\n      };\n\n      _this.schema = new AngularJsonAPISchema(schema);\n      _this.cache = new AngularJsonAPICache(_this);\n\n      _this.synchronizer = synchronizer;\n      _this.synchronizer.factory = _this;\n\n      _this.Model = AngularJsonAPIModel.model(\n        _this.schema,\n        _this\n      );\n\n      _this.initialized = false;\n      _this.type = _this.schema.type;\n\n      synchronizer.factory = _this;\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'resolved', response);\n        _this.cache.fromJson(response.data);\n        _this.initialized = true;\n\n        response.finish();\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'rejected', response);\n        response.finish();\n        _this.initialized = true;\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:init', 'notify', response);\n      }\n    }\n\n    /**\n     * Get request\n     * @param  {uuid} id\n     * @return {AngularJsonAPIModel} Model associated with id, synchronized\n     */\n    function get(id) {\n      var _this = this;\n\n      if (!uuid4.validate(id)) {\n        return $q.reject({errors: [{status: 0, statusText: 'Invalid id not uuid4'}]});\n      }\n\n      return _this.cache.get(id).refresh();\n    }\n\n    /**\n     * All request\n     * @param  {object} params Object associated with params (for filters/pagination etc.)\n     * @return {AngularJsonAPICollection} Collection of AngularJsonAPIModel, synchronized\n     */\n    function all(params) {\n      var _this = this;\n      params = params || {};\n\n      var collection = new AngularJsonAPICollection(\n        _this,\n        angular.extend(params, _this.schema.params.all)\n      );\n\n      collection.fetch();\n\n      return collection;\n    }\n\n    /**\n     * Remove request\n     * @param  {uuid} id\n     * @return {promise} Promise associated with the synchronization, in case of\n     * fail object is reverted to previous state\n     */\n    function remove(id) {\n      var _this = this;\n      var object = _this.cache.remove(id);\n\n      return object.remove();\n    }\n\n    /**\n     * Initialize new AngularJsonAPIModel\n     * @return {AngularJsonAPIModel} New model\n     */\n    function initialize(key, target) {\n      var _this = this;\n      var relationships = {};\n\n      if (key !== undefined && target !== undefined) {\n        var schema = _this.schema[key];\n\n        if (schema.type === 'hasOne') {\n          relationships[key] = {\n            data: target.data.id\n          };\n        } else if (schema.type === 'hasMany') {\n          $log.warn('Initialize with relationship disallowed for hasMany relationships');\n        }\n      }\n\n      var data = {\n        type: _this.type,\n        id: uuid4.generate(),\n        attributes: {},\n        relationships: relationships\n      };\n\n      var config = {\n        saved: false,\n        synchronized: false,\n        initialization: false\n      };\n\n      return _this.cache.addOrUpdate(data, config);\n    }\n\n    /**\n     * Clears localy saved data\n     * @return {promise} Promise associated with the synchronization resolves to nothing\n     */\n    function clearCache() {\n      var _this = this;\n      var deferred = $q.defer();\n      var config = {\n        action: 'clearCache'\n      };\n\n      _this.cache.clear();\n\n      _this.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred;\n\n      function resolve(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clearCache', 'resolved', response);\n        response.finish();\n\n        deferred.resolve(response);\n      }\n\n      function reject(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clearCache', 'resolved', response);\n        response.finish();\n\n        deferred.reject(response);\n      }\n\n      function notify(response) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':factory:clearCache', 'notify', response);\n\n        deferred.notify(response);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .factory('AngularJsonAPICollection', AngularJsonAPICollectionWrapper);\n\n  function AngularJsonAPICollectionWrapper(\n    $rootScope,\n    $injector,\n    $q\n  ) {\n\n    AngularJsonAPICollection.prototype.fetch = fetch;\n    AngularJsonAPICollection.prototype.refresh = fetch;\n    AngularJsonAPICollection.prototype.get = get;\n\n    return AngularJsonAPICollection;\n\n    /**\n     * Constructor\n     * @param {AngularJsonAPIFactory} factory Factory associated with the collection\n     * @param {object} params  Params associated with this factory (such as filters)\n     */\n    function AngularJsonAPICollection(factory, params) {\n      var _this = this;\n\n      _this.factory = factory;\n      _this.type = factory.schema.type;\n      _this.params = params;\n\n      _this.errors = {\n        synchronization: {\n          name: 'Synchronization',\n          description: 'Errors during synchronization',\n          errors: []\n        }\n      };\n\n      _this.error = false;\n\n      _this.data = _this.factory.cache.index(_this.params);\n      _this.synchronized = false;\n\n      $rootScope.$on('angularJsonAPI:' + _this.type + ':object:remove', remove);\n      $rootScope.$on('angularJsonAPI:' + _this.type + ':factory:clearCache', clear);\n\n      function remove(event, status, object) {\n        var index;\n\n        if (status === 'resolved') {\n\n          index = _this.data.indexOf(object);\n          if (index > -1) {\n            _this.data.splice(index, 1);\n            _this.factory.cache.setIndexIds(_this.data);\n          }\n        }\n      }\n\n      function clear() {\n        _this.data = undefined;\n      }\n    }\n\n    /**\n     * Shortcut to this.factory.get\n     * @param  {uuid4} id Id of object]\n     * @return {AngularJsonAPIModel}          Model with id\n     */\n    function get(id) {\n      var _this = this;\n\n      return _this.factory.get(id);\n    }\n\n    /**\n     * Synchronizes collection with the server\n     * @return {promise} Promise associated with synchronization that resolves to this\n     */\n    function fetch() {\n      var _this = this;\n      var deferred = $q.defer();\n      var $jsonapi = $injector.get('$jsonapi');\n      var config = {\n        action: 'all',\n        params: _this.params\n      };\n\n      _this.factory.synchronizer.synchronize(config).then(resolve, reject, notify);\n\n      return deferred.promise;\n\n      function resolve(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'resolved', _this, results);\n\n        _this.errors.synchronization.errors = [];\n        _this.data = $jsonapi.proccesResults(results.data);\n        _this.error = false;\n\n        _this.updatedAt = Date.now();\n        _this.synchronized = true;\n\n        _this.factory.cache.setIndexIds(_this.data);\n\n        results.finish();\n\n        deferred.resolve(_this);\n      }\n\n      function reject(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'rejected', _this, results);\n\n        _this.errors.synchronization.errors = results.errors;\n        _this.error = true;\n\n        results.finish();\n\n        deferred.reject(results);\n      }\n\n      function notify(results) {\n        $rootScope.$emit('angularJsonAPI:' + _this.type + ':collection:fetch', 'notify', _this, results);\n\n        deferred.notify(results);\n      }\n    }\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .provider('$jsonapi', jsonapiProvider);\n\n  function jsonapiProvider() {\n    var memory = {};\n    var names = [];\n    this.$get = jsonapiFactory;\n\n    function jsonapiFactory($log, AngularJsonAPIFactory) {\n      return {\n        form: form,\n        get: get,\n        remove: remove,\n        all: all,\n        addFactory: addFactory,\n        getFactory: getFactory,\n        clearCache: clearCache,\n        proccesResults: proccesResults,\n\n        allFactories: allFactories,\n        factoriesNames: factoriesNames\n      };\n\n      function allFactories() {\n        return memory;\n      }\n\n      function factoriesNames() {\n        return names;\n      }\n\n      function addFactory(schema, synchronization) {\n        var factory = new AngularJsonAPIFactory(schema, synchronization);\n\n        memory[schema.type] = factory;\n        names.push(schema.type);\n      }\n\n      function getFactory(type) {\n        return memory[type];\n      }\n\n      function form(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t add not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].saved.form;\n      }\n\n      function get(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].get(id);\n      }\n\n      function remove(type, id) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t remove not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].remove(id);\n      }\n\n      function all(type) {\n        if (memory[type] === undefined) {\n          $log.error('Can\\t get all of not existing object type: ' + type + '. Use initialize(Model, datas).');\n        }\n\n        return memory[type].all();\n      }\n\n      function clearCache() {\n        angular.forEach(memory, function(factory) {\n          factory.clearCache();\n        });\n      }\n\n      function proccesResults(results) {\n        if (results === undefined) {\n          $log.error('Can\\'t proccess results:', results);\n        }\n\n        var config = {\n          saved: true,\n          synchronized: true,\n          initialization: false\n        };\n\n        angular.forEach(results.included, function(data) {\n          getFactory(data.type).cache.addOrUpdate(data, config);\n        });\n\n        if (angular.isArray(results.data)) {\n          var objects = [];\n          angular.forEach(results.data, function(data) {\n            objects.push(getFactory(data.type).cache.addOrUpdate(data, config));\n          });\n\n          return objects;\n        } else {\n          return getFactory(results.data.type).cache.addOrUpdate(results.data, config);\n        }\n      }\n    }\n  }\n\n})();\n\n","(function() {\n  'use strict';\n\n  angular.module('angular-jsonapi')\n  .config(function($logProvider) {\n    $logProvider.debugEnabled(false);\n  });\n})();\n"],"sourceRoot":"/source/"}